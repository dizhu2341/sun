#include "CombiSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CCombiSync::CCombiSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tcombi");
    strcpy(m_sSrcView, "VO4JC_COMBI");
    strcpy(m_sTmpTable, "sync_combi");
    strcpy(m_sDstTable, "jc_tcombi");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CCombiSync::~CCombiSync()
{

}

bool CCombiSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    //声明结构体变量
    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;

    typedef struct CombiRecord
    {
        int combi_id[BATCH_ROWS];
        int asset_id[BATCH_ROWS];
        int fund_id[BATCH_ROWS];
        char combi_code[BATCH_ROWS][17];
        char combi_name[BATCH_ROWS][129];
        char combi_status[BATCH_ROWS][2];
        char invest_type[BATCH_ROWS][2];
        char stocktype_right[BATCH_ROWS][1025];
        char entrdire_right[BATCH_ROWS][1025];
        char permit_markets[BATCH_ROWS][257];
        char permit_busin_classes[BATCH_ROWS][1025];
        char futures_invest_type[BATCH_ROWS][2];
        int op_bid_combi_id[BATCH_ROWS];
        char append_entrust[BATCH_ROWS][2];
        char append_entrust_qh[BATCH_ROWS][2];
        char combi_identifier[BATCH_ROWS][21];
    } CombiRecord;
    CombiRecord *lpCombiRecord;
    char (*pEntrustDirArr)[1025];
    char (*pStockTypeArr)[1025];
    char (*pMarketNoArr)[257];
    EXEC SQL END DECLARE SECTION;
    lpCombiRecord = new CombiRecord();
    if (NULL == lpCombiRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【CombiRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpCombiRecord, 0, sizeof (CombiRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR  SELECT 
                    COMBI_ID,               ASSET_ID,               FUND_ID,            COMBI_CODE,         COMBI_NAME,
                    COMBI_STATUS,           INVEST_TYPE,            STOCKTYPE_RIGHT,    ENTRDIRE_RIGHT,     PERMIT_MARKETS,
                    PERMIT_BUSIN_CLASSES,   FUTURES_INVEST_TYPE,    OP_BID_COMBI_ID,    APPEND_ENTRUST,     APPEND_ENTRUST_QH,
                    COMBI_IDENTIFIER
            FROM VO4JC_COMBI;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpCombiRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    pEntrustDirArr = new char[BATCH_ROWS][1025];
    pStockTypeArr = new char[BATCH_ROWS][1025];
    pMarketNoArr = new char[BATCH_ROWS][257];

    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpCombiRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpCombiRecord;
            delete pEntrustDirArr;
            delete pStockTypeArr;
            delete pMarketNoArr;
            return false;
        }
        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;
        //转换委托方向列表、证券类别列表、交易市场列表
        ConvertEntrustDirList(pEntrustDirArr, lpCombiRecord->entrdire_right);
        ConvertStockTypeList(pStockTypeArr, lpCombiRecord->stocktype_right);
        ConvertMarketNoList(pMarketNoArr, lpCombiRecord->permit_markets);

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_combi(
                    combi_id,               asset_id,               fund_id,                combi_code,             combi_name,
                    combi_status,           invest_type,            stocktype_right,        entrdire_right,         permit_markets,
                    permit_busin_classes,   futures_invest_type,    op_bid_combi_id,        append_entrust,         append_entrust_qh,
                    combi_identifier
            )
            values(
                    :lpCombiRecord->combi_id,                             :lpCombiRecord->asset_id,                      :lpCombiRecord->fund_id,                 
                    rtrim(:lpCombiRecord->combi_code),                    rtrim(:lpCombiRecord->combi_name),                rtrim(:lpCombiRecord->combi_status), 
                    rtrim(:lpCombiRecord->invest_type),                   rtrim(:pStockTypeArr),               rtrim(:pEntrustDirArr),           
                    rtrim(:pMarketNoArr),               rtrim(:lpCombiRecord->permit_busin_classes),           rtrim(:lpCombiRecord->futures_invest_type), 
                    :lpCombiRecord->op_bid_combi_id,                     rtrim(:lpCombiRecord->append_entrust),                    rtrim(:lpCombiRecord->append_entrust_qh), 
                    rtrim(:lpCombiRecord->combi_identifier));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpCombiRecord;
            delete pEntrustDirArr;
            delete pStockTypeArr;
            delete pMarketNoArr;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    delete lpCombiRecord;
    delete pEntrustDirArr;
    delete pStockTypeArr;
    delete pMarketNoArr;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    return true;
}

bool CCombiSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME      VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || V_TABLE_NAME;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME || '(' ||   "
            "        ' COMBI_ID,' ||  "
            "        ' ASSET_ID,' ||  "
            "        ' FUND_ID,' ||  "
            "        ' COMBI_CODE,' ||  "
            "        ' COMBI_NAME,' ||  "
            "        ' COMBI_STATUS,' ||  "
            "        ' INVEST_TYPE,' ||  "
            "        ' STOCKTYPE_RIGHT,' ||  "
            "        ' ENTRDIRE_RIGHT,' ||  "
            "        ' PERMIT_MARKETS,' ||  "
            "        ' PERMIT_BUSIN_CLASSES,' ||  "
            "        ' FUTURES_INVEST_TYPE,' ||  "
            "        ' OP_BID_COMBI_ID,' ||  "
            "        ' APPEND_ENTRUST_QH_FLAG,' ||  "
            "        ' APPEND_ENTRUST_XH_FLAG,' ||  "
            "        ' COMBI_IDENTIFIER,' ||    "
            "       '  CREATE_DATE,     EXPIRE_DATE,        COMBI_CLASS,    REMARK_BALANCE, REMARK,     COMBI_MODEL_PARAM_ID, ' ||"
            "       ' JOIN_DISTRIBUTE,  FUND_VALUE_RATIO,   TARGET_BALANCE, EXPONENT_ID,    PASSIVE_INVEST_FLAG) ' ||"
            "        ' SELECT T1.COMBI_ID,' ||  "
            "        ' T1.ASSET_ID,' ||  "
            "        ' T1.FUND_ID,' ||  "
            "        ' NVL(T1.COMBI_CODE, '' ''),' ||  "
            "        ' NVL(T1.COMBI_NAME, '' ''),' ||  "
            "        ' NVL(T1.COMBI_STATUS, '' ''),' ||  "
            "        ' NVL(T1.INVEST_TYPE, '' ''),' ||  "
            "        ' NVL(T1.STOCKTYPE_RIGHT, '' ''),' ||  "
            "        ' NVL(T1.ENTRDIRE_RIGHT, '' ''),' ||  "
            "        ' NVL(T1.PERMIT_MARKETS, '' ''),' ||  "
            "        ' NVL(T1.PERMIT_BUSIN_CLASSES, '' ''),' ||  "
            "        ' NVL(T1.FUTURES_INVEST_TYPE, ''a''),' ||  "
            "        ' T1.OP_BID_COMBI_ID,' ||  "
            "        ' NVL(T1.APPEND_ENTRUST_QH, ''0''),' ||  "
            "        ' NVL(T1.APPEND_ENTRUST, ''0''),' ||  "
            "        ' NVL(T1.COMBI_IDENTIFIER, ''0''), ' ||  "
            "        ' 0 CREATE_DATE,0 EXPIRE_DATE,'' '' COMBI_CLASS, 0 REMARK_BALANCE,'' '' REMARK,0 COMBI_MODEL_PARAM_ID, ' ||"
            "        ' '' '' JOIN_DISTRIBUTE,0 FUND_VALUE_RATIO,0 TARGET_BALANCE,0 EXPONENT_ID,''1'' PASSIVE_INVEST_FLAG ' ||"
            "        '  FROM SYNC_COMBI T1 ';"
            ""
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}

void CCombiSync::ConvertEntrustDirList(char (*pEntrustDirArr)[1025], char sEntrustDirSrc[BATCH_ROWS][1025])
{
    int nRet = 0;
    int nErrNo = 0;
    char sErrInfo[1025] = {0};
    char sErrPathInfo[4001] = {0};
    char sWhereStr[2048] = {0};
    char sEntrustDirList[4000] = {0};

    IF2PackSvr * lpPackService = m_lpContext->GetF2PackSvr();
    IF2Packer * lpInPacker = lpPackService->GetPacker(2);
    IF2Packer * lpOutPacker = lpPackService->GetPacker(2);
    IF2UnPacker * lpOutUnPacker = NULL;

    for (int i = 0; i < BATCH_ROWS; ++i)
    {
        //查询内存表
        replace(sWhereStr, sEntrustDirSrc[i], ",", "','");
        hs_snprintf(sWhereStr, sizeof (sWhereStr), "entrust_direction_src in ('%s')", sWhereStr);

        lpInPacker->BeginPack();
        lpInPacker->AddField("table_name", 'S');
        lpInPacker->AddField("column_str", 'S');
        lpInPacker->AddField("where_str", 'S', 2048);
        lpInPacker->AddField("error_pathinfo", 'S', 4000);
        lpInPacker->AddStr("jc_tconvertentrustdir");
        lpInPacker->AddStr("entrust_direction");
        lpInPacker->AddStr(sWhereStr);
        lpInPacker->AddStr(" ");
        lpInPacker->EndPack();

        lpOutPacker->BeginPack();
        nRet = GetMdbData(m_lpContext, lpInPacker->UnPack(), lpOutPacker, &nErrNo, sErrInfo, sErrPathInfo);
        lpOutPacker->EndPack();
        if (nRet != 0)
        {
            SetErrorInfo(SYNC_ERR_OTHER, "【%s】表同步，转换委托方向列表时读取内存表失败【%s】", m_sDstTable, sErrInfo);

            if (lpInPacker)
            {
                free(lpInPacker->GetPackBuf());
                lpInPacker->Release();
            }
            if (lpOutPacker)
            {
                free(lpOutPacker->GetPackBuf());
                lpOutPacker->Release();
            }
            return;
        }

        //重新组装转换后的列表字符串
        int j = 0;
        lpOutUnPacker = lpOutPacker->UnPack();
        while (!lpOutUnPacker->IsEOF())
        {
            if (j)
            {
                sprintf(sEntrustDirList, "%s,%d", sEntrustDirList, lpOutUnPacker->GetInt("entrust_direction"));
            } else
            {
                sprintf(sEntrustDirList, "%d", lpOutUnPacker->GetInt("entrust_direction"));
            }
            j++;
            lpOutUnPacker->Next();
        }

        strcpy(pEntrustDirArr[i], sEntrustDirList);

        //重置
        memset(sEntrustDirList, 0, sizeof (sEntrustDirList));
        memset(sWhereStr, 0, sizeof (sWhereStr));
    }

    //释放资源
    if (lpInPacker)
    {
        free(lpInPacker->GetPackBuf());
        lpInPacker->Release();
    }
    if (lpOutPacker)
    {
        free(lpOutPacker->GetPackBuf());
        lpOutPacker->Release();
    }
}

void CCombiSync::ConvertStockTypeList(char (*pStockTypeArr)[1025], char sStockTypeSrc[BATCH_ROWS][1025])
{
    int nRet = 0;
    int nErrNo = 0;
    char sErrInfo[1025] = {0};
    char sErrPathInfo[4001] = {0};
    char sWhereStr[2048] = {0};
    char sStockTypeList[4000] = {0};

    IF2PackSvr * lpPackService = m_lpContext->GetF2PackSvr();
    IF2Packer * lpInPacker = lpPackService->GetPacker(2);
    IF2Packer * lpOutPacker = lpPackService->GetPacker(2);
    IF2UnPacker * lpOutUnPacker = NULL;

    for (int i = 0; i < BATCH_ROWS; ++i)
    {
        //查询内存表
        replace(sWhereStr, sStockTypeSrc[i], ",", "','");
        hs_snprintf(sWhereStr, sizeof (sWhereStr), "stock_type_src in ('%s')", sWhereStr);

        lpInPacker->BeginPack();
        lpInPacker->AddField("table_name", 'S');
        lpInPacker->AddField("column_str", 'S');
        lpInPacker->AddField("where_str", 'S', 2048);
        lpInPacker->AddField("error_pathinfo", 'S', 4000);
        lpInPacker->AddStr("jc_tconvertstocktype");
        lpInPacker->AddStr("stock_type");
        lpInPacker->AddStr(sWhereStr);
        lpInPacker->AddStr(" ");
        lpInPacker->EndPack();

        lpOutPacker->BeginPack();
        nRet = GetMdbData(m_lpContext, lpInPacker->UnPack(), lpOutPacker, &nErrNo, sErrInfo, sErrPathInfo);
        lpOutPacker->EndPack();
        if (nRet != 0)
        {
            SetErrorInfo(SYNC_ERR_OTHER, "【%s】表同步，转换证券类别列表时读取内存表失败【%s】", m_sDstTable, sErrInfo);

            if (lpInPacker)
            {
                free(lpInPacker->GetPackBuf());
                lpInPacker->Release();
            }
            if (lpOutPacker)
            {
                free(lpOutPacker->GetPackBuf());
                lpOutPacker->Release();
            }
            return;
        }

        //重新组装转换后的列表字符串
        int j = 0;
        lpOutUnPacker = lpOutPacker->UnPack();
        while (!lpOutUnPacker->IsEOF())
        {
            if (j)
            {
                sprintf(sStockTypeList, "%s,%d", sStockTypeList, lpOutUnPacker->GetInt("stock_type"));
            } else
            {
                sprintf(sStockTypeList, "%d", lpOutUnPacker->GetInt("stock_type"));
            }
            j++;
            lpOutUnPacker->Next();
        }

        strcpy(pStockTypeArr[i], sStockTypeList);

        //重置
        memset(sStockTypeList, 0, sizeof (sStockTypeList));
        memset(sWhereStr, 0, sizeof (sWhereStr));
    }

    //释放资源
    if (lpInPacker)
    {
        free(lpInPacker->GetPackBuf());
        lpInPacker->Release();
    }
    if (lpOutPacker)
    {
        free(lpOutPacker->GetPackBuf());
        lpOutPacker->Release();
    }
}

void CCombiSync::ConvertMarketNoList(char (*pMarketNoArr)[257], char sMarketNoSrc[BATCH_ROWS][257])
{
    int nRet = 0;
    int nErrNo = 0;
    char sErrInfo[1025] = {0};
    char sErrPathInfo[4001] = {0};
    char sWhereStr[2048] = {0};
    char sMarketNoList[4000] = {0};

    IF2PackSvr * lpPackService = m_lpContext->GetF2PackSvr();
    IF2Packer * lpInPacker = lpPackService->GetPacker(2);
    IF2Packer * lpOutPacker = lpPackService->GetPacker(2);
    IF2UnPacker * lpOutUnPacker = NULL;

    for (int i = 0; i < BATCH_ROWS; ++i)
    {
        //查询内存表
        replace(sWhereStr, sMarketNoSrc[i], ",", "','");
        hs_snprintf(sWhereStr, sizeof (sWhereStr), "market_no_src in ('%s')", sWhereStr);

        lpInPacker->BeginPack();
        lpInPacker->AddField("table_name", 'S');
        lpInPacker->AddField("column_str", 'S');
        lpInPacker->AddField("where_str", 'S', 2048);
        lpInPacker->AddField("error_pathinfo", 'S', 4000);
        lpInPacker->AddStr("jc_tconvertmarketno");
        lpInPacker->AddStr("market_no");
        lpInPacker->AddStr(sWhereStr);
        lpInPacker->AddStr(" ");
        lpInPacker->EndPack();

        lpOutPacker->BeginPack();
        nRet = GetMdbData(m_lpContext, lpInPacker->UnPack(), lpOutPacker, &nErrNo, sErrInfo, sErrPathInfo);
        lpOutPacker->EndPack();
        if (nRet != 0)
        {
            SetErrorInfo(SYNC_ERR_OTHER, "【%s】表同步，转换交易市场列表时读取内存表失败【%s】", m_sDstTable, sErrInfo);

            if (lpInPacker)
            {
                free(lpInPacker->GetPackBuf());
                lpInPacker->Release();
            }
            if (lpOutPacker)
            {
                free(lpOutPacker->GetPackBuf());
                lpOutPacker->Release();
            }
            return;
        }

        //重新组装转换后的列表字符串
        int j = 0;
        lpOutUnPacker = lpOutPacker->UnPack();
        while (!lpOutUnPacker->IsEOF())
        {
            if (j)
            {
                sprintf(sMarketNoList, "%s,%d", sMarketNoList, lpOutUnPacker->GetInt("market_no"));
            } else
            {
                sprintf(sMarketNoList, "%d", lpOutUnPacker->GetInt("market_no"));
            }
            j++;
            lpOutUnPacker->Next();
        }

        strcpy(pMarketNoArr[i], sMarketNoList);

        //重置
        memset(pMarketNoArr, 0, sizeof (sMarketNoList));
        memset(sWhereStr, 0, sizeof (sWhereStr));
    }

    //释放资源
    if (lpInPacker)
    {
        free(lpInPacker->GetPackBuf());
        lpInPacker->Release();
    }
    if (lpOutPacker)
    {
        free(lpOutPacker->GetPackBuf());
        lpOutPacker->Release();
    }
}

