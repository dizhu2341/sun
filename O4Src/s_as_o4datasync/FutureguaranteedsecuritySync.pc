#include "FutureguaranteedsecuritySync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CFutureguaranteedsecuritySync::CFutureguaranteedsecuritySync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tfutureguaranteedsecurity");
    strcpy(m_sSrcView, "VO4JC_FUTUREGUARANTEEDSECURITY");
    strcpy(m_sTmpTable, "sync_futureguaranteed");
    strcpy(m_sDstTable, "uft_tfutureguaranteed");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CFutureguaranteedsecuritySync::~CFutureguaranteedsecuritySync()
{
}

bool CFutureguaranteedsecuritySync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct FutureguaranteedsecurityRecord
    {
        int business_date[BATCH_ROWS];
        int object_combi_id[BATCH_ROWS];
        char invest_type[BATCH_ROWS][2];
        char position_type[BATCH_ROWS][2];
        char bind_seat[BATCH_ROWS][7];
        char stockholder_id[BATCH_ROWS][31];
        char market_no[BATCH_ROWS][2];
        char report_code[BATCH_ROWS][33];
        double current_amount[BATCH_ROWS];
        int target_asset_id[BATCH_ROWS];
    } FutureguaranteedsecurityRecord;
    FutureguaranteedsecurityRecord *lpFutureguaranteedsecurityRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpFutureguaranteedsecurityRecord = new FutureguaranteedsecurityRecord();
    if (NULL == lpFutureguaranteedsecurityRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【FutureguaranteedsecurityRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpFutureguaranteedsecurityRecord, 0, sizeof (FutureguaranteedsecurityRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                    select business_date, object_combi_id, invest_type, position_type, bind_seat, stockholder_id, market_no, report_code, current_amount, target_asset_id
                    from VO4JC_FUTUREGUARANTEEDSECURITY;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpFutureguaranteedsecurityRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpFutureguaranteedsecurityRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFutureguaranteedsecurityRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_futureguaranteed(business_date, object_combi_id, invest_type, position_type, bind_seat, stockholder_id, market_no, report_code, current_amount, target_asset_id)
             values(:lpFutureguaranteedsecurityRecord->business_date,
										:lpFutureguaranteedsecurityRecord->object_combi_id,
										rtrim(:lpFutureguaranteedsecurityRecord->invest_type),
										rtrim(:lpFutureguaranteedsecurityRecord->position_type),
                                        rtrim(:lpFutureguaranteedsecurityRecord->bind_seat),
										rtrim(:lpFutureguaranteedsecurityRecord->stockholder_id),
										rtrim(:lpFutureguaranteedsecurityRecord->market_no),
										rtrim(:lpFutureguaranteedsecurityRecord->report_code),
										:lpFutureguaranteedsecurityRecord->current_amount,
                                        :lpFutureguaranteedsecurityRecord->target_asset_id);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFutureguaranteedsecurityRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpFutureguaranteedsecurityRecord;
    return true;
}

bool CFutureguaranteedsecuritySync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;
    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "       '   BUSINESS_DATE, OBJECT_COMBI_ID, INVEST_TYPE, POSITION_TYPE, BIND_SEAT, '   ||"
            "       '   STOCKHOLDER_ID, INTER_CODE, CURRENT_AMOUNT, TARGET_ASSET_ID)'   ||"
            "       '   SELECT T1.BUSINESS_DATE, T1.OBJECT_COMBI_ID, NVL(T1.INVEST_TYPE,'' ''), NVL(T1.POSITION_TYPE,'' ''), NVL(T1.BIND_SEAT,'' ''),  '   ||"
            "       '   CASE WHEN T1.STOCKHOLDER_ID=''-1'' THEN ''*'' ELSE NVL(T1.STOCKHOLDER_ID, ''*'') END AS STOCKHOLDER_ID, ' ||   "
            "       '   T3.INTER_CODE, T1.CURRENT_AMOUNT, T1.TARGET_ASSET_ID '   ||"
            "       '   FROM SYNC_FUTUREGUARANTEED T1, JC_TCONVERTMARKETNO T2, JC_TCONVERTINTERCODE T3'   ||"
            "       '   WHERE T1.MARKET_NO = T2.MARKET_NO_SRC '   ||"
            "       '   AND T1.REPORT_CODE = T3.REPORT_CODE '   ||" 
            "       '   AND T2.MARKET_NO = T3.MARKET_NO '; " 
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;

    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


