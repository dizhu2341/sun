#include "AssetdayZscshSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CAssetdayZscshSync::CAssetdayZscshSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tassetday");
    strcpy(m_sSrcView,  "vo4jc_assetcash_redo");
    strcpy(m_sTmpTable, "sync_assetday_zscsh");
    strcpy(m_sDstTable, "uft_tassetday_sync");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CAssetdayZscshSync::~CAssetdayZscshSync()
{
}

bool CAssetdayZscshSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
  
    EXEC SQL BEGIN DECLARE SECTION;
        int nFetchRows;
        //声明结构体变量

        typedef struct AssetdayZscshRecord
        {
            int business_date[BATCH_ROWS];
            int fund_id[BATCH_ROWS];
            int asset_id[BATCH_ROWS];
            char currency_no[BATCH_ROWS][4];
            double begin_cash[BATCH_ROWS];
            int company_id[BATCH_ROWS];
            char balance_type[BATCH_ROWS][2];
            int capital_account_id[BATCH_ROWS];
            double current_cash[BATCH_ROWS];
            double deposit_balance[BATCH_ROWS];
            double futures_occupy_deposit[BATCH_ROWS];
            double basic_frozen_balance[BATCH_ROWS];
        } AssetdayZscshRecord;
        AssetdayZscshRecord *lpAssetdayZscshRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    
    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    if (NULL == o3Ctx)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，获取O3数据库连接句柄失败", m_sDstTable);
        return false;
    }
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
        select 
            business_date, 
            fund_id, 
            asset_id, 
            currency_no, 
            begin_cash,
            company_id,
            balance_type,
            capital_account_id,
            current_cash,
            deposit_balance,
            futures_occupy_deposit,
            basic_frozen_balance
        from vo4jc_assetcash_redo;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    if (NULL == o4Ctx)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，获取O4数据库连接句柄失败", m_sDstTable);
        return false;
    }
    // 申请内存空间
    lpAssetdayZscshRecord =  new AssetdayZscshRecord();
    if (NULL == lpAssetdayZscshRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【AssetdayRecord】失败", m_sDstTable);
        return false;
    }
    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        memset(lpAssetdayZscshRecord, 0, sizeof (AssetdayZscshRecord));
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpAssetdayZscshRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpAssetdayZscshRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_assetday_zscsh(business_date, 
                                        fund_id, 
                                        asset_id, 
                                        currency_no, 
                                        begin_cash,
                                        company_id,
                                        balance_type,
                                        capital_account_id,
                                        current_cash,
                                        deposit_balance,
                                        futures_occupy_deposit,
                                        basic_frozen_balance)
             values(:lpAssetdayZscshRecord->business_date,
					:lpAssetdayZscshRecord->fund_id,
                    :lpAssetdayZscshRecord->asset_id,
                    rtrim(:lpAssetdayZscshRecord->currency_no),
                    :lpAssetdayZscshRecord->begin_cash,
                    :lpAssetdayZscshRecord->company_id,
                    rtrim(:lpAssetdayZscshRecord->balance_type),
                    :lpAssetdayZscshRecord->capital_account_id,
                    :lpAssetdayZscshRecord->current_cash,
                    :lpAssetdayZscshRecord->deposit_balance,
                    :lpAssetdayZscshRecord->futures_occupy_deposit,
                    :lpAssetdayZscshRecord->basic_frozen_balance);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpAssetdayZscshRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpAssetdayZscshRecord;
    return true;
}

bool CAssetdayZscshSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");
    
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    if (NULL == o4Ctx)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "从中间表导入数据到【%s】表，获取O4数据库连接句柄失败", m_sDstTable);
        return false;
    }
    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME      VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || V_TABLE_NAME;"
           "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME || '(' ||  "
            "           ' BUSINESS_DATE,' ||  "
            "           ' FUND_ID,' ||  "
            "           ' ASSET_ID,' ||  "
            "           ' CURRENCY_NO,' || "
            "           ' BEGIN_CASH,' ||  "
            "           ' COMPANY_ID,' ||"
            "           ' BALANCE_TYPE,' ||"
            "           ' CAPITAL_ACCOUNT_ID,' ||"
            "           ' CURRENT_CASH,' ||"
            "           ' DEPOSIT_BALANCE,' ||"
            "           ' FUTURES_OCCUPY_DEPOSIT,' ||"
            "           ' BASIC_FROZEN_BALANCE)' ||"
            "        ' SELECT T1.BUSINESS_DATE,' ||   "
            "        ' T1.FUND_ID,' ||     "
            "        ' T1.ASSET_ID,' ||   "
            "        ' NVL(T1.CURRENCY_NO, ''CNY''),' ||  "
            "        ' T1.BEGIN_CASH,' || "
            "        ' T1.COMPANY_ID,' ||"
            "        ' T1.BALANCE_TYPE,' ||"
            "        ' T1.CAPITAL_ACCOUNT_ID,' ||"
            "        ' T1.CURRENT_CASH,' ||"
            "        ' T1.DEPOSIT_BALANCE,' ||"
            "        ' T1.FUTURES_OCCUPY_DEPOSIT,' ||"
            "        ' T1.BASIC_FROZEN_BALANCE' ||"
            "        '  FROM SYNC_ASSETDAY_ZSCSH T1';"
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


