#include "Mortgageinfo.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CMortGageInfo::CMortGageInfo(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tmortgageinfo");
    strcpy(m_sSrcView,  "vo4jc_mortgageinfo");
    strcpy(m_sTmpTable, "sync_mortgageinfo");
    strcpy(m_sDstTable, "uft_tmortgageinfo");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CMortGageInfo::~CMortGageInfo()
{
}

bool CMortGageInfo::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    
    EXEC SQL BEGIN DECLARE SECTION;
        int nFetchRows;
        //声明结构体变量

        typedef struct MortgageinfoRecord
        {
            int business_date[BATCH_ROWS];//           number(8,0)    DEFAULT 0       NOT NULL   , 
            int company_id[BATCH_ROWS];//              number(10,0)   DEFAULT 0       NOT NULL   , 
            int fund_id[BATCH_ROWS];//                 number(8,0)    DEFAULT 0       NOT NULL   , 
            int asset_id[BATCH_ROWS];//                number(10,0)   DEFAULT 0       NOT NULL   , 
            int combi_id[BATCH_ROWS];//                number(10,0)   DEFAULT 0       NOT NULL   , 
            char invest_type[BATCH_ROWS][2];//         char(1)        DEFAULT '' ''   NOT NULL   , 
            char position_type[BATCH_ROWS][2];//       char(1)        DEFAULT '' ''   NOT NULL   , 
            char stockholder_id[BATCH_ROWS][21];//     varchar2(20)   DEFAULT '' ''   NOT NULL   , 
            char bind_seat[BATCH_ROWS][21];//          varchar2(20)   DEFAULT '' ''   NOT NULL   , 
            int market_no[BATCH_ROWS];//               number(8,0)    DEFAULT 0       NOT NULL   , 
            char report_code[BATCH_ROWS][33];//        varchar2(32)   DEFAULT '' ''   NOT NULL   , 
            char position_stock_type[BATCH_ROWS][2];// char(1)        DEFAULT '' ''   NOT NULL   , 
            double mortgage_amount[BATCH_ROWS];//      number(20,4)   DEFAULT 0       NOT NULL   , 
            char mortgage_type[BATCH_ROWS][2];//       char(1)        DEFAULT '' ''   NOT NULL   , 
            double impawn_rate[BATCH_ROWS];//          number(15,8)   DEFAULT 0       NOT NULL     
        } MortgageinfoRecord;
        MortgageinfoRecord *lpMortgageinfoRecord = NULL;
    EXEC SQL END DECLARE SECTION;
    
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    if (NULL == o3Ctx)
    {
        SetErrorInfo(DB_ERR_CONNECTION, "【%s】表同步，获取O3数据库连接句柄失败", m_sDstTable);        
        return false;
    }    
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
        select 
            business_date,           
            company_id,
            fund_id, 
            asset_id,
            combi_id,
            invest_type,
            position_type,
            stockholder_id,
            bind_seat,
            market_no,
            report_code,
            position_stock_type,
            mortgage_amount,
            mortgage_type,
            impawn_rate
        from vo4jc_mortgageinfo;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);        
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");
    
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    if (NULL == o4Ctx)
    {
        SetErrorInfo(DB_ERR_CONNECTION, "【%s】表同步，获取O4数据库连接句柄失败", m_sDstTable);        
        return false;
    }
    // 申请内存空间
    lpMortgageinfoRecord = new MortgageinfoRecord();
    if (NULL == lpMortgageinfoRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【SubjectdataRecord】失败", m_sDstTable);
        return false;
    }
    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        memset(lpMortgageinfoRecord, 0, sizeof (MortgageinfoRecord));
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpMortgageinfoRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpMortgageinfoRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_mortgageinfo(
                    business_date,           
                    company_id,
                    fund_id, 
                    asset_id,
                    combi_id,
                    invest_type,
                    position_type,
                    stockholder_id,
                    bind_seat,
                    market_no,
                    report_code,
                    position_stock_type,
                    mortgage_amount,
                    mortgage_type,
                    impawn_rate)
             values(:lpMortgageinfoRecord->business_date,           
                    :lpMortgageinfoRecord->company_id,
                    :lpMortgageinfoRecord->fund_id, 
                    :lpMortgageinfoRecord->asset_id,
                    :lpMortgageinfoRecord->combi_id,
                    rtrim(:lpMortgageinfoRecord->invest_type),
                    rtrim(:lpMortgageinfoRecord->position_type),
                    rtrim(:lpMortgageinfoRecord->stockholder_id),
                    rtrim(:lpMortgageinfoRecord->bind_seat),
                    :lpMortgageinfoRecord->market_no,
                    rtrim(:lpMortgageinfoRecord->report_code),
                    rtrim(:lpMortgageinfoRecord->position_stock_type),
                    :lpMortgageinfoRecord->mortgage_amount,
                    rtrim(:lpMortgageinfoRecord->mortgage_type),
                    :lpMortgageinfoRecord->impawn_rate);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpMortgageinfoRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpMortgageinfoRecord;
    return true;
}

bool CMortGageInfo::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");
    
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;
    
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    if (NULL == o4Ctx)
    {
        SetErrorInfo(DB_ERR_CONNECTION, "从中间表导入数据库到【%s】表，获取O4数据库连接句柄失败", m_sDstTable);        
        return false;
    }
    
    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "	'   BUSINESS_DATE, COMPANY_ID, FUND_ID, ASSET_ID, COMBI_ID, INVEST_TYPE, POSITION_TYPE, STOCKHOLDER_ID, '||"
            "   '   BIND_SEAT, MARKET_NO, REPORT_CODE, POSITION_STOCK_TYPE, MORTGAGE_AMOUNT, MORTGAGE_TYPE, IMPAWN_RATE)' ||"            
            "	'   SELECT  T1.BUSINESS_DATE, T1.COMPANY_ID, T1.FUND_ID, T1.ASSET_ID, T1.COMBI_ID, T1.INVEST_TYPE, T1.POSITION_TYPE, '||"
            "   '           T1.STOCKHOLDER_ID, T1.BIND_SEAT, T1.MARKET_NO, T1.REPORT_CODE, T1.POSITION_STOCK_TYPE, T1.MORTGAGE_AMOUNT, T1.MORTGAGE_TYPE, T1.IMPAWN_RATE' ||"
            "	'   FROM SYNC_MORTGAGEINFO T1';"
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}




