#include "DearMoneySecuritySync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>
#include <stdlib.h>

CDearMoneySecuritySync::CDearMoneySecuritySync(IAS2Context * lpContext) : CDataSync(lpContext) {
    strcpy(m_sSrcTable, "tdearmoneysecurity"); 
    strcpy(m_sSrcView, "VO4JC_DearMoneySecurity"); 
    strcpy(m_sTmpTable, "sync_dearmoneysecurity"); 
    strcpy(m_sDstTable, "jc_tdearmoneysecurity"); 
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CDearMoneySecuritySync::~CDearMoneySecuritySync() {
}

bool CDearMoneySecuritySync::ExpO3View2Temp() {
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;

    typedef struct DearMoneySecurityRecord {
        char broker_no[BATCH_ROWS][33];
        char market_no[BATCH_ROWS][2];
        char report_code[BATCH_ROWS][33];
    } DearMoneySecurityRecord;
    DearMoneySecurityRecord *lpDearMoneySecurityRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    lpDearMoneySecurityRecord = new DearMoneySecurityRecord();
    if (NULL == lpDearMoneySecurityRecord) {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【AccountgroupRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpDearMoneySecurityRecord, 0, sizeof (DearMoneySecurityRecord));

    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                    select broker_no, market_no, report_code from VO4JC_DearMoneySecurity;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0) {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpDearMoneySecurityRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

     // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i) {
         // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpDearMoneySecurityRecord;
        if (sqlca.sqlcode < 0) {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpDearMoneySecurityRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_dearmoneysecurity(broker_no, market_no, report_code)
             values(rtrim(:lpDearMoneySecurityRecord->broker_no),
                    rtrim(:lpDearMoneySecurityRecord->market_no),
                    rtrim(:lpDearMoneySecurityRecord->report_code));
        if (sqlca.sqlcode < 0) {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpDearMoneySecurityRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
     LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");

    delete lpDearMoneySecurityRecord;
    return true;
}

bool CDearMoneySecuritySync::ExpTemp2Dst() {
     LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;
    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql,
            "DECLARE"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '||V_TABLE_NAME_O4||' (' ||"
            "                    'INTER_CODE, BROKER_NO, MARKET_NO, REPORT_CODE) ' ||"
            "                    '  SELECT C.INTER_CODE, A.BROKER_NO, B.MARKET_NO, C.REPORT_CODE' || "
            "                    '    FROM '||V_TABLE_NAME_TMP||'  A,' || "
            "                    '         jc_tconvertintercode    C,' || "
            "                    '          jc_tconvertmarketno    B' || "
            "                    '     WHERE A.REPORT_CODE = C.REPORT_CODE' ||"
            "                   '       AND A.MARKET_NO = B.MARKET_NO_SRC'; "
            "   COMMIT;"
            "END;", m_sTmpTable, m_sDstTable);


    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0) {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}
