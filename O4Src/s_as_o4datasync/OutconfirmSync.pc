#include "OutconfirmSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

COutconfirmSync::COutconfirmSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "toutconfirm");
    strcpy(m_sSrcView, "vo4jc_otcentuncomp");
    strcpy(m_sTmpTable, "sync_outconfirm");
    strcpy(m_sDstTable, "uft_toutconfirm");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

COutconfirmSync::~COutconfirmSync()
{
}

bool COutconfirmSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量   

    typedef struct OutconfirmRecord
    {
        int execconfirm_no[BATCH_ROWS];
        int daily_instruction_no[BATCH_ROWS];
        int index_daily_modify[BATCH_ROWS];
        int batch_serial_no[BATCH_ROWS];
        int ins_stock_id[BATCH_ROWS];
        int fund_id[BATCH_ROWS];
        int asset_id[BATCH_ROWS];
        int combi_id[BATCH_ROWS];      
        char invest_type[BATCH_ROWS][2];
        char report_code[BATCH_ROWS][33];
        int market_no[BATCH_ROWS];
        int entrust_direction[BATCH_ROWS];
        double entrust_balance[BATCH_ROWS];
        double entrust_amount[BATCH_ROWS];
        double entrust_price[BATCH_ROWS];
        double fee[BATCH_ROWS];
        char in_report_code[BATCH_ROWS][33];
        int in_combi_id[BATCH_ROWS];
        char other_invest_type[BATCH_ROWS][2];
        int  business_date[BATCH_ROWS];
        char exceed_flag[BATCH_ROWS][2];
        double total_deal_amount[BATCH_ROWS];
    } OutconfirmRecord;
    OutconfirmRecord *lpOutconfirmRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpOutconfirmRecord =  new OutconfirmRecord();
    if (NULL == lpOutconfirmRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【OutconfirmRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpOutconfirmRecord, 0, sizeof (OutconfirmRecord));




    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体

    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR select execconfirm_no, daily_instruction_no, index_daily_modify, batch_serial_no, ins_stock_id,  fund_id, asset_id, combi_id, 
        invest_type,report_code, market_no, entrust_direction, entrust_balance, entrust_amount, entrust_price, fee, 
        in_report_code,in_combi_id, other_invest_type,business_date,exceed_flag, total_deal_amount
        from vo4jc_otcentuncomp;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpOutconfirmRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpOutconfirmRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpOutconfirmRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_outconfirm(execconfirm_no, daily_instruction_no, index_daily_modify, batch_serial_no, ins_stock_id, fund_id, asset_id, combi_id, 
                                        invest_type,report_code, market_no, entrust_direction, entrust_balance, entrust_amount, entrust_price, fee, 
                                        in_report_code,in_combi_id, other_invest_type,business_date,exceed_flag, total_deal_amount)
             values(:lpOutconfirmRecord->execconfirm_no,
                    :lpOutconfirmRecord->daily_instruction_no,
                    :lpOutconfirmRecord->index_daily_modify,
                    :lpOutconfirmRecord->batch_serial_no,
                    :lpOutconfirmRecord->ins_stock_id,
                    :lpOutconfirmRecord->fund_id,
                    :lpOutconfirmRecord->asset_id,
                    :lpOutconfirmRecord->combi_id,
                    rtrim(:lpOutconfirmRecord->invest_type),
                    rtrim(:lpOutconfirmRecord->report_code),
                    (:lpOutconfirmRecord->market_no),
                    (:lpOutconfirmRecord->entrust_direction),
                    :lpOutconfirmRecord->entrust_balance,                  
                    :lpOutconfirmRecord->entrust_amount,
                    :lpOutconfirmRecord->entrust_price,
                    :lpOutconfirmRecord->fee,
                    rtrim(:lpOutconfirmRecord->in_report_code),                  
                    :lpOutconfirmRecord->in_combi_id,
                    rtrim(:lpOutconfirmRecord->other_invest_type),                
                    :lpOutconfirmRecord->business_date,
                    rtrim(:lpOutconfirmRecord->exceed_flag),
                    :lpOutconfirmRecord->total_deal_amount);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpOutconfirmRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpOutconfirmRecord;
    return true;
}

bool COutconfirmSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "  '  EXECCONFIRM_NO,DAILY_INSTRUCTION_NO,INDEX_DAILY_MODIFY,BATCH_SERIAL_NO,INS_STOCK_ID,'  ||"
            "  '  FUND_ID,ASSET_ID,COMBI_ID,INVEST_TYPE,REPORT_CODE,MARKET_NO, '  ||"
            "  '  ENTRUST_DIRECTION,ENTRUST_BALANCE,ENTRUST_AMOUNT,ENTRUST_PRICE,FEE, '  ||"
            "  '  IN_REPORT_CODE,IN_COMBI_ID,OTHER_INVEST_TYPE, '  ||"
            "  '  BUSINESS_DATE,EXCEED_FLAG, total_deal_amount) '  ||"
            "  ' SELECT ' ||"
            "  '   T1.EXECCONFIRM_NO, ' ||"
            "  '   T1.DAILY_INSTRUCTION_NO, ' ||"
            "  '   T1.INDEX_DAILY_MODIFY, ' ||"
            "  '   T1.BATCH_SERIAL_NO, ' ||"
            "  '   T1.INS_STOCK_ID, ' ||"
            "  '   T1.FUND_ID, ' ||"
            "  '   T1.ASSET_ID, ' ||"
            "  '   T1.COMBI_ID, ' ||"
            "  '   NVL(T1.INVEST_TYPE, '' ''), ' ||"
            "  '   NVL(T1.REPORT_CODE, '' ''), ' ||"
            "  '   T1.MARKET_NO, ' ||"
            "  '   T1.ENTRUST_DIRECTION, ' ||"
            "  '   T1.ENTRUST_BALANCE, ' ||"
            "  '   T1.ENTRUST_AMOUNT, ' ||"
            "  '   T1.ENTRUST_PRICE, ' ||"
            "  '   T1.FEE, ' ||"
            "  '   NVL(T1.IN_REPORT_CODE, '' ''), ' ||"
            "  '   T1.IN_COMBI_ID, ' ||"
            "  '   NVL(T1.OTHER_INVEST_TYPE, '' ''),  T1.BUSINESS_DATE, ' ||"
            "  '   T1.EXCEED_FLAG, T1.total_deal_amount ' ||"
            "  '  FROM SYNC_OUTCONFIRM T1' ;"       
            "  COMMIT;"
            "END;", m_sTmpTable, m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


