#include "LoffundparamSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CLoffundparamSync::CLoffundparamSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tloffundparam");
    strcpy(m_sSrcView, "VO4JC_LOFFUNDPARAM");
    strcpy(m_sTmpTable, "sync_loffundparam");
    strcpy(m_sDstTable, "jc_tloffundparam");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CLoffundparamSync::~CLoffundparamSync()
{
}

bool CLoffundparamSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct LoffundparamRecord
    {
        char market_no[BATCH_ROWS][2];
        char report_code[BATCH_ROWS][33];
        char lof_fund_type[BATCH_ROWS][2];
        int partitionmerge_unit[BATCH_ROWS];
        int master_ratio[BATCH_ROWS];
        double merge_lowerlimit[BATCH_ROWS];
        double partition_lowerlimit[BATCH_ROWS];
        char business_status[BATCH_ROWS][9];
        char sub_fund_market_no1[BATCH_ROWS][2];
        char sub_fund_code1[BATCH_ROWS][33];
        int sub_ratio1[BATCH_ROWS];
        char sub_business_status1[BATCH_ROWS][9];
        char sub_fund_market_no2[BATCH_ROWS][2];
        char sub_fund_code2[BATCH_ROWS][33];
        int sub_ratio2[BATCH_ROWS];
        char sub_business_status2[BATCH_ROWS][9];
    } LoffundparamRecord;
    LoffundparamRecord *lpLoffundparamRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpLoffundparamRecord = new LoffundparamRecord();
    if (NULL == lpLoffundparamRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【LoffundparamRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpLoffundparamRecord, 0, sizeof (LoffundparamRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                    select market_no, report_code, lof_fund_type, partitionmerge_unit, master_ratio, merge_lowerlimit, partition_lowerlimit, business_status, sub_fund_market_no1, sub_fund_code1, sub_ratio1, sub_business_status1, sub_fund_market_no2, sub_fund_code2, sub_ratio2, sub_business_status2 
                    from VO4JC_LOFFUNDPARAM;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpLoffundparamRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpLoffundparamRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpLoffundparamRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_loffundparam(market_no, report_code, lof_fund_type, partitionmerge_unit, master_ratio, merge_lowerlimit, partition_lowerlimit, business_status, sub_fund_market_no1, sub_fund_code1, sub_ratio1, sub_business_status1, sub_fund_market_no2, sub_fund_code2, sub_ratio2, sub_business_status2)
             values(rtrim(:lpLoffundparamRecord->market_no),
										rtrim(:lpLoffundparamRecord->report_code),
										rtrim(:lpLoffundparamRecord->lof_fund_type),
										:lpLoffundparamRecord->partitionmerge_unit,
										:lpLoffundparamRecord->master_ratio,
										:lpLoffundparamRecord->merge_lowerlimit,
										:lpLoffundparamRecord->partition_lowerlimit,
										rtrim(:lpLoffundparamRecord->business_status),
										rtrim(:lpLoffundparamRecord->sub_fund_market_no1),
										rtrim(:lpLoffundparamRecord->sub_fund_code1),
										:lpLoffundparamRecord->sub_ratio1,
										rtrim(:lpLoffundparamRecord->sub_business_status1),
										rtrim(:lpLoffundparamRecord->sub_fund_market_no2),
										rtrim(:lpLoffundparamRecord->sub_fund_code2),
										:lpLoffundparamRecord->sub_ratio2,
										rtrim(:lpLoffundparamRecord->sub_business_status2));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpLoffundparamRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpLoffundparamRecord;
    return true;
}

bool CLoffundparamSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;
    if (!DropTableIndex())
        return false;
    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_START_INTER_CODE NUMBER := 0;"
            "  V_INIT_TYPE       CHAR(1);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  V_INIT_TYPE      := '%c';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  SELECT MAX(TO_NUMBER(SUBSTR(TO_CHAR(INTER_CODE), 1, 7)))"
            "    INTO V_START_INTER_CODE"
            "    FROM (SELECT INTER_CODE,"
            "                 CASE"
            "                   WHEN MARKET_NO IN (1, 2, 5) AND LENGTH(REPORT_CODE) <= 6 AND"
            "                        REGEXP_LIKE(REPORT_CODE, '^[0-9]+$') THEN"
            "                    1"
            "                   ELSE"
            "                    0"
            "                 END MM"
            "            FROM JC_TCONVERTINTERCODE)"
            "   WHERE MM = 0;"
            "  V_START_INTER_CODE := CASE"
            "                          WHEN V_START_INTER_CODE IS NULL THEN"
            "                           0"
            "                          ELSE"
            "                           V_START_INTER_CODE - 1000000"
            "                        END;"
            ""
            "  IF V_INIT_TYPE <> '1' THEN"
            "    EXECUTE IMMEDIATE 'INSERT INTO JC_TCONVERTINTERCODE(MARKET_NO,REPORT_CODE,INTER_CODE)' ||"
            "                      '  SELECT V.MARKET_NO,' ||"
            "                      '         V.REPORT_CODE,' ||"
            "                      '         SF_CREATE_INTERCODE_WITH_INDEX(V.MARKET_NO,' ||"
            "                      '                                        V.REPORT_CODE,' ||"
            "                      '                                        '||V_START_INTER_CODE||' + V.RN)' ||"
            "                      '    FROM (SELECT T1.*, T2.INTER_CODE,ROW_NUMBER() OVER(ORDER BY CASE WHEN t2.INTER_CODE IS NULL THEN 1 ELSE 2 END) RN' ||"
            "                      '            FROM (SELECT DISTINCT A.MARKET_NO MARKET_NO_SRC,' ||"
            "                      '                                  B.MARKET_NO,' ||"
            "                      '                                  A.REPORT_CODE' ||"
            "                      '                    FROM SYNC_LOFFUNDPARAM A, JC_TCONVERTMARKETNO B' ||"
            "                      '                   WHERE A.MARKET_NO = B.MARKET_NO_SRC) T1' ||"
            "                      '            LEFT JOIN JC_TCONVERTINTERCODE T2' ||"
            "                      '              ON T1.MARKET_NO = T2.MARKET_NO' ||"
            "                      '             AND T1.REPORT_CODE = T2.REPORT_CODE) V' ||"
            "                      '             WHERE V.INTER_CODE IS NULL';"
            "  END IF;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "   '   MARKET_NO,REPORT_CODE,INTER_CODE,LOF_FUND_TYPE,PARTITIONMERGE_UNIT,MASTER_RATIO,MERGE_LOWERLIMIT,PARTITION_LOWERLIMIT,BUSINESS_STATUS,'   ||"
            "   '   SUB_FUND_MARKET_NO1,SUB_FUND_CODE1,SUB_RATIO1,SUB_BUSINESS_STATUS1,SUB_FUND_MARKET_NO2,SUB_FUND_CODE2,SUB_RATIO2,SUB_BUSINESS_STATUS2)'   ||"
            "   '   SELECT T2.MARKET_NO, NVL(T1.REPORT_CODE,'' ''),T3.INTER_CODE, T1.LOF_FUND_TYPE, T1.PARTITIONMERGE_UNIT, T1.MASTER_RATIO, T1.MERGE_LOWERLIMIT, T1.PARTITION_LOWERLIMIT, NVL(T1.BUSINESS_STATUS,'' ''),'   ||"
            "   '   NVL(T4.MARKET_NO,-1), NVL(T1.SUB_FUND_CODE1,'' ''), T1.SUB_RATIO1, NVL(T1.SUB_BUSINESS_STATUS1,'' ''), NVL(T5.MARKET_NO,-1), NVL(T1.SUB_FUND_CODE2,'' ''), T1.SUB_RATIO2, NVL(T1.SUB_BUSINESS_STATUS2,'' '') '   ||"
            "   '   FROM SYNC_LOFFUNDPARAM T1,JC_TCONVERTMARKETNO T2 , JC_TCONVERTINTERCODE T3,JC_TCONVERTMARKETNO T4,JC_TCONVERTMARKETNO T5'   ||"
            "   '   WHERE T1.MARKET_NO = T2.MARKET_NO_SRC'   ||"
            "   '   AND T1.SUB_FUND_MARKET_NO1 = T4.MARKET_NO_SRC(+)'   ||"
            "   '   AND T1.SUB_FUND_MARKET_NO2 = T5.MARKET_NO_SRC(+)' ||"
            "   '   AND T1.REPORT_CODE = T3.REPORT_CODE'   ||"
            "   '   AND T2.MARKET_NO = T3.MARKET_NO'; "
            "  COMMIT;"
            "END;", m_sDstTable, m_cSyncFlag);

    if (m_cSyncFlag == '2')
    {
        hsLockCreateInterCode();
    }
    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (m_cSyncFlag == '2')
    {
        hsUnlockCreateInterCode();
    }
    
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


