#include "BankhgregisterSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CBankhgregisterSync::CBankhgregisterSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "thgregister");
    strcpy(m_sSrcView, "VO4JC_BANKHGREGISTER");
    strcpy(m_sTmpTable, "sync_bankhgregister");
    strcpy(m_sDstTable, "uft_tbankhgregister");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CBankhgregisterSync::~CBankhgregisterSync()
{
}

bool CBankhgregisterSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct BankhgregisterRecord
    {
        int occur_date[BATCH_ROWS];
        int pendsettle_serial_no[BATCH_ROWS];
        int company_id[BATCH_ROWS];
        int fund_id[BATCH_ROWS];
        int asset_id[BATCH_ROWS];
        int combi_id[BATCH_ROWS];
        int market_no[BATCH_ROWS];
        char report_code[BATCH_ROWS][33];
        int entrust_direction[BATCH_ROWS];
        double hg_days[BATCH_ROWS];
        int clear_speed[BATCH_ROWS];
        double deal_amount[BATCH_ROWS];
        double deal_price[BATCH_ROWS];
        double deal_balance[BATCH_ROWS];
        int hg_deal_date[BATCH_ROWS];
        int legal_gh_date[BATCH_ROWS];
        int actual_gh_date[BATCH_ROWS];
        double hg_fee[BATCH_ROWS];
        double hg_interest[BATCH_ROWS];
        char gh_process_flag [BATCH_ROWS][2];
        char gh_settle_flag [BATCH_ROWS][2];
        int trade_rival_no[BATCH_ROWS];
    } BankhgregisterRecord;
    BankhgregisterRecord *lpBankhgregisterRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpBankhgregisterRecord =  new BankhgregisterRecord();
    if (NULL == lpBankhgregisterRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【BankhgregisterRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpBankhgregisterRecord, 0, sizeof (BankhgregisterRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
            select 
                occur_date, 
                pendsettle_serial_no, 
                company_id,
                fund_id, 
                asset_id, 
                combi_id,                
                market_no, 
                report_code, 
                entrust_direction, 
                hg_days, 
                clear_speed, 
                deal_amount, 
                deal_price, 
                deal_balance, 
                hg_deal_date, 
                legal_gh_date, 
                actual_gh_date, 
                hg_fee, hg_interest, 
                gh_process_flag, 
                gh_settle_flag, 
                trade_rival_no 
            from VO4JC_BANKHGREGISTER;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpBankhgregisterRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpBankhgregisterRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpBankhgregisterRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_bankhgregister(occur_date, 
                                            pendsettle_serial_no, 
                                            company_id,
                                            fund_id, 
                                            asset_id, 
                                            combi_id,
                                            market_no, 
                                            report_code, 
                                            entrust_direction, 
                                            hg_days, 
                                            clear_speed, 
                                            deal_amount, 
                                            deal_price, 
                                            deal_balance, 
                                            hg_deal_date, 
                                            legal_gh_date, 
                                            actual_gh_date, 
                                            hg_fee, 
                                            hg_interest, 
                                            gh_process_flag, 
                                            gh_settle_flag, 
                                            trade_rival_no)
             values(:lpBankhgregisterRecord->occur_date,
                    :lpBankhgregisterRecord->pendsettle_serial_no,
                    :lpBankhgregisterRecord->company_id,
                    :lpBankhgregisterRecord->fund_id,
                    :lpBankhgregisterRecord->asset_id,
                    :lpBankhgregisterRecord->combi_id,                                       
                    :lpBankhgregisterRecord->market_no,
                    rtrim(:lpBankhgregisterRecord->report_code),
                    :lpBankhgregisterRecord->entrust_direction,
                    :lpBankhgregisterRecord->hg_days,
                    :lpBankhgregisterRecord->clear_speed,
                    :lpBankhgregisterRecord->deal_amount,
                    :lpBankhgregisterRecord->deal_price,
                    :lpBankhgregisterRecord->deal_balance,
                    :lpBankhgregisterRecord->hg_deal_date,
                    :lpBankhgregisterRecord->legal_gh_date,
                    :lpBankhgregisterRecord->actual_gh_date,
                    :lpBankhgregisterRecord->hg_fee,
                    :lpBankhgregisterRecord->hg_interest,
                    rtrim(:lpBankhgregisterRecord->gh_process_flag ),
                    rtrim(:lpBankhgregisterRecord->gh_settle_flag ),
                    :lpBankhgregisterRecord->trade_rival_no);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpBankhgregisterRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpBankhgregisterRecord;
    return true;
}

bool CBankhgregisterSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "  '  OCCUR_DATE,PENDSETTLE_SERIAL_NO,COMPANY_ID,FUND_ID,ASSET_ID, balance_type, capital_account_id, COMBI_ID,MARKET_NO, '  ||"
            "  '  REPORT_CODE,ENTRUST_DIRECTION,deal_no,HG_DAYS,CLEAR_SPEED,DEAL_AMOUNT,DEAL_PRICE, '  ||"
            "  '  DEAL_BALANCE,HG_DEAL_DATE,LEGAL_GH_DATE,ACTUAL_GH_DATE,HG_FEE,HG_INTEREST, '  ||"
            "  '  GH_PROCESS_FLAG,GH_SETTLE_FLAG,TRADE_RIVAL_NO ) '  ||"
            "  ' SELECT ' ||"
            "  '   T1.OCCUR_DATE, ' ||"
            "  '   T1.PENDSETTLE_SERIAL_NO, ' ||"
            "  '   T1.COMPANY_ID,' ||"
            "  '   T1.FUND_ID, ' ||"
            "  '   T1.ASSET_ID, ' ||"
            "   '  T1.balance_type, T1.capital_account_id, ' ||"
            "  '   T1.COMBI_ID, ' ||"
            //"  ' CASE WHEN T1.STOCKHOLDER_ID=''-1'' THEN ''*'' ELSE NVL(T1.STOCKHOLDER_ID, ''*'') END AS STOCKHOLDER_ID, ' ||   "
            "  '   T1.MARKET_NO, ' ||"
            "  '   NVL(T1.REPORT_CODE, '' ''), ' ||"
            "  '   T1.ENTRUST_DIRECTION, ' ||"
            "   '  T1.deal_no,' ||"
            "  '   T1.HG_DAYS, ' ||"
            "  '   T1.CLEAR_SPEED, ' ||"
            "  '   T1.DEAL_AMOUNT, ' ||"
            "  '   T1.DEAL_PRICE, ' ||"
            "  '   T1.DEAL_BALANCE, ' ||"
            "  '   T1.HG_DEAL_DATE, ' ||"
            "  '   T1.LEGAL_GH_DATE, ' ||"
            "  '   T1.ACTUAL_GH_DATE, ' ||"
            "  '   T1.HG_FEE, ' ||"
            "  '   T1.HG_INTEREST, ' ||"
            "  '   NVL(T1.GH_PROCESS_FLAG, '' ''), ' ||"
            "  '   NVL(T1.GH_SETTLE_FLAG, '' ''), ' ||"
            "  '   T1.TRADE_RIVAL_NO ' ||"
            "  '  FROM SYNC_BANKHGREGISTER T1 ';"          
            "  COMMIT;"
            "END;", m_sTmpTable, m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


