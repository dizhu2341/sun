#include "FeehsSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CFeehsSync::CFeehsSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tfeeshsz");
    strcpy(m_sSrcView, "VO4JC_FEESHSZ");
    strcpy(m_sTmpTable, "sync_feehs");
    strcpy(m_sDstTable, "jc_tfeehs");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CFeehsSync::~CFeehsSync()
{
}

bool CFeehsSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct FeehsRecord
    {
        int fee_id[BATCH_ROWS];
        int company_id[BATCH_ROWS];
        int fund_id[BATCH_ROWS];
        int asset_id[BATCH_ROWS];
        char market_no[BATCH_ROWS][2];
        char busin_class[BATCH_ROWS][2];
        char stock_type[BATCH_ROWS][3];
        char entrust_direction[BATCH_ROWS][3];
        char report_code[BATCH_ROWS][33];
        char target_type[BATCH_ROWS][5];
        char fee_type[BATCH_ROWS][2];
        char fee_fbhb[BATCH_ROWS][2];
        char fee_netfull[BATCH_ROWS][2];
        char stock_fee_type[BATCH_ROWS][2];
    } FeehsRecord;
    FeehsRecord *lpFeehsRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpFeehsRecord =  new FeehsRecord();
    if (NULL == lpFeehsRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【FeehsRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpFeehsRecord, 0, sizeof (FeehsRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
        select fee_id, company_id, fund_id, asset_id, market_no, busin_class, stock_type, 
            entrust_direction, report_code, target_type, fee_type, fee_fbhb, fee_netfull,stock_fee_type
        from VO4JC_FEESHSZ;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpFeehsRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpFeehsRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFeehsRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_feehs(fee_id, company_id, fund_id, asset_id, market_no, busin_class, stock_type, entrust_direction, report_code, target_type, fee_type, fee_fbhb, fee_netfull,stock_fee_type)
             values(:lpFeehsRecord->fee_id,
										:lpFeehsRecord->company_id,
										:lpFeehsRecord->fund_id,
										:lpFeehsRecord->asset_id,
										rtrim(:lpFeehsRecord->market_no),
										rtrim(:lpFeehsRecord->busin_class),
										rtrim(:lpFeehsRecord->stock_type),
										rtrim(:lpFeehsRecord->entrust_direction),
										rtrim(:lpFeehsRecord->report_code),
										rtrim(:lpFeehsRecord->target_type),
										rtrim(:lpFeehsRecord->fee_type),
										rtrim(:lpFeehsRecord->fee_fbhb),
										rtrim(:lpFeehsRecord->fee_netfull),
                                                                                rtrim(:lpFeehsRecord->stock_fee_type));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFeehsRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpFeehsRecord;
    return true;
}

bool CFeehsSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME      VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || V_TABLE_NAME;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME || '(' ||   "
            "        ' FEE_ID,' ||  "
            "        ' COMPANY_ID,' ||  "
            "        ' FUND_ID,' ||  "
            "        ' ASSET_ID,' ||  "
            "        ' MARKET_NO,' ||  "
            "        ' TRADE_PLATFORM_ID,' ||  "
            "        ' STOCK_TYPE,' ||  "
            "        ' ENTRUST_DIRECTION,' ||  "
            "        ' REPORT_CODE,' ||  "
            "        ' OPTION_TYPE,' ||  "
            "        ' FEE_TYPE,' ||  "
            "        ' FEE_FBHB,' ||  "
            "        ' FEE_NETFULL,STOCK_FEE_TYPE)' ||  "
            "        ' SELECT T1.FEE_ID,' ||  "
            "        ' T1.COMPANY_ID,' ||  "
            "        ' T1.FUND_ID,' ||  "
            "        ' T1.ASSET_ID,' ||  "
            "        ' T2.MARKET_NO,' || "
            "        ' T3.TRADE_PLATFORM_ID,' || "
            "        ' T4.STOCK_TYPE,' || "
            "        ' T5.ENTRUST_DIRECTION,' || "
            "        ' NVL(T1.REPORT_CODE, '' ''),' || "
            "        ' TO_NUMBER(NVL(T6.SUB_DIC_NO, ''-1'')) OPTION_TYPE,' || "
            "        ' TO_NUMBER(NVL(T7.SUB_DIC_NO, ''1'')) FEE_TYPE,' || "
            "        ' NVL(T1.FEE_FBHB, '' ''),' || "
            "        ' NVL(T1.FEE_NETFULL, '' ''),' || "
            "        'DECODE(T1.STOCK_FEE_TYPE, ''*'',''!'', T1.STOCK_FEE_TYPE) ' ||"
            "        '  FROM SYNC_FEEHS T1, JC_TCONVERTMARKETNO T2, JC_TCONVERTPLATFORMBZ T3, JC_TCONVERTSTOCKTYPE T4, JC_TCONVERTENTRUSTDIR T5, JC_TCONVERTDIC T6, JC_TCONVERTDIC T7 ' ||"
            "        ' WHERE T1.MARKET_NO=T2.MARKET_NO_SRC' || "
            "        ' AND T1.MARKET_NO=T3.MARKET_NO_SRC' || "
            "        ' AND T1.BUSIN_CLASS=T3.BUSIN_CLASS_SRC' || "
            "        ' AND T1.STOCK_TYPE=T4.STOCK_TYPE_SRC' || "
            "        ' AND T1.ENTRUST_DIRECTION=T5.ENTRUST_DIRECTION_SRC' || "
            "        ' AND T1.TARGET_TYPE=T6.SUB_DIC_SRC' || "
            "        ' AND T6.DIC_NO=610081' || "
            "        ' AND T1.FEE_TYPE=T7.SUB_DIC_SRC' || "
            "        ' AND T7.DIC_NO=10028';"
            ""
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


