#include "FeesethsSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CFeesethsSync::CFeesethsSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tfeeseths");
    strcpy(m_sSrcView, "VO4JC_FEESETHS");
    strcpy(m_sTmpTable, "sync_feeseths");
    strcpy(m_sDstTable, "jc_tfeeseths");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CFeesethsSync::~CFeesethsSync()
{
}

bool CFeesethsSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct FeesethsRecord
    {
        int set_id[BATCH_ROWS];
        double fee_id[BATCH_ROWS];
        char market_no[BATCH_ROWS][2];
        char busin_class[BATCH_ROWS][3];
        char entrust_direction[BATCH_ROWS][3];
        char target_type[BATCH_ROWS][5];
        char fee_type[BATCH_ROWS][2];
        char share_type[BATCH_ROWS][2];
        char net_flag[BATCH_ROWS][2];
        int modify_date[BATCH_ROWS];
        char stock_type[BATCH_ROWS][3];
        char report_code[BATCH_ROWS][33];
    } FeesethsRecord;
    FeesethsRecord *lpFeesethsRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpFeesethsRecord = new FeesethsRecord();
    if (NULL == lpFeesethsRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【FeesethsRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpFeesethsRecord, 0, sizeof (FeesethsRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                    select set_id, fee_id, market_no, busin_class, entrust_direction, target_type, fee_type, share_type, net_flag, modify_date, stock_type, report_code 
                    from VO4JC_FEESETHS;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpFeesethsRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpFeesethsRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFeesethsRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_feeseths(set_id, fee_id, market_no, busin_class, entrust_direction, target_type, fee_type, share_type, net_flag, modify_date, stock_type, report_code)
             values(:lpFeesethsRecord->set_id,
										:lpFeesethsRecord->fee_id,
										rtrim(:lpFeesethsRecord->market_no),
										rtrim(:lpFeesethsRecord->busin_class),
										rtrim(:lpFeesethsRecord->entrust_direction),
										rtrim(:lpFeesethsRecord->target_type),
										rtrim(:lpFeesethsRecord->fee_type),
										rtrim(:lpFeesethsRecord->share_type),
										rtrim(:lpFeesethsRecord->net_flag),
										:lpFeesethsRecord->modify_date,
										rtrim(:lpFeesethsRecord->stock_type),
										rtrim(:lpFeesethsRecord->report_code));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFeesethsRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpFeesethsRecord;
    return true;
}

bool CFeesethsSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_START_INTER_CODE NUMBER := 0;"
            "  V_INIT_TYPE       CHAR(1);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  V_INIT_TYPE      := '%c';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  SELECT MAX(TO_NUMBER(SUBSTR(TO_CHAR(INTER_CODE), 1, 7)))"
            "    INTO V_START_INTER_CODE"
            "    FROM (SELECT INTER_CODE,"
            "                 CASE"
            "                   WHEN MARKET_NO IN (1, 2, 5) AND LENGTH(REPORT_CODE) <= 6 AND"
            "                        REGEXP_LIKE(REPORT_CODE, '^[0-9]+$') THEN"
            "                    1"
            "                   ELSE"
            "                    0"
            "                 END MM"
            "            FROM JC_TCONVERTINTERCODE)"
            "   WHERE MM = 0;"
            "  V_START_INTER_CODE := CASE"
            "                          WHEN V_START_INTER_CODE IS NULL THEN"
            "                           0"
            "                          ELSE"
            "                           V_START_INTER_CODE - 1000000"
            "                        END;"
            ""
            "  IF V_INIT_TYPE <> '1' THEN"
            "    EXECUTE IMMEDIATE 'INSERT INTO JC_TCONVERTINTERCODE(MARKET_NO,REPORT_CODE,INTER_CODE)' ||"
            "                      '  SELECT V.MARKET_NO,' ||"
            "                      '         V.REPORT_CODE,' ||"
            "                      '         SF_CREATE_INTERCODE_WITH_INDEX(V.MARKET_NO,' ||"
            "                      '                                        V.REPORT_CODE,' ||"
            "                      '                                        '||V_START_INTER_CODE||' + V.RN)' ||"
            "                      '    FROM (SELECT T1.*, T2.INTER_CODE,ROW_NUMBER() OVER(ORDER BY CASE WHEN t2.INTER_CODE IS NULL THEN 1 ELSE 2 END) RN' ||"
            "                      '            FROM (SELECT DISTINCT A.MARKET_NO MARKET_NO_SRC,' ||"
            "                      '                                  B.MARKET_NO,' ||"
            "                      '                                  A.REPORT_CODE' ||"
            "                      '                    FROM SYNC_FEESETHS A, JC_TCONVERTMARKETNO B' ||"
            "                      '                   WHERE A.MARKET_NO = B.MARKET_NO_SRC) T1' ||"
            "                      '            LEFT JOIN JC_TCONVERTINTERCODE T2' ||"
            "                      '              ON T1.MARKET_NO = T2.MARKET_NO' ||"
            "                      '             AND T1.REPORT_CODE = T2.REPORT_CODE) V' ||"
            "                      '             WHERE V.INTER_CODE IS NULL';"
            "  END IF;"

            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "       '   FEE_SET_ID ,FEE_ID,MARKET_NO,BUSIN_CLASS,ENTRUST_DIRECTION,STOCK_TYPE,'   ||"
            "       '   INTER_CODE,OPTION_TYPE,FEE_TYPE,SHARE_FLAG,NET_FEE_FLAG,MODIFY_DATE)'   ||"          
            "       '   WITH   V_FEESETHS AS('   ||"
            "       '   SELECT T11.SET_ID, T11.FEE_ID,T11.REPORT_CODE REPORT_CODE,  T12.MARKET_NO, NVL(T11.BUSIN_CLASS,'' '') BUSIN_CLASS, T13.ENTRUST_DIRECTION, T14.STOCK_TYPE,'   ||"
            "       '   TO_NUMBER(NVL(T15.SUB_DIC_NO, ''-1'')) OPTION_TYPE,'   ||"
            "       '   ASCII(NVL(T11.FEE_TYPE,''0'')) - ASCII(''0'') FEE_TYPE, NVL(T11.SHARE_TYPE,'' '') SHARE_TYPE, NVL(T11.NET_FLAG,'' '') NET_FLAG, T11.MODIFY_DATE'   ||"
            "       '   FROM SYNC_FEESETHS T11,JC_TCONVERTMARKETNO T12, JC_TCONVERTENTRUSTDIR T13,JC_TCONVERTSTOCKTYPE T14,JC_TCONVERTDIC T15'   ||"
            "       '   WHERE T11.MARKET_NO = T12.MARKET_NO_SRC'   ||"
            "       '   AND T11.ENTRUST_DIRECTION=T13.ENTRUST_DIRECTION_SRC'   ||"
            "       '   AND T11.STOCK_TYPE=T14.STOCK_TYPE_SRC'   ||"
            "       '   AND T11.TARGET_TYPE=T15.SUB_DIC_SRC'   ||"
            "       '   AND T15.DIC_NO=610081)'   ||" 
            "       '   SELECT T1.SET_ID, T1.FEE_ID, T1.MARKET_NO, T1.BUSIN_CLASS, T1.ENTRUST_DIRECTION, T1.STOCK_TYPE,'   ||"
            "       '   DECODE(T1.REPORT_CODE,''*'',-1,T2.INTER_CODE) INTER_CODE, T1.OPTION_TYPE,T1.FEE_TYPE,T1.SHARE_TYPE,T1.NET_FLAG,T1.MODIFY_DATE '   ||"                
            "       '   FROM  V_FEESETHS T1,  JC_TCONVERTINTERCODE T2 '   ||"
            "       '   WHERE T1.MARKET_NO=T2.MARKET_NO(+) '   ||"  
            "       '   AND T1.REPORT_CODE=T2.REPORT_CODE(+) ';  "  
            "  COMMIT;"
            "END;", m_sDstTable, m_cSyncFlag);

    if (m_cSyncFlag == '2')
    {
        hsLockCreateInterCode();
    }
    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (m_cSyncFlag == '2')
    {
        hsUnlockCreateInterCode();
    }
    
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    
    if (!RecoverTableIndex())
        return false;

    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


