#include "HisRealDealSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CHisRealDealSync::CHisRealDealSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "thisrealdeal");
    strcpy(m_sSrcView, "VO4JC_YESTERDAYREALDEAL");
    strcpy(m_sTmpTable, "sync_hisrealdeal");
    strcpy(m_sDstTable, "uft_thisrealdeal");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CHisRealDealSync::~CHisRealDealSync()
{
}

bool CHisRealDealSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct HisRealDealRecord
    {
        int deal_date[BATCH_ROWS];
        int realdeal_serial_no[BATCH_ROWS];
        char deal_no[BATCH_ROWS][65];
        int company_id[BATCH_ROWS];
        int fund_id[BATCH_ROWS];
        int asset_id[BATCH_ROWS];
        int combi_id[BATCH_ROWS];
        char stockholder_id[BATCH_ROWS][21];
        char market_no[BATCH_ROWS][2];
        char report_code[BATCH_ROWS][33];
        char stock_type[BATCH_ROWS][3];
        char invest_type[BATCH_ROWS][2];
        double deal_amount[BATCH_ROWS];
        double deal_price[BATCH_ROWS];
        double face_value[BATCH_ROWS];
        char entrust_direction[BATCH_ROWS][3];
        int operator_no[BATCH_ROWS];
        char busin_class[BATCH_ROWS][3];
        //int future_kind_id[BATCH_ROWS];
        //int multiple[BATCH_ROWS];
        //double contract_unit[BATCH_ROWS];
    } HisRealDealRecord;
    HisRealDealRecord *lpHisRealDealRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpHisRealDealRecord =  new HisRealDealRecord();
    if (NULL == lpHisRealDealRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【HisRealDealRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpHisRealDealRecord, 0, sizeof (HisRealDealRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
					    select deal_date, realdeal_serial_no, deal_no, company_id, fund_id, asset_id, combi_id, stockholder_id, 
                        market_no, report_code, stock_type, invest_type, deal_amount, deal_price, face_value, entrust_direction, 
                        operator_no, busin_class 
					    from VO4JC_YESTERDAYREALDEAL;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpHisRealDealRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpHisRealDealRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpHisRealDealRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_hisrealdeal(deal_date, realdeal_serial_no, deal_no, company_id, fund_id, asset_id, combi_id, stockholder_id,
             market_no, report_code, stock_type, invest_type, deal_amount, deal_price, face_value, entrust_direction, operator_no, busin_class)
             values(:lpHisRealDealRecord->deal_date,
                    :lpHisRealDealRecord->realdeal_serial_no,
                    rtrim(:lpHisRealDealRecord->deal_no),
                    :lpHisRealDealRecord->company_id,
                    :lpHisRealDealRecord->fund_id,
                    :lpHisRealDealRecord->asset_id,
                    :lpHisRealDealRecord->combi_id,
                    rtrim(:lpHisRealDealRecord->stockholder_id),
                    rtrim(:lpHisRealDealRecord->market_no),
                    rtrim(:lpHisRealDealRecord->report_code),
                    rtrim(:lpHisRealDealRecord->stock_type),
                    rtrim(:lpHisRealDealRecord->invest_type),
                    :lpHisRealDealRecord->deal_amount,
                    :lpHisRealDealRecord->deal_price,
                    :lpHisRealDealRecord->face_value,
                    rtrim(:lpHisRealDealRecord->entrust_direction),
                    :lpHisRealDealRecord->operator_no,
                    rtrim(:lpHisRealDealRecord->busin_class));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpHisRealDealRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpHisRealDealRecord;
    return true;
}

bool CHisRealDealSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
"  V_TABLE_NAME_TMP VARCHAR2(64);"
"  V_TABLE_NAME_O4  VARCHAR2(64);"
"  V_PREV_DATE      NUMBER(10);"
"BEGIN"
"  V_TABLE_NAME_TMP := '%s';"
"  V_TABLE_NAME_O4  := '%s';"
""
"  SELECT SYS_DATE"
"    INTO V_PREV_DATE"
"    FROM (SELECT T.SYS_DATE"
"            FROM JC_TTRADEDATE T"
"           WHERE T.TRADEDAY_TYPE_ID = 0"
"             AND T.SYS_DATE < SF_INIT_DATE()"
"             AND T.TRADEDAY_FLAG = 1"
"           ORDER BY T.SYS_DATE DESC)"
"   WHERE ROWNUM = 1;"
""
"  EXECUTE IMMEDIATE 'DELETE FROM ' || V_TABLE_NAME_O4 ||"
"                    ' WHERE DEAL_DATE = ' || V_PREV_DATE;"
"  EXECUTE IMMEDIATE 'INSERT INTO UFT_THISREALDEAL ' ||"
"                    '  (DEAL_DATE,REALDEAL_SERIAL_NO,DEAL_NO,COMPANY_ID,FUND_ID,ASSET_ID,COMBI_ID,STOCKHOLDER_ID,MARKET_NO, ' ||"
"                    '   REPORT_CODE,INTER_CODE,STOCK_TYPE,INVEST_TYPE,DEAL_AMOUNT,DEAL_PRICE,FACE_VALUE,ENTRUST_DIRECTION, ' ||"
"                    '   OPERATOR_NO,BUSIN_CLASSES,FUTURE_KIND_ID,MULTIPLE,CONTRACT_UNIT) ' ||"
"                    '  SELECT A.DEAL_DATE,A.REALDEAL_SERIAL_NO,NVL(A.DEAL_NO, '' ''),A.COMPANY_ID,A.FUND_ID,A.ASSET_ID,A.COMBI_ID, ' ||"
"                    '         NVL(A.STOCKHOLDER_ID, '' ''),B.MARKET_NO,NVL(A.REPORT_CODE, '' ''),B.INTER_CODE,D.STOCK_TYPE,NVL(A.INVEST_TYPE, '' ''),A.DEAL_AMOUNT, ' ||"
"                    '         A.DEAL_PRICE,A.FACE_VALUE,E.ENTRUST_DIRECTION,A.OPERATOR_NO,NVL(A.BUSIN_CLASS, '' ''),-1,1,1 ' ||"
"                    '    FROM SYNC_HISREALDEAL      A, ' ||"
"                    '         JC_TCONVERTINTERCODE  B, ' ||"
"                    '         JC_TCONVERTMARKETNO   C, ' ||"
"                    '         JC_TCONVERTSTOCKTYPE  D, ' ||"
"                    '         JC_TCONVERTENTRUSTDIR E ' ||"
"                    '   WHERE A.MARKET_NO = C.MARKET_NO_SRC ' ||"
"                    '     AND C.MARKET_NO = B.MARKET_NO ' ||"
"                    '     AND A.REPORT_CODE = B.REPORT_CODE ' ||"
"                    '     AND A.ENTRUST_DIRECTION = E.ENTRUST_DIRECTION_SRC ' ||"
"                    '     AND A.STOCK_TYPE = D.STOCK_TYPE_SRC ' ||"
"                    '     AND D.STOCK_TYPE NOT IN (23, 28, 50, 60, 61)' ||"
"                    '     AND A.DEAL_DATE = '|| V_PREV_DATE;"
"  EXECUTE IMMEDIATE 'INSERT INTO UFT_THISREALDEAL ' ||"
"                    '  (DEAL_DATE,REALDEAL_SERIAL_NO,DEAL_NO,COMPANY_ID,FUND_ID,ASSET_ID,COMBI_ID,STOCKHOLDER_ID,MARKET_NO, ' ||"
"                    '   REPORT_CODE,INTER_CODE,STOCK_TYPE,INVEST_TYPE,DEAL_AMOUNT,DEAL_PRICE,FACE_VALUE,ENTRUST_DIRECTION, ' ||"
"                    '   OPERATOR_NO,BUSIN_CLASSES,FUTURE_KIND_ID,MULTIPLE,CONTRACT_UNIT) ' ||"
"                    '  SELECT A.DEAL_DATE,A.REALDEAL_SERIAL_NO,NVL(A.DEAL_NO, '' ''),A.COMPANY_ID,A.FUND_ID,A.ASSET_ID,A.COMBI_ID, ' ||"
"                    '         NVL(A.STOCKHOLDER_ID, '' ''),B.MARKET_NO,NVL(A.REPORT_CODE, '' ''),B.INTER_CODE,D.STOCK_TYPE,NVL(A.INVEST_TYPE, '' ''),A.DEAL_AMOUNT, ' ||"
"                    '         A.DEAL_PRICE,A.FACE_VALUE,E.ENTRUST_DIRECTION,A.OPERATOR_NO,NVL(A.BUSIN_CLASS, '' ''),NVL(F.FUTURE_KIND_ID,-1),NVL(F.MULTIPLE,1),1 ' ||"
"                    '    FROM SYNC_HISREALDEAL      A, ' ||"
"                    '         JC_TCONVERTINTERCODE  B, ' ||"
"                    '         JC_TFUTURESINFO       F, ' ||"
"                    '         JC_TCONVERTMARKETNO   C, ' ||"
"                    '         JC_TCONVERTSTOCKTYPE  D, ' ||"
"                    '         JC_TCONVERTENTRUSTDIR E ' ||"
"                    '   WHERE A.MARKET_NO = C.MARKET_NO_SRC ' ||"
"                    '     AND C.MARKET_NO = B.MARKET_NO ' ||"
"                    '     AND A.REPORT_CODE = B.REPORT_CODE ' ||"
"                    '     AND F.INTER_CODE(+) = B.INTER_CODE ' ||"
"                    '     AND A.ENTRUST_DIRECTION = E.ENTRUST_DIRECTION_SRC ' ||"
"                    '     AND A.STOCK_TYPE = D.STOCK_TYPE_SRC ' ||"
"                    '     AND D.STOCK_TYPE IN (23, 28, 50)' ||"
"                    '     AND A.DEAL_DATE = '|| V_PREV_DATE;"
"  EXECUTE IMMEDIATE 'INSERT INTO UFT_THISREALDEAL ' ||"
"                    '  (DEAL_DATE,REALDEAL_SERIAL_NO,DEAL_NO,COMPANY_ID,FUND_ID,ASSET_ID,COMBI_ID,STOCKHOLDER_ID,MARKET_NO, ' ||"
"                    '   REPORT_CODE,INTER_CODE,STOCK_TYPE,INVEST_TYPE,DEAL_AMOUNT,DEAL_PRICE,FACE_VALUE,ENTRUST_DIRECTION, ' ||"
"                    '   OPERATOR_NO,BUSIN_CLASSES,FUTURE_KIND_ID,MULTIPLE,CONTRACT_UNIT) ' ||"
"                    '  SELECT A.DEAL_DATE,A.REALDEAL_SERIAL_NO,NVL(A.DEAL_NO, '' ''),A.COMPANY_ID,A.FUND_ID,A.ASSET_ID,A.COMBI_ID, ' ||"
"                    '         NVL(A.STOCKHOLDER_ID, '' ''),B.MARKET_NO,NVL(A.REPORT_CODE, '' ''),B.INTER_CODE,D.STOCK_TYPE,NVL(A.INVEST_TYPE, '' ''),A.DEAL_AMOUNT, ' ||"
"                    '         A.DEAL_PRICE,A.FACE_VALUE,E.ENTRUST_DIRECTION,A.OPERATOR_NO,NVL(A.BUSIN_CLASS, '' ''),-1,1,NVL(F.CONTRACT_UNIT,1) ' ||"
"                    '    FROM SYNC_HISREALDEAL      A, ' ||"
"                    '         JC_TCONVERTINTERCODE  B, ' ||"
"                    '         JC_TOPTIONPROPERTY    F, ' ||"
"                    '         JC_TCONVERTMARKETNO   C, ' ||"
"                    '         JC_TCONVERTSTOCKTYPE  D, ' ||"
"                    '         JC_TCONVERTENTRUSTDIR E ' ||"
"                    '   WHERE A.MARKET_NO = C.MARKET_NO_SRC ' ||"
"                    '     AND C.MARKET_NO = B.MARKET_NO ' ||"
"                    '     AND A.REPORT_CODE = B.REPORT_CODE ' ||"
"                    '     AND F.INTER_CODE(+) = B.INTER_CODE ' ||"
"                    '     AND A.ENTRUST_DIRECTION = E.ENTRUST_DIRECTION_SRC ' ||"
"                    '     AND A.STOCK_TYPE = D.STOCK_TYPE_SRC ' ||"
"                    '     AND D.STOCK_TYPE IN (60, 61)' ||"
"                    '     AND A.DEAL_DATE = '|| V_PREV_DATE;"
"  EXECUTE IMMEDIATE 'DELETE FROM ' || V_TABLE_NAME_O4 ||' WHERE DEAL_DATE < (SELECT MIN(SYS_DATE) FROM (SELECT SYS_DATE FROM (SELECT T.SYS_DATE FROM JC_TTRADEDATE T WHERE T.TRADEDAY_TYPE_ID = 0 AND T.TRADEDAY_FLAG = 1 AND T.SYS_DATE < SF_INIT_DATE() ORDER BY T.SYS_DATE DESC) WHERE ROWNUM <= 5))';"
"  COMMIT;"
"END;", m_sTmpTable, m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}



