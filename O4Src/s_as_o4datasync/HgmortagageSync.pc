#include "HgmortagageSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CHgmortagageSync::CHgmortagageSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "thgmortagage");
    strcpy(m_sSrcView, "VO4JC_BANKMORTGAGE");
    strcpy(m_sTmpTable, "sync_hgmortagage");
    strcpy(m_sDstTable, "uft_thgmortagage");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CHgmortagageSync::~CHgmortagageSync()
{
}

bool CHgmortagageSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct HgmortagageRecord
    {
        int business_date[BATCH_ROWS];
        int pendsettle_serial_no[BATCH_ROWS];
        char deal_no[BATCH_ROWS][65];
        int company_id[BATCH_ROWS];
        int fund_id[BATCH_ROWS];
        int asset_id[BATCH_ROWS];
        int combi_id[BATCH_ROWS];
        int market_no[BATCH_ROWS];
        char report_code[BATCH_ROWS][33];
        char invest_type[BATCH_ROWS][2];
        double impawn_rate[BATCH_ROWS];
        double mortgage_amount[BATCH_ROWS];     
        int expire_settle_date[BATCH_ROWS];
    } HgmortagageRecord;
    HgmortagageRecord *lpHgmortagageRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpHgmortagageRecord =  new HgmortagageRecord();
    if (NULL == lpHgmortagageRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【HgmortagageRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpHgmortagageRecord, 0, sizeof (HgmortagageRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
        select 
            business_date, 
            pendsettle_serial_no, 
            deal_no,
            company_id,
            fund_id, 
            asset_id, 
            combi_id,
            market_no, 
            report_code, 
            invest_type, 
            impawn_rate, 
            mortgage_amount,
            expire_settle_date
        from VO4JC_BANKMORTGAGE;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpHgmortagageRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpHgmortagageRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpHgmortagageRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;
        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_hgmortagage(business_date, 
                                        pendsettle_serial_no, 
                                        deal_no,
                                        company_id,
                                        fund_id, 
                                        asset_id, 
                                        combi_id, 
                                        market_no, 
                                        report_code, 
                                        invest_type,
                                        impawn_rate, 
                                        mortgage_amount, expire_settle_date)
             values(:lpHgmortagageRecord->business_date,
                    :lpHgmortagageRecord->pendsettle_serial_no,
                    rtrim(:lpHgmortagageRecord->deal_no),
                    :lpHgmortagageRecord->company_id,
                    :lpHgmortagageRecord->fund_id,
                    :lpHgmortagageRecord->asset_id,
                    :lpHgmortagageRecord->combi_id,
                    :lpHgmortagageRecord->market_no,
                    rtrim(:lpHgmortagageRecord->report_code),
                    rtrim(:lpHgmortagageRecord->invest_type),
                    :lpHgmortagageRecord->impawn_rate,
                    :lpHgmortagageRecord->mortgage_amount,
                    :lpHgmortagageRecord->expire_settle_date);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpHgmortagageRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpHgmortagageRecord;
    return true;
}

bool CHgmortagageSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "  '  BUSINESS_DATE,PENDSETTLE_SERIAL_NO,DEAL_NO,COMPANY_ID,FUND_ID,ASSET_ID,COMBI_ID,MARKET_NO, '  ||"
            "  '  REPORT_CODE,INVEST_TYPE,IMPAWN_RATE,MORTGAGE_AMOUNT, expire_settle_date) '  ||"
            "  ' SELECT ' ||"
            "  '   T1.BUSINESS_DATE, ' ||"
            "  '   T1.PENDSETTLE_SERIAL_NO, ' ||"
            "  '   T1.DEAL_NO,' ||"
            "  '   T1.COMPANY_ID,' ||"
            "  '   T1.FUND_ID, ' ||"
            "  '   T1.ASSET_ID, ' ||"
            "  '   T1.COMBI_ID, ' ||"
            "  '   T1.MARKET_NO, ' ||"
            "  '   NVL(T1.REPORT_CODE, '' ''), ' ||"
            "  '   NVL(T1.INVEST_TYPE, '' ''), ' ||"
            "  '   T1.IMPAWN_RATE, ' ||"
            "  '   T1.MORTGAGE_AMOUNT, T1.expire_settle_date ' ||"          
            "  '  FROM SYNC_HGMORTAGAGE T1 ' ;"
            "  COMMIT;"
            "END;", m_sTmpTable, m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


