#include "BrokerSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CBrokerSync::CBrokerSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tbroker");
    strcpy(m_sSrcView, "VO4JC_BROKER");
    strcpy(m_sTmpTable, "sync_broker");
    strcpy(m_sDstTable, "jc_tbroker");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CBrokerSync::~CBrokerSync()
{
}

bool CBrokerSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct BrokerRecord
    {
        char broker_no[BATCH_ROWS][33];
        char broker_parent_no[BATCH_ROWS][33];
        char broker_name[BATCH_ROWS][129];
        char broker_type[BATCH_ROWS][2];
        char profit_available[BATCH_ROWS][2];
        char accountcheck_type[BATCH_ROWS][2];
        char trade_member_zj[BATCH_ROWS][13];
        char trade_member_sq[BATCH_ROWS][13];
        char trade_member_zz[BATCH_ROWS][13];
        char trade_member_dl[BATCH_ROWS][13];
        char trade_member_ny[BATCH_ROWS][128];
        int sh_reserve_scale[BATCH_ROWS];
        int sz_reserve_scale[BATCH_ROWS];
        char special_quota_mode[BATCH_ROWS][2];
        char contract_extent_flag[BATCH_ROWS][2];
    } BrokerRecord;
    BrokerRecord *lpBrokerRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpBrokerRecord = new BrokerRecord();
    if (NULL == lpBrokerRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【BrokerRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpBrokerRecord, 0, sizeof (BrokerRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
        select broker_no, broker_parent_no, broker_name, broker_type, 
                profit_available, accountcheck_type, trade_member_zj, 
                trade_member_sq, trade_member_zz, trade_member_dl, trade_member_ny, sh_reserve_scale, sz_reserve_scale,special_quota_mode, contract_extent_flag
        from VO4JC_BROKER;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpBrokerRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpBrokerRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpBrokerRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_broker(broker_no, broker_parent_no, broker_name, broker_type, profit_available, accountcheck_type, trade_member_zj, trade_member_sq, trade_member_zz, trade_member_dl, trade_member_ny, sh_reserve_scale, sz_reserve_scale, special_quota_mode, contract_extent_flag)
             values(rtrim(:lpBrokerRecord->broker_no),
										rtrim(:lpBrokerRecord->broker_parent_no),
										rtrim(:lpBrokerRecord->broker_name),
										rtrim(:lpBrokerRecord->broker_type),
										rtrim(:lpBrokerRecord->profit_available),
										rtrim(:lpBrokerRecord->accountcheck_type),
										rtrim(:lpBrokerRecord->trade_member_zj),
										rtrim(:lpBrokerRecord->trade_member_sq),
										rtrim(:lpBrokerRecord->trade_member_zz),
										rtrim(:lpBrokerRecord->trade_member_dl),
                                        rtrim(:lpBrokerRecord->trade_member_ny),
                                        :lpBrokerRecord->sz_reserve_scale,
                                        :lpBrokerRecord->sz_reserve_scale,
                                        rtrim(:lpBrokerRecord->special_quota_mode),
                                        rtrim(:lpBrokerRecord->contract_extent_flag));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpBrokerRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpBrokerRecord;
    return true;
}

bool CBrokerSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;
    if (!DropTableIndex())
        return false;
    
    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE ' INSERT INTO JC_TCONVERTBROKER	'	||"
            "	'   (BROKER_ID, BROKER_NO) SELECT  JC_SEQBROKERID.NEXTVAL BROKER_ID,T1.BROKER_NO    '	||"
            "	'   FROM SYNC_BROKER T1,JC_TCONVERTBROKER T2  WHERE T1.BROKER_NO = T2.BROKER_NO(+) AND T2.BROKER_ID IS NULL ';	"

            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "	'   BROKER_ID,BROKER_PARENT_ID,BROKER_NO,BROKER_NAME,BROKER_TYPE,PROFIT_AVAILABLE,ACCOUNTCHECK_TYPE,    '   ||"
            "	'   TRADE_MEMBER_ZJ,TRADE_MEMBER_SQ,TRADE_MEMBER_ZZ,TRADE_MEMBER_DL, trade_member_ny, sh_reserve_scale, sz_reserve_scale, special_quota_mode, contract_extent_flag)	'	||"
            "	'   SELECT  T2.BROKER_ID,T3.BROKER_ID,    '   ||"
            "	'   T1.BROKER_NO,NVL(T1.BROKER_NAME,'' ''),NVL(T1.BROKER_TYPE,'' ''),NVL(T1.PROFIT_AVAILABLE,'' ''),NVL(T1.ACCOUNTCHECK_TYPE,'' ''),    '   ||"
            "	'   NVL(T1.TRADE_MEMBER_ZJ,'' ''),NVL(T1.TRADE_MEMBER_SQ,'' ''),NVL(T1.TRADE_MEMBER_ZZ,'' ''),NVL(T1.TRADE_MEMBER_DL,'' ''), T1.trade_member_ny, T1.sh_reserve_scale, T1.sz_reserve_scale,	'   ||"
            "   '   NVL(T1.special_quota_mode, ''1''), NVL(T1.contract_extent_flag, ''0'')' ||"
            "	'   FROM SYNC_BROKER T1,JC_TCONVERTBROKER T2,JC_TCONVERTBROKER T3 '     ||"
            "	'   WHERE T1.BROKER_NO = T2.BROKER_NO AND T1.BROKER_PARENT_NO = T3.BROKER_NO  ';   "
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


