#include "UnitstockSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CUnitstockSync::CUnitstockSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tunitstock");
    strcpy(m_sSrcView, "VO4JC_UNITSTOCK");
    strcpy(m_sTmpTable, "sync_unitstock");
    strcpy(m_sDstTable, "uft_tunitstock");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CUnitstockSync::~CUnitstockSync()
{
}

bool CUnitstockSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct UnitstockRecord
    {
        int business_date[BATCH_ROWS];
        int fund_id[BATCH_ROWS];
        int asset_id[BATCH_ROWS];
        int combi_id[BATCH_ROWS];
        char invest_type[BATCH_ROWS][2];
        char stockholder_id[BATCH_ROWS][21];
        char bind_seat[BATCH_ROWS][21];
        char position_type[BATCH_ROWS][2];
        char market_no[BATCH_ROWS][2];
        char report_code[BATCH_ROWS][33];
        double begin_amount[BATCH_ROWS];
        double pretrade_amount[BATCH_ROWS];
        double begin_cost[BATCH_ROWS];
        double begin_transfered_cost[BATCH_ROWS];
        double begin_interest_cost[BATCH_ROWS];
        double begin_transfered_interest_cost[BATCH_ROWS];
        double begincovered_amount[BATCH_ROWS];
        double begin_turn_profit[BATCH_ROWS];
        double begin_accumulate_profit[BATCH_ROWS];
        double begin_turn_interest_gain[BATCH_ROWS];
        double begin_interest_gain[BATCH_ROWS];
        double current_impawn_amount[BATCH_ROWS];
        double broker_cost[BATCH_ROWS];
    } UnitstockRecord;
    UnitstockRecord *lpUnitstockRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpUnitstockRecord =  new UnitstockRecord();
    if (NULL == lpUnitstockRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【UnitstockRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpUnitstockRecord, 0, sizeof (UnitstockRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
        select business_date, fund_id, asset_id, combi_id, invest_type, stockholder_id, bind_seat, 
        position_type, market_no, report_code, begin_amount, pretrade_amount, begin_cost, 
        begin_transfered_cost, begin_interest_cost, begin_transfered_interest_cost, begincovered_amount, 
        begin_turn_profit, begin_accumulate_profit, begin_turn_interest_gain, begin_interest_gain, 
        current_impawn_amount, broker_cost
        from VO4JC_UNITSTOCK;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpUnitstockRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpUnitstockRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpUnitstockRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_unitstock(business_date, fund_id, asset_id, combi_id, invest_type, stockholder_id, bind_seat, position_type, market_no, report_code, begin_amount, pretrade_amount, begin_cost, begin_transfered_cost, begin_interest_cost, begin_transfered_interest_cost, begincovered_amount, begin_turn_profit, begin_accumulate_profit, begin_turn_interest_gain, begin_interest_gain, current_impawn_amount, broker_cost)
             values(:lpUnitstockRecord->business_date,
										:lpUnitstockRecord->fund_id,
										:lpUnitstockRecord->asset_id,
										:lpUnitstockRecord->combi_id,
										rtrim(:lpUnitstockRecord->invest_type),
										rtrim(:lpUnitstockRecord->stockholder_id),
										rtrim(:lpUnitstockRecord->bind_seat),
										rtrim(:lpUnitstockRecord->position_type),
										rtrim(:lpUnitstockRecord->market_no),
										rtrim(:lpUnitstockRecord->report_code),
										:lpUnitstockRecord->begin_amount,
										:lpUnitstockRecord->pretrade_amount,
										:lpUnitstockRecord->begin_cost,
										:lpUnitstockRecord->begin_transfered_cost,
										:lpUnitstockRecord->begin_interest_cost,
										:lpUnitstockRecord->begin_transfered_interest_cost,
										:lpUnitstockRecord->begincovered_amount,
										:lpUnitstockRecord->begin_turn_profit,
										:lpUnitstockRecord->begin_accumulate_profit,
										:lpUnitstockRecord->begin_turn_interest_gain,
										:lpUnitstockRecord->begin_interest_gain,
										:lpUnitstockRecord->current_impawn_amount,
                                        :lpUnitstockRecord->broker_cost);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpUnitstockRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpUnitstockRecord;
    return true;
}

bool CUnitstockSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '||V_TABLE_NAME_O4||' (' ||"
            "                    ' BUSINESS_DATE,' ||  "
            "                    ' FUND_ID,' ||  "
            "                    ' ASSET_ID,' ||  "
            "                    ' COMBI_ID,' ||  "
            "                    ' INVEST_TYPE,' ||  "
            "                    ' STOCKHOLDER_ID,' ||  "
            "                    ' BIND_SEAT,' ||  "
            "                    ' POSITION_TYPE,' ||  "
            "                    ' MARKET_NO,' ||  "
            "                    ' REPORT_CODE,' ||  "
            "                    ' INTER_CODE,' ||  "
            "                    ' BEGIN_AMOUNT,' ||  "
            "                    ' PRETRADE_AMOUNT,' ||  "
            "                    ' BEGIN_COST,' ||  "
            "                    ' BEGIN_TRANSFERED_COST,' ||  "
            "                    ' BEGIN_INTEREST_COST,' ||  "
            "                    ' BEGIN_TRANSFERED_INTEREST_COST,' ||  "
            "                    ' BEGINCOVERED_AMOUNT,' ||  "
            "                    ' BEGIN_TURN_PROFIT,' ||  "
            "                    ' BEGIN_ACCUMULATE_PROFIT,' ||  "
            "                    ' BEGIN_TURN_INTEREST_GAIN,' ||  "
            "                    ' BEGIN_INTEREST_GAIN,' ||  "
            "                    ' CURRENT_IMPAWN_AMOUNT,' ||  "
            "                    ' BROKER_COST)' || "
            "                    'WITH V_INTER_CODE AS ' ||"
            "                    '(SELECT DISTINCT ' ||"
            "                    '       B.MARKET_NO MARKET_NO, ' ||"
            "                    '       A.MARKET_NO MARKET_NO_SRC, ' ||"
            "                    '       A.REPORT_CODE REPORT_CODE, ' ||"
            "                    '       C.INTER_CODE ' ||"
            "                    '  FROM '||V_TABLE_NAME_TMP||' A, JC_TCONVERTMARKETNO B, JC_TCONVERTINTERCODE C ' ||"
            "                    ' WHERE A.MARKET_NO = B.MARKET_NO_SRC ' ||"
            "                    ' AND B.MARKET_NO=C.MARKET_NO ' ||"
            "                    ' AND A.REPORT_CODE=C.REPORT_CODE) ' ||"
            "                    ' SELECT ' ||"
            "                    ' T1.BUSINESS_DATE,' ||"
            "                    ' T1.FUND_ID,' ||"
            "                    ' T1.ASSET_ID,' ||"
            "                    ' T1.COMBI_ID,' ||"
            "                    ' NVL(T1.INVEST_TYPE, '' ''),' ||"
            "                    ' CASE WHEN T1.STOCKHOLDER_ID=''-1'' THEN ''*'' ELSE NVL(T1.STOCKHOLDER_ID, ''*'') END AS STOCKHOLDER_ID,' ||"
            "                    ' NVL(T1.BIND_SEAT, '' ''),' ||"
            "                    ' NVL(T1.POSITION_TYPE, '' ''),' ||"
            "                    ' T2.MARKET_NO,' ||"
            "                    ' NVL(T1.REPORT_CODE, '' ''),' ||"
            "                    ' T2.INTER_CODE,' ||"
            "                    ' T1.BEGIN_AMOUNT,' ||"
            "                    ' T1.PRETRADE_AMOUNT,' ||"
            "                    ' T1.BEGIN_COST,' ||"
            "                    ' T1.BEGIN_TRANSFERED_COST,' ||"
            "                    ' T1.BEGIN_INTEREST_COST,' ||"
            "                    ' T1.BEGIN_TRANSFERED_INTEREST_COST,' ||"
            "                    ' T1.BEGINCOVERED_AMOUNT,' ||"
            "                    ' T1.BEGIN_TURN_PROFIT,' ||"
            "                    ' T1.BEGIN_ACCUMULATE_PROFIT,' ||"
            "                    ' T1.BEGIN_TURN_INTEREST_GAIN,' ||"
            "                    ' T1.BEGIN_INTEREST_GAIN,' ||"
            "                    ' T1.CURRENT_IMPAWN_AMOUNT,' ||"
            "                    ' T1.BROKER_COST' ||"
            "                    ' FROM '||V_TABLE_NAME_TMP||' T1,V_INTER_CODE T2 ' ||"
            "                    ' WHERE T1.MARKET_NO=T2.MARKET_NO_SRC' ||"
            "                    ' AND T1.REPORT_CODE=T2.REPORT_CODE' ||"
            "                    ' AND T2.INTER_CODE IS NOT NULL'; "
            ""
            "  COMMIT;"
            "END;", m_sTmpTable, m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


