#include "StockholderSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CStockholderSync::CStockholderSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tstockholder");
    strcpy(m_sSrcView, "VO4JC_STOCKHOLDER");
    strcpy(m_sTmpTable, "sync_stockholder");
    strcpy(m_sDstTable, "jc_tstockholder");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CStockholderSync::~CStockholderSync()
{
}

bool CStockholderSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct StockholderRecord
    {
        char market_no[BATCH_ROWS][2];
        char stockholder_id[BATCH_ROWS][21];
        char stockholder_name[BATCH_ROWS][129];
        char bind_status[BATCH_ROWS][2];
        char bind_seat[BATCH_ROWS][21];
        char apply_quality[BATCH_ROWS][33];
        char invest_type[BATCH_ROWS][2];
        char multi_apply_flag[BATCH_ROWS][2];
        char owner_type[BATCH_ROWS][21];
        char permit_stock_types[BATCH_ROWS][1025];
        char credit_flag[BATCH_ROWS][2];
        char equ_stockholder[BATCH_ROWS][21];
        char fund_id_list[BATCH_ROWS][4001];
        int default_combi[BATCH_ROWS];
        int option_default_combi[BATCH_ROWS];
        char old_bind_seat[BATCH_ROWS][21];
    } StockholderRecord;
    StockholderRecord *lpStockholderRecord = NULL;
    char (*pStockTypeArr)[1025];
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpStockholderRecord =  new StockholderRecord();
    if (NULL == lpStockholderRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【StockholderRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpStockholderRecord, 0, sizeof (StockholderRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
            select market_no, stockholder_id, stockholder_name, bind_status, bind_seat, 
                apply_quality, invest_type, multi_apply_flag, owner_type, permit_stock_types, 
                credit_flag, equ_stockholder, fund_id_list, default_combi, option_default_combi,old_bind_seat 
            from VO4JC_STOCKHOLDER;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpStockholderRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    pStockTypeArr = new char[BATCH_ROWS][1025];
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpStockholderRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpStockholderRecord;
            delete pStockTypeArr;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        //转换证券类别列表
        ConvertStockTypeList(pStockTypeArr, lpStockholderRecord->permit_stock_types);

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_stockholder(market_no, stockholder_id, stockholder_name, bind_status, bind_seat, apply_quality, invest_type, multi_apply_flag, owner_type, permit_stock_types, credit_flag, equ_stockholder, fund_id_list, default_combi, option_default_combi,old_bind_seat)
             values(rtrim(:lpStockholderRecord->market_no),
										rtrim(:lpStockholderRecord->stockholder_id),
										rtrim(:lpStockholderRecord->stockholder_name),
										rtrim(:lpStockholderRecord->bind_status),
										rtrim(:lpStockholderRecord->bind_seat),
										rtrim(:lpStockholderRecord->apply_quality),
										rtrim(:lpStockholderRecord->invest_type),
										rtrim(:lpStockholderRecord->multi_apply_flag),
										rtrim(:lpStockholderRecord->owner_type),
										rtrim(:pStockTypeArr),
										rtrim(:lpStockholderRecord->credit_flag),
										rtrim(:lpStockholderRecord->equ_stockholder),
										rtrim(:lpStockholderRecord->fund_id_list),
										:lpStockholderRecord->default_combi,
										:lpStockholderRecord->option_default_combi,
                                        rtrim(:lpStockholderRecord->old_bind_seat));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpStockholderRecord;
            delete pStockTypeArr;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpStockholderRecord;
    delete pStockTypeArr;
    return true;
}

bool CStockholderSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME      VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || V_TABLE_NAME;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME || '(' ||   "
            "        ' MARKET_NO,' ||  "
            "        ' STOCKHOLDER_ID,' ||  "
            "        ' STOCKHOLDER_NAME,' ||  "
            "        ' BIND_STATUS,' ||  "
            "        ' BIND_SEAT,' ||  "
            "        ' APPLY_QUALITY,' ||  "
            "        ' INVEST_TYPE,' ||  "
            "        ' MULTI_APPLY_FLAG,' ||  "
            "        ' STOCKHOLDER_TYPE,' ||  "
            "        ' PERMIT_STOCK_TYPES,' ||  "
            "        ' CREDIT_FLAG,' ||  "
            "        ' EQU_STOCKHOLDER,' ||  "
            "        ' FUND_ID_LIST,' ||  "
            "        ' DEFAULT_COMBI,' ||  "
            "        ' OPTION_DEFAULT_COMBI,OLD_BIND_SEAT)' ||  "
            "        ' SELECT T2.MARKET_NO,' ||  "
            "        ' CASE WHEN T1.STOCKHOLDER_ID=''-1'' THEN ''*'' ELSE NVL(T1.STOCKHOLDER_ID, ''*'') END AS STOCKHOLDER_ID,' ||  "
            "        ' NVL(T1.STOCKHOLDER_NAME, '' ''),' ||  "
            "        ' NVL(T3.SUB_DIC_NO, '' '') BIND_STATUS,' ||  "
            "        ' NVL(T1.BIND_SEAT, '' ''),' ||  "
            "        ' NVL(T1.APPLY_QUALITY, '' ''),' ||  "
            "        ' CASE WHEN T2.MARKET_NO IN (3, 4, 7, 9, 34) THEN ' || "
            "        '      CASE WHEN T1.INVEST_TYPE IS NULL THEN ''a''  ' || "
            "        '          WHEN T1.INVEST_TYPE IN ('' '', ''0'') THEN ''a''  ' || "
            "        '          ELSE T1.INVEST_TYPE END  ' ||  "
            "        ' ELSE' || "
            "        '       CASE WHEN T1.INVEST_TYPE IS NULL THEN ''1''  ' || "
            "        '          WHEN T1.INVEST_TYPE IN ('' '', ''0'') THEN ''1''  ' || "
            "        '          ELSE T1.INVEST_TYPE END   ' || "
            "        ' END INVEST_TYPE, ' || "
            "        ' NVL(T1.MULTI_APPLY_FLAG, '' ''),' ||  "
            "        ' TO_NUMBER(NVL(T1.OWNER_TYPE, 0)),' ||  "
            "        ' NVL(T1.PERMIT_STOCK_TYPES, '' ''),' ||  "
            "        ' NVL(T1.CREDIT_FLAG, '' ''),' ||  "
            "        ' NVL(T1.EQU_STOCKHOLDER, '' ''),' ||  "
            "        ' NVL(T1.FUND_ID_LIST, '' ''),' ||  "
            "        ' T1.DEFAULT_COMBI,' ||  "
            "        ' T1.OPTION_DEFAULT_COMBI, NVL(T1.OLD_BIND_SEAT, '' '')' || "
            "        '  FROM sync_stockholder T1, jc_tconvertmarketno T2, jc_tconvertdic T3 ' ||  "
            "        ' WHERE T1.MARKET_NO = T2.MARKET_NO_SRC' ||  "
            "        ' AND T1.BIND_STATUS = T3.SUB_DIC_SRC' ||  "
            "        ' AND T3.DIC_NO = 10030'; "
            ""
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}

void CStockholderSync::ConvertStockTypeList(char (*pStockTypeArr)[1025], char sStockTypeSrc[BATCH_ROWS][1025])
{
    int nRet = 0;
    int nErrNo = 0;
    char sErrInfo[1025] = {0};
    char sErrPathInfo[4001] = {0};
    char sWhereStr[2048] = {0};
    char sStockTypeList[4000] = {0};

    IF2PackSvr * lpPackService = m_lpContext->GetF2PackSvr();
    IF2Packer * lpInPacker = lpPackService->GetPacker(2);
    IF2Packer * lpOutPacker = lpPackService->GetPacker(2);
    IF2UnPacker * lpOutUnPacker = NULL;

    for (int i = 0; i < BATCH_ROWS; ++i)
    {
        //查询内存表
        replace(sWhereStr, sStockTypeSrc[i], ",", "','");
        hs_snprintf(sWhereStr, sizeof (sWhereStr), "stock_type_src in ('%s')", sWhereStr);

        lpInPacker->BeginPack();
        lpInPacker->AddField("table_name", 'S');
        lpInPacker->AddField("column_str", 'S');
        lpInPacker->AddField("where_str", 'S', 2048);
        lpInPacker->AddField("error_pathinfo", 'S', 4000);
        lpInPacker->AddStr("jc_tconvertstocktype");
        lpInPacker->AddStr("stock_type");
        lpInPacker->AddStr(sWhereStr);
        lpInPacker->AddStr(" ");
        lpInPacker->EndPack();

        lpOutPacker->BeginPack();
        nRet = GetMdbData(m_lpContext, lpInPacker->UnPack(), lpOutPacker, &nErrNo, sErrInfo, sErrPathInfo);
        lpOutPacker->EndPack();
        if (nRet != 0)
        {
            SetErrorInfo(SYNC_ERR_OTHER, "【%s】表同步，转换证券类别列表时读取内存表失败【%s】", m_sDstTable, sErrInfo);

            if (lpInPacker)
            {
                free(lpInPacker->GetPackBuf());
                lpInPacker->Release();
            }
            if (lpOutPacker)
            {
                free(lpOutPacker->GetPackBuf());
                lpOutPacker->Release();
            }
            return;
        }

        //重新组装转换后的列表字符串
        int j = 0;
        lpOutUnPacker = lpOutPacker->UnPack();
        while (!lpOutUnPacker->IsEOF())
        {
            if (j)
            {
                sprintf(sStockTypeList, "%s,%d", sStockTypeList, lpOutUnPacker->GetInt("stock_type"));
            } else
            {
                sprintf(sStockTypeList, "%d", lpOutUnPacker->GetInt("stock_type"));
            }
            j++;
            lpOutUnPacker->Next();
        }

        strcpy(pStockTypeArr[i], sStockTypeList);

        //重置
        memset(sStockTypeList, 0, sizeof (sStockTypeList));
        memset(sWhereStr, 0, sizeof (sWhereStr));
    }

    //释放资源
    if (lpInPacker)
    {
        free(lpInPacker->GetPackBuf());
        lpInPacker->Release();
    }
    if (lpOutPacker)
    {
        free(lpOutPacker->GetPackBuf());
        lpOutPacker->Release();
    }
}

