#include "Unitstock_cw_sync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CUnitStockCwSync::CUnitStockCwSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tunitstock");
    strcpy(m_sSrcView,  "vo4jc_otcunitstock_redo");
    strcpy(m_sTmpTable, "sync_unitstock_cw_sync");
    strcpy(m_sDstTable, "uft_tunitstock_cw_sync");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CUnitStockCwSync::~CUnitStockCwSync()
{}

bool CUnitStockCwSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    
    EXEC SQL BEGIN DECLARE SECTION;
        int nFetchRows;
       
        typedef struct UnitStockCwSyncRecord
        {
            int business_date[BATCH_ROWS];//                   number(8,0)    DEFAULT 0       NOT NULL   , 
            int company_id[BATCH_ROWS];//                      number(10,0)   DEFAULT 0       NOT NULL   , 
            int fund_id[BATCH_ROWS];//                         number(8,0)    DEFAULT 0       NOT NULL   , 
            int asset_id[BATCH_ROWS];//                        number(10,0)   DEFAULT 0       NOT NULL   , 
            int combi_id[BATCH_ROWS];//                        number(10,0)   DEFAULT 0       NOT NULL   , 
            char invest_type[BATCH_ROWS][2];//                     char(1)        DEFAULT '' ''   NOT NULL   , 
            char position_type[BATCH_ROWS][2];//                   char(1)        DEFAULT '' ''   NOT NULL   ,           
            int market_no[BATCH_ROWS];//                       number(8,0)    DEFAULT 0       NOT NULL   , 
            char report_code[BATCH_ROWS][33];//                     varchar2(32)   DEFAULT '' ''   NOT NULL   , 
            char position_stock_type[BATCH_ROWS][2];//            char(1)        DEFAULT '' ''   NOT NULL   , 
            double current_amount[BATCH_ROWS];//                  number(20,4)   DEFAULT 0       NOT NULL   , 
            double original_cost[BATCH_ROWS];//                   number(18,2)   DEFAULT 0       NOT NULL   , 
            double carryover_cost[BATCH_ROWS];//                  number(18,2)   DEFAULT 0       NOT NULL   ,    
            double original_real_cost[BATCH_ROWS];//              number(18,2)   DEFAULT 0       NOT NULL   , 
            double carryover_real_cost[BATCH_ROWS];//             number(18,2)   DEFAULT 0       NOT NULL   , 
            double original_profit[BATCH_ROWS];//                 number(18,2)   DEFAULT 0       NOT NULL   , 
            double carryover_profit[BATCH_ROWS];//                number(18,2)   DEFAULT 0       NOT NULL   ,         
            double original_real_profit[BATCH_ROWS];//            number(18,2)   DEFAULT 0       NOT NULL   , 
            double carryover_real_profit[BATCH_ROWS];//           number(18,2)   DEFAULT 0       NOT NULL   , 
            double dividend[BATCH_ROWS];//                        number(18,2)   DEFAULT 0       NOT NULL   , 
            double uncarryover_dividend[BATCH_ROWS];//            number(18,2)   DEFAULT 0       NOT NULL   , 
            double ontheway_dividend[BATCH_ROWS];//               number(18,2)   DEFAULT 0       NOT NULL   , 
            double total_buy_amount[BATCH_ROWS];//                number(20,4)   DEFAULT 0       NOT NULL   , 
            double total_sale_amount[BATCH_ROWS];//               number(20,4)   DEFAULT 0       NOT NULL   , 
            double total_buy_balance[BATCH_ROWS];//               number(18,2)   DEFAULT 0       NOT NULL   , 
            double total_sale_balance[BATCH_ROWS];//              number(18,2)   DEFAULT 0       NOT NULL   ,                    
            double buy_amount[BATCH_ROWS];//                      number(20,4)   DEFAULT 0       NOT NULL   , 
            double sale_amount[BATCH_ROWS];//                     number(20,4)   DEFAULT 0       NOT NULL   , 
            double buy_balance[BATCH_ROWS];//                     number(18,2)   DEFAULT 0       NOT NULL   , 
            double sale_balance[BATCH_ROWS];//                    number(18,2)   DEFAULT 0       NOT NULL   , 
            double buy_fee[BATCH_ROWS];//                         number(18,2)   DEFAULT 0       NOT NULL   , 
            double sale_fee[BATCH_ROWS];//                        number(18,2)   DEFAULT 0       NOT NULL   ,        
            double begin_original_real_cost[BATCH_ROWS];//        number(18,2)   DEFAULT 0       NOT NULL   , 
            double begin_carryover_real_cost[BATCH_ROWS];//       number(18,2)   DEFAULT 0       NOT NULL   , 
            double begin_original_real_profit[BATCH_ROWS];//      number(18,2)   DEFAULT 0       NOT NULL   , 
            double begin_carryover_real_profit[BATCH_ROWS];//     number(18,2)   DEFAULT 0       NOT NULL   , 
            double begin_original_interest_cost[BATCH_ROWS];//    number(18,2)   DEFAULT 0       NOT NULL   , 
            double begin_carryover_interest_cost[BATCH_ROWS];//   number(18,2)   DEFAULT 0       NOT NULL   , 
            double begin_original_int_profit[BATCH_ROWS];//       number(18,2)   DEFAULT 0       NOT NULL   , 
            double begin_carryover_int_profit[BATCH_ROWS];//      number(18,2)   DEFAULT 0       NOT NULL   , 
            double begin_amount[BATCH_ROWS];//                    number(20,4)   DEFAULT 0       NOT NULL     
        } UnitStockCwSyncRecord;
        UnitStockCwSyncRecord * lpUnitStockCwSyncRecord = NULL;
    EXEC SQL END DECLARE SECTION;
    
    // 获取O3数据库连接句柄
    sql_context O3DbContext = m_lpO3Conn->getSQLContext(); 
    if (NULL == O3DbContext)
    {
        SetErrorInfo(DB_ERR_CONNECTION, "【%s】表同步，获取O3数据库连接失败", m_sDstTable);
        return false;
    }
    // 从O3视图读取数据放入到游标
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :O3DbContext;
    EXEC SQL DECLARE RESULT CURSOR FOR 
        select
            business_date, 
            company_id, 
            fund_id, 
            asset_id, 
            combi_id, 
            invest_type, 
            position_type,          
            market_no, 
            report_code, 
            position_stock_type, 
            current_amount, 
            original_cost, 
            carryover_cost,    
            original_real_cost,
            carryover_real_cost,
            original_profit, 
            carryover_profit,  
            original_real_profit,
            carryover_real_profit,
            dividend,
            uncarryover_dividend,
            ontheway_dividend,
            total_buy_amount, 
            total_sale_amount, 
            total_buy_balance, 
            total_sale_balance,                     
            buy_amount, 
            sale_amount, 
            buy_balance, 
            sale_balance, 
            buy_fee, 
            sale_fee,      
            begin_original_real_cost, 
            begin_carryover_real_cost, 
            begin_original_real_profit, 
            begin_carryover_real_profit, 
            begin_original_interest_cost, 
            begin_carryover_interest_cost, 
            begin_original_int_profit, 
            begin_carryover_int_profit, 
            begin_amount
        from vo4jc_otcunitstock_redo;
    
    // 打开游标
    EXEC SQL OPEN RESULT;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");
    
    // 申请内存空间，把游标中的数据导入到内存空间
    lpUnitStockCwSyncRecord =  new UnitStockCwSyncRecord();
    if (NULL == lpUnitStockCwSyncRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【UnitStockCwSyncRecord】失败", m_sDstTable);
        return false;
    }
    
    // 获取O4数据连接句柄
    sql_context O4DbContext = m_lpO4Conn->getSQLContext();
    if (NULL == O4DbContext)
    {
        SetErrorInfo(DB_ERR_CONNECTION, "【%s】表同步，获取O4数据库连接失败", m_sDstTable);
        delete lpUnitStockCwSyncRecord;
        return false;
    }
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 清空内存，并把游标里的结果集放入内存中，一次放入BATCH_ROWS行数据
        memset(lpUnitStockCwSyncRecord, 0, sizeof (UnitStockCwSyncRecord));
        EXEC SQL CONTEXT USE :O3DbContext;
        EXEC SQL FETCH RESULT into :lpUnitStockCwSyncRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpUnitStockCwSyncRecord;
            return false;
        }
        
        // 如果是最后一次循环，那么nFetchRows就等于m_nRemainRows行数据，m_nRemainRows小于等于BATCH_ROWS
        // 如果不是最后一次循环，那么nFetchRows就等于m_nBatchRows=BATCH_ROWS行数据
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;
        
        // 把内存里的数据导入到中间表
        EXEC SQL CONTEXT USE :O4DbContext;
        EXEC SQL for :nFetchRows
            insert into sync_unitstock_cw_sync(
                business_date, 
                company_id, 
                fund_id, 
                asset_id, 
                combi_id, 
                invest_type, 
                position_type,              
                market_no, 
                report_code, 
                position_stock_type, 
                current_amount, 
                original_cost, 
                carryover_cost,   
                original_real_cost,
                carryover_real_cost,
                original_profit, 
                carryover_profit,  
                original_real_profit,
                carryover_real_profit,
                dividend,
                uncarryover_dividend,
                ontheway_dividend,
                total_buy_amount, 
                total_sale_amount, 
                total_buy_balance, 
                total_sale_balance,                             
                buy_amount, 
                sale_amount, 
                buy_balance, 
                sale_balance, 
                buy_fee, 
                sale_fee,    
                begin_original_real_cost, 
                begin_carryover_real_cost, 
                begin_original_real_profit, 
                begin_carryover_real_profit, 
                begin_original_interest_cost, 
                begin_carryover_interest_cost, 
                begin_original_int_profit, 
                begin_carryover_int_profit, 
                begin_amount)
            values(
                :lpUnitStockCwSyncRecord->business_date, 
                :lpUnitStockCwSyncRecord->company_id,
                :lpUnitStockCwSyncRecord->fund_id, 
                :lpUnitStockCwSyncRecord->asset_id, 
                :lpUnitStockCwSyncRecord->combi_id, 
                rtrim(:lpUnitStockCwSyncRecord->invest_type), 
                rtrim(:lpUnitStockCwSyncRecord->position_type),            
                :lpUnitStockCwSyncRecord->market_no, 
                rtrim(:lpUnitStockCwSyncRecord->report_code), 
                rtrim(:lpUnitStockCwSyncRecord->position_stock_type), 
                :lpUnitStockCwSyncRecord->current_amount, 
                :lpUnitStockCwSyncRecord->original_cost, 
                :lpUnitStockCwSyncRecord->carryover_cost,  
                :lpUnitStockCwSyncRecord->original_real_cost,
                :lpUnitStockCwSyncRecord->carryover_real_cost,
                :lpUnitStockCwSyncRecord->original_profit, 
                :lpUnitStockCwSyncRecord->carryover_profit,  
                :lpUnitStockCwSyncRecord->original_real_profit,
                :lpUnitStockCwSyncRecord->carryover_real_profit,
                :lpUnitStockCwSyncRecord->dividend,
                :lpUnitStockCwSyncRecord->uncarryover_dividend,
                :lpUnitStockCwSyncRecord->ontheway_dividend,
                :lpUnitStockCwSyncRecord->total_buy_amount, 
                :lpUnitStockCwSyncRecord->total_sale_amount, 
                :lpUnitStockCwSyncRecord->total_buy_balance, 
                :lpUnitStockCwSyncRecord->total_sale_balance,                              
                :lpUnitStockCwSyncRecord->buy_amount, 
                :lpUnitStockCwSyncRecord->sale_amount, 
                :lpUnitStockCwSyncRecord->buy_balance, 
                :lpUnitStockCwSyncRecord->sale_balance, 
                :lpUnitStockCwSyncRecord->buy_fee, 
                :lpUnitStockCwSyncRecord->sale_fee,   
                :lpUnitStockCwSyncRecord->begin_original_real_cost, 
                :lpUnitStockCwSyncRecord->begin_carryover_real_cost, 
                :lpUnitStockCwSyncRecord->begin_original_real_profit, 
                :lpUnitStockCwSyncRecord->begin_carryover_real_profit, 
                :lpUnitStockCwSyncRecord->begin_original_interest_cost, 
                :lpUnitStockCwSyncRecord->begin_carryover_interest_cost, 
                :lpUnitStockCwSyncRecord->begin_original_int_profit, 
                :lpUnitStockCwSyncRecord->begin_carryover_int_profit, 
                :lpUnitStockCwSyncRecord->begin_amount);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpUnitStockCwSyncRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }
    
    EXEC SQL CONTEXT USE :O3DbContext;
    // 关闭游标
    EXEC SQL CLOSE RESULT;
    delete lpUnitStockCwSyncRecord;
    
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    return true;
}

bool CUnitStockCwSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
        char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    // 删除O4表的主键和索引
    if (!DropTableIndex())
    {
        return false;
    }
    
    // 获取O4数据库的连接句柄
    sql_context O4DbContext = m_lpO4Conn->getSQLContext();
    if (NULL == O4DbContext)
    {
        SetErrorInfo(DB_ERR_CONNECTION, "从临时表导入数据到O4【%s】表，获取O4数据库连接失败", m_sDstTable);
        return false;
    }
    EXEC SQL CONTEXT USE :O4DbContext;
    sprintf(sExecSql, 
            "DECLARE"
            "   V_O4_TEMP_TABLE_NAME    VARCHAR2(64);"
            "   V_O4_TABLE_NAME         VARCHAR2(64);"
            "BEGIN"
            "   V_O4_TEMP_TABLE_NAME := '%s';"
            "   V_O4_TABLE_NAME  := '%s';"
            ""
            // 清空O4表数据，并把水位清零
            "   EXECUTE IMMEDIATE 'truncate table ' || V_O4_TABLE_NAME;"
            // 把中间表数据导入到O4表
            "   EXECUTE IMMEDIATE   'INSERT INTO '|| V_O4_TABLE_NAME || '(' || "
            "                       ' business_date, ' || " 
"                       ' company_id, ' || " 
"                       ' fund_id, ' || " 
"                       ' asset_id, ' || " 
"                       ' combi_id, ' || " 
"                       ' invest_type, ' || " 
"                       ' position_type, ' || "              
"                       ' market_no, ' || " 
"                       ' report_code, ' || " 
"                       ' position_stock_type, ' || " 
"                       ' current_amount, ' || " 
"                       ' original_cost, ' || " 
"                       ' carryover_cost, ' || "   
"                       ' original_real_cost, ' || "
"                       ' carryover_real_cost, ' || "
"                       ' original_profit, ' || " 
"                       ' carryover_profit, ' || "  
"                       ' original_real_profit, ' || "
"                       ' carryover_real_profit, ' || "
"                       ' dividend, ' || "
"                       ' uncarryover_dividend, ' || "
"                       ' ontheway_dividend, ' || "
"                       ' total_buy_amount, ' || " 
"                       ' total_sale_amount, ' || " 
"                       ' total_buy_balance, ' || " 
"                       ' total_sale_balance, ' || "                
"                       ' buy_amount, ' || " 
"                       ' sale_amount, ' || " 
"                       ' buy_balance, ' || " 
"                       ' sale_balance, ' || " 
"                       ' buy_fee, ' || " 
"                       ' sale_fee, ' || "    
"                       ' begin_original_real_cost, ' || " 
"                       ' begin_carryover_real_cost, ' || " 
"                       ' begin_original_real_profit, ' || " 
"                       ' begin_carryover_real_profit, ' || " 
"                       ' begin_original_interest_cost, ' || " 
"                       ' begin_carryover_interest_cost, ' || " 
"                       ' begin_original_int_profit, ' || " 
"                       ' begin_carryover_int_profit, ' || " 
"                       ' begin_amount) ' || "
            "                       ' SELECT ' ||"
            "                       ' business_date, ' || " 
"                       ' company_id, ' || " 
"                       ' fund_id, ' || " 
"                       ' asset_id, ' || " 
"                       ' combi_id, ' || " 
"                       ' invest_type, ' || " 
"                       ' position_type, ' || "              
"                       ' market_no, ' || " 
"                       ' report_code, ' || " 
"                       ' position_stock_type, ' || " 
"                       ' current_amount, ' || " 
"                       ' original_cost, ' || " 
"                       ' carryover_cost, ' || "   
"                       ' original_real_cost, ' || "
"                       ' carryover_real_cost, ' || "
"                       ' original_profit, ' || " 
"                       ' carryover_profit, ' || "  
"                       ' original_real_profit, ' || "
"                       ' carryover_real_profit, ' || "
"                       ' dividend, ' || "
"                       ' uncarryover_dividend, ' || "
"                       ' ontheway_dividend, ' || "
"                       ' total_buy_amount, ' || " 
"                       ' total_sale_amount, ' || " 
"                       ' total_buy_balance, ' || " 
"                       ' total_sale_balance, ' || "                
"                       ' buy_amount, ' || " 
"                       ' sale_amount, ' || " 
"                       ' buy_balance, ' || " 
"                       ' sale_balance, ' || " 
"                       ' buy_fee, ' || " 
"                       ' sale_fee, ' || "    
"                       ' begin_original_real_cost, ' || " 
"                       ' begin_carryover_real_cost, ' || " 
"                       ' begin_original_real_profit, ' || " 
"                       ' begin_carryover_real_profit, ' || " 
"                       ' begin_original_interest_cost, ' || " 
"                       ' begin_carryover_interest_cost, ' || " 
"                       ' begin_original_int_profit, ' || " 
"                       ' begin_carryover_int_profit, ' || " 
"                       ' begin_amount ' || "
            "                       ' FROM '|| V_O4_TEMP_TABLE_NAME ;"
            "   COMMIT;"
            "END;",
            m_sTmpTable, m_sDstTable);
    
    // 执行sql语句
    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        // 重建O4表的主键和索引
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    
    // 重建O4表的主键和索引
    if (!RecoverTableIndex())
    {
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}
