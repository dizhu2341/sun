#include "OptioncombiSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

COptioncombiSync::COptioncombiSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tshqqzhcc");
    strcpy(m_sSrcView, "vo4jc_gpqqzhcc");
    strcpy(m_sTmpTable, "sync_optioncombi");
    strcpy(m_sDstTable, "uft_toptioncombi_unitstock");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

COptioncombiSync::~COptioncombiSync()
{
}

bool COptioncombiSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct OptioncombiRecord
    {
        int business_date[BATCH_ROWS];//      number(8,0)    DEFAULT 0       NOT NULL   , 
        int company_id[BATCH_ROWS];//         number(10,0)   DEFAULT 0       NOT NULL   , 
        int fund_id[BATCH_ROWS];//            number(8,0)    DEFAULT 0       NOT NULL   , 
        int asset_id[BATCH_ROWS];//           number(10,0)   DEFAULT 0       NOT NULL   , 
        int combi_id[BATCH_ROWS];//           number(10,0)   DEFAULT 0       NOT NULL   , 
        char invest_type[BATCH_ROWS][2];//        char(1)        DEFAULT '' ''   NOT NULL   , 
        char position_type[BATCH_ROWS][2];//      char(1)        DEFAULT '' ''   NOT NULL   , 
        char stockholder_id[BATCH_ROWS][21];//     varchar2(20)   DEFAULT '' ''   NOT NULL   , 
        char bind_seat[BATCH_ROWS][21];//          varchar2(20)   DEFAULT '' ''   NOT NULL   , 
        int market_no[BATCH_ROWS];//          number(8,0)    DEFAULT 0       NOT NULL   , 
        char combistrategy_id[BATCH_ROWS][65];//   varchar2(64)   DEFAULT '' ''   NOT NULL   , 
        char report_code[BATCH_ROWS][33];//        varchar2(32)   DEFAULT '' ''   NOT NULL   , 
        double combi_amount[BATCH_ROWS];//       number(20,4)   DEFAULT 0       NOT NULL   , 
        char report_code1[BATCH_ROWS][33];//       varchar2(32)   DEFAULT '' ''   NOT NULL   , 
        char position_type1[BATCH_ROWS][2];//     char(1)        DEFAULT '' ''   NOT NULL   , 
        double firstleg_amount[BATCH_ROWS];//    number(20,4)   DEFAULT 0       NOT NULL   , 
        char report_code2[BATCH_ROWS][33];//       varchar2(32)   DEFAULT '' ''   NOT NULL   , 
        char position_type2[BATCH_ROWS][2];//     char(1)        DEFAULT '' ''   NOT NULL   , 
        double secondleg_amount[BATCH_ROWS];//   number(20,4)   DEFAULT 0       NOT NULL   , 
        char report_code3[BATCH_ROWS][33];//       varchar2(32)   DEFAULT '' ''   NOT NULL   , 
        char position_type3[BATCH_ROWS][2];//     char(1)        DEFAULT '' ''   NOT NULL   , 
        double thirdleg_amount[BATCH_ROWS];//    number(20,4)   DEFAULT 0       NOT NULL   , 
        char report_code4[BATCH_ROWS][33];//       varchar2(32)   DEFAULT '' ''   NOT NULL   , 
        char position_type4[BATCH_ROWS][2];//     char(1)        DEFAULT '' ''   NOT NULL   , 
        double fourleg_amount[BATCH_ROWS];//     number(20,4)   DEFAULT 0       NOT NULL     
    } OptioncombiRecord;
    OptioncombiRecord *lpOptioncombiRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpOptioncombiRecord = new OptioncombiRecord();
    if (NULL == lpOptioncombiRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【OptioncombiRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpOptioncombiRecord, 0, sizeof (OptioncombiRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
        select 
            business_date,
            company_id,
            fund_id,
            asset_id,
            combi_id,
            invest_type,
            position_type,
            stockholder_id,
            bind_seat,
            market_no,
            combistrategy_id,
            report_code,
            combi_amount,
            report_code1,
            position_type1,
            firstleg_amount,
            report_code2,
            position_type2,
            secondleg_amount,
            report_code3,
            position_type3,
            thirdleg_amount,
            report_code4,
            position_type4,
            fourleg_amount
        from  vo4jc_gpqqzhcc;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpOptioncombiRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpOptioncombiRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpOptioncombiRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_optioncombi(
                    business_date,
                    company_id,
                    fund_id,
                    asset_id,
                    combi_id,
                    invest_type,
                    position_type,
                    stockholder_id,
                    bind_seat,
                    market_no,
                    combistrategy_id,
                    report_code,
                    combi_amount,
                    report_code1,
                    position_type1,
                    firstleg_amount,
                    report_code2,
                    position_type2,
                    secondleg_amount,
                    report_code3,
                    position_type3,
                    thirdleg_amount,
                    report_code4,
                    position_type4,
                    fourleg_amount)
             values(:lpOptioncombiRecord->business_date,
                    :lpOptioncombiRecord->company_id,
                    :lpOptioncombiRecord->fund_id,
                    :lpOptioncombiRecord->asset_id,
                    :lpOptioncombiRecord->combi_id,
                    rtrim(:lpOptioncombiRecord->invest_type),
                    rtrim(:lpOptioncombiRecord->position_type),
                    rtrim(:lpOptioncombiRecord->stockholder_id),
                    rtrim(:lpOptioncombiRecord->bind_seat),
                    :lpOptioncombiRecord->market_no,
                    rtrim(:lpOptioncombiRecord->combistrategy_id),
                    rtrim(:lpOptioncombiRecord->report_code),
                    :lpOptioncombiRecord->combi_amount,
                    rtrim(:lpOptioncombiRecord->report_code1),
                    rtrim(:lpOptioncombiRecord->position_type1),
                    :lpOptioncombiRecord->firstleg_amount,
                    rtrim(:lpOptioncombiRecord->report_code2),
                    rtrim(:lpOptioncombiRecord->position_type2),
                    :lpOptioncombiRecord->secondleg_amount,
                    rtrim(:lpOptioncombiRecord->report_code3),
                    rtrim(:lpOptioncombiRecord->position_type3),
                    :lpOptioncombiRecord->thirdleg_amount,
                    rtrim(:lpOptioncombiRecord->report_code4),
                    rtrim(:lpOptioncombiRecord->position_type4),
                    :lpOptioncombiRecord->fourleg_amount);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpOptioncombiRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpOptioncombiRecord;
    return true;
}

bool COptioncombiSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;
    
    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "       '   business_date, '   ||"
            "       '   company_id, '   ||"
            "       '   fund_id, '   ||"
            "       '   asset_id, '   ||"
            "       '   combi_id, '   ||"
            "       '   invest_type, '   ||"
            "       '   position_type, '   ||"
            "       '   stockholder_id, '   ||"
            "       '   bind_seat, '   ||"
            "       '   market_no, '   ||"
            "       '   combistrategy_id, '   ||"
            "       '   report_code, '   ||"
            "       '   combi_amount, '   ||"
            "       '   report_code1, '   ||"
            "       '   position_type1, '   ||"
            "       '   firstleg_amount, '   ||"
            "       '   report_code2, '   ||"
            "       '   position_type2, '   ||"
            "       '   secondleg_amount, '   ||"
            "       '   report_code3, '   ||"
            "       '   position_type3, '   ||"
            "       '   thirdleg_amount, '   ||"
            "       '   report_code4, '   ||"
            "       '   position_type4, '   ||"
            "       '   fourleg_amount)  '   ||"
            "       '   SELECT T1.BUSINESS_DATE, T1.COMPANY_ID, T1.FUND_ID, T1.ASSET_ID, T1.COMBI_ID, NVL(T1.INVEST_TYPE,'' ''), T1.POSITION_TYPE, '   ||"
            "       '   CASE WHEN T1.STOCKHOLDER_ID=''-1'' THEN ''*'' ELSE NVL(T1.STOCKHOLDER_ID, ''*'') END AS STOCKHOLDER_ID, ' ||   "
            "       '   NVL(T1.BIND_SEAT,'' ''), T1.MARKET_NO, NVL(T1.COMBISTRATEGY_ID,'' ''), T1.REPORT_CODE, T1.COMBI_AMOUNT, ' ||   "
            "       '   NVL(T1.REPORT_CODE1,'' ''), T1.POSITION_TYPE1, T1.FIRSTLEG_AMOUNT,  NVL(T1.REPORT_CODE2,'' ''), T1.POSITION_TYPE2, T1.SECONDLEG_AMOUNT, ' || "
            "       '   NVL(T1.REPORT_CODE3,'' ''), T1.POSITION_TYPE3, T1.THIRDLEG_AMOUNT, NVL(T1.REPORT_CODE4,'' ''), T1.POSITION_TYPE4, T1.FOURLEG_AMOUNT '   ||"
            "       '   FROM   SYNC_OPTIONCOMBI T1' ;"
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;

    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


