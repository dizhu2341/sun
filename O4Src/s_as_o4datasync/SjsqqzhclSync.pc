#include "SjsqqzhclSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CSjsqqzhclSync::CSjsqqzhclSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tsjsqqzhcl");
    strcpy(m_sSrcView, "VO4JC_SJSQQZHCL");
    strcpy(m_sTmpTable, "sync_sjsqqzhcl");
    strcpy(m_sDstTable, "jc_tsjsqqzhcl");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CSjsqqzhclSync::~CSjsqqzhclSync()
{
}

bool CSjsqqzhclSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct SjsqqzhclRecord
    {
        int combi_multiple1[BATCH_ROWS];
        int combi_multiple2[BATCH_ROWS];
        int combi_multiple3[BATCH_ROWS];
        int combi_multiple4[BATCH_ROWS];
        char combistrategy_code[BATCH_ROWS][33];
        char combistrategy_name[BATCH_ROWS][129];
        char market_no[BATCH_ROWS][2];
        char option_direction1[BATCH_ROWS][2];
        char option_direction2[BATCH_ROWS][2];
        char option_direction3[BATCH_ROWS][2];
        char option_direction4[BATCH_ROWS][2];
        char position_type1[BATCH_ROWS][2];
        char position_type2[BATCH_ROWS][2];
        char position_type3[BATCH_ROWS][2];
        char position_type4[BATCH_ROWS][2];
        char samedate_flag[BATCH_ROWS][2];
        char sameunderlying_flag[BATCH_ROWS][2];
    } SjsqqzhclRecord;
    SjsqqzhclRecord *lpSjsqqzhclRecord = NULL;
    EXEC SQL END DECLARE SECTION;
    // 申请内存空间
    lpSjsqqzhclRecord = new SjsqqzhclRecord();
    if (NULL == lpSjsqqzhclRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【SjsqqzhclRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpSjsqqzhclRecord, 0, sizeof (SjsqqzhclRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                    select combi_multiple1, combi_multiple2, combi_multiple3, combi_multiple4, combistrategy_code, combistrategy_name, market_no, option_direction1, option_direction2, option_direction3, option_direction4, position_type1, position_type2, position_type3, position_type4, samedate_flag, sameunderlying_flag 
                    from VO4JC_SJSQQZHCL;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpSjsqqzhclRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpSjsqqzhclRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpSjsqqzhclRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_sjsqqzhcl(combi_multiple1, combi_multiple2, combi_multiple3, combi_multiple4, combistrategy_code, combistrategy_name, market_no, option_direction1, option_direction2, option_direction3, option_direction4, position_type1, position_type2, position_type3, position_type4, samedate_flag, sameunderlying_flag)
             values(:lpSjsqqzhclRecord->combi_multiple1,
										:lpSjsqqzhclRecord->combi_multiple2,
										:lpSjsqqzhclRecord->combi_multiple3,
										:lpSjsqqzhclRecord->combi_multiple4,
										rtrim(:lpSjsqqzhclRecord->combistrategy_code),
										rtrim(:lpSjsqqzhclRecord->combistrategy_name),
										rtrim(:lpSjsqqzhclRecord->market_no),
										rtrim(:lpSjsqqzhclRecord->option_direction1),
										rtrim(:lpSjsqqzhclRecord->option_direction2),
										rtrim(:lpSjsqqzhclRecord->option_direction3),
										rtrim(:lpSjsqqzhclRecord->option_direction4),
										rtrim(:lpSjsqqzhclRecord->position_type1),
										rtrim(:lpSjsqqzhclRecord->position_type2),
										rtrim(:lpSjsqqzhclRecord->position_type3),
										rtrim(:lpSjsqqzhclRecord->position_type4),
										rtrim(:lpSjsqqzhclRecord->samedate_flag),
										rtrim(:lpSjsqqzhclRecord->sameunderlying_flag));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpSjsqqzhclRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpSjsqqzhclRecord;
    return true;
}

bool CSjsqqzhclSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "  V_START_INTER_CODE NUMBER := 0;"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"

            "  SELECT MAX(TO_NUMBER(SUBSTR(TO_CHAR(INTER_CODE), 1, 7)))"
            "    INTO V_START_INTER_CODE"
            "    FROM (SELECT INTER_CODE,"
            "                 CASE"
            "                   WHEN MARKET_NO IN (1, 2, 5) AND LENGTH(REPORT_CODE) <= 6 AND"
            "                        REGEXP_LIKE(REPORT_CODE, '^[0-9]+$') THEN"
            "                    1"
            "                   ELSE"
            "                    0"
            "                 END MM"
            "            FROM JC_TCONVERTINTERCODE)"
            "   WHERE MM = 0;"
            "  V_START_INTER_CODE := CASE"
            "                          WHEN V_START_INTER_CODE IS NULL THEN"
            "                           0"
            "                          ELSE"
            "                           V_START_INTER_CODE - 1000000"
            "                        END;"

            "    EXECUTE IMMEDIATE 'INSERT INTO JC_TCONVERTINTERCODE(MARKET_NO,REPORT_CODE,INTER_CODE)' ||"
            "                      '  SELECT V.MARKET_NO,' ||"
            "                      '         V.REPORT_CODE,' ||"
            "                      '         SF_CREATE_INTERCODE_WITH_INDEX(V.MARKET_NO,' ||"
            "                      '                                        V.REPORT_CODE,' ||"
            "                      '                                        '||V_START_INTER_CODE||' + V.RN)' ||"
            "                      '    FROM (SELECT T1.*, T2.INTER_CODE,ROW_NUMBER() OVER(ORDER BY CASE WHEN t2.INTER_CODE IS NULL THEN 1 ELSE 2 END) RN' ||"
            "                      '            FROM (SELECT DISTINCT A.MARKET_NO MARKET_NO_SRC,' ||"
            "                      '                                  B.MARKET_NO,' ||"
            "                      '                                  A.COMBISTRATEGY_CODE REPORT_CODE ' ||"
            "                      '                    FROM SYNC_SJSQQZHCL A, JC_TCONVERTMARKETNO B' ||"
            "                      '                   WHERE A.MARKET_NO = B.MARKET_NO_SRC) T1' ||"
            "                      '            LEFT JOIN JC_TCONVERTINTERCODE T2' ||"
            "                      '              ON T1.MARKET_NO = T2.MARKET_NO' ||"
            "                      '             AND T1.REPORT_CODE = T2.REPORT_CODE) V' ||"
            "                      '             WHERE V.INTER_CODE IS NULL';"

            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "       '   MARKET_NO, COMBISTRATEGY_CODE, COMBISTRATEGY_NAME, SAMEDATE_FLAG, SAMEUNDERLYING_FLAG, OPTION_DIRECTION1, POSITION_TYPE1, COMBI_MULTIPLE1, '   ||"
            "       '   OPTION_DIRECTION2, POSITION_TYPE2, COMBI_MULTIPLE2, OPTION_DIRECTION3, POSITION_TYPE3, COMBI_MULTIPLE3, OPTION_DIRECTION4, POSITION_TYPE4, COMBI_MULTIPLE4) '   ||"
            "       '   SELECT T2.MARKET_NO, NVL(T1.COMBISTRATEGY_CODE,'' ''), NVL(T1.COMBISTRATEGY_NAME,'' ''), NVL(T1.SAMEDATE_FLAG,'' ''), NVL(T1.SAMEUNDERLYING_FLAG,'' ''), NVL(T1.OPTION_DIRECTION1,'' ''), NVL(T1.POSITION_TYPE1,'' ''), T1.COMBI_MULTIPLE1, '   ||"
            "       '   NVL(OPTION_DIRECTION2,'' ''), NVL(T1.POSITION_TYPE2,'' ''), T1.COMBI_MULTIPLE2, NVL(T1.OPTION_DIRECTION3,'' ''), NVL(T1.POSITION_TYPE3,'' ''), T1.COMBI_MULTIPLE3, NVL(T1.OPTION_DIRECTION4,'' ''), NVL(T1.POSITION_TYPE4,'' ''), T1.COMBI_MULTIPLE4 '   ||"
            "       '   FROM　SYNC_SJSQQZHCL T1,JC_TCONVERTMARKETNO T2 '   ||"
            "       '   WHERE T1.MARKET_NO = T2.MARKET_NO_SRC ';  "

            "  EXECUTE IMMEDIATE 'INSERT INTO JC_TSTOCK (INTER_CODE, MARKET_NO, REPORT_CODE, STOCK_NAME, STOCK_TYPE, LAST_PRICE)' || "
            "       '   SELECT * FROM (SELECT B.INTER_CODE 	AS INTER_CODE, A.MARKET_NO	AS MARKET_NO, A.COMBISTRATEGY_CODE AS REPORT_CODE, A.COMBISTRATEGY_NAME AS STOCK_NAME,86    AS STOCK_TYPE, 0    AS LAST_PRICE '   ||"
            "       '   FROM JC_TSJSQQZHCL A, JC_TCONVERTINTERCODE B '   ||"
            "       '   WHERE A.MARKET_NO = B.MARKET_NO  AND A.COMBISTRATEGY_CODE = B.REPORT_CODE) C  WHERE C.INTER_CODE NOT IN (SELECT D.INTER_CODE FROM JC_TSTOCK D)';"
            "  COMMIT;"

            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


