#include "CurrencyrateSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CCurrencyrateSync::CCurrencyrateSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tcurrencyrate");
    strcpy(m_sSrcView, "VO4JC_CURRENCYRATE");
    strcpy(m_sTmpTable, "sync_currencyrate");
    strcpy(m_sDstTable, "jc_tcurrencyrate");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CCurrencyrateSync::~CCurrencyrateSync()
{
}

bool CCurrencyrateSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct CurrencyrateRecord
    {
        char currency_source[BATCH_ROWS][4];
        char currency_target[BATCH_ROWS][4];
        int set_no[BATCH_ROWS];
        double bid_price[BATCH_ROWS];
        double ask_price[BATCH_ROWS];
        double mid_price[BATCH_ROWS];
        int unit_amount[BATCH_ROWS];
        int priority_level[BATCH_ROWS];
        int origin[BATCH_ROWS];
        double direct_price[BATCH_ROWS];
    } CurrencyrateRecord;
    CurrencyrateRecord *lpCurrencyrateRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpCurrencyrateRecord = new CurrencyrateRecord();
    if (NULL == lpCurrencyrateRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【CurrencyrateRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpCurrencyrateRecord, 0, sizeof (CurrencyrateRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR   
                    select currency_source, currency_target, set_no, bid_price, ask_price, mid_price, unit_amount, priority_level, origin, direct_price 
                    from VO4JC_CURRENCYRATE;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpCurrencyrateRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpCurrencyrateRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpCurrencyrateRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_currencyrate(currency_source, currency_target, set_no, bid_price, ask_price, mid_price, unit_amount, priority_level, origin, direct_price)
             values(rtrim(:lpCurrencyrateRecord->currency_source),
										rtrim(:lpCurrencyrateRecord->currency_target),
										:lpCurrencyrateRecord->set_no,
										:lpCurrencyrateRecord->bid_price,
										:lpCurrencyrateRecord->ask_price,
										:lpCurrencyrateRecord->mid_price,
										:lpCurrencyrateRecord->unit_amount,
										:lpCurrencyrateRecord->priority_level,
										:lpCurrencyrateRecord->origin,
										:lpCurrencyrateRecord->direct_price);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpCurrencyrateRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpCurrencyrateRecord;
    return true;
}

bool CCurrencyrateSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;
    if (!DropTableIndex())
        return false;
    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "  V_INIT_DATE       NUMBER(8);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  SELECT INIT_DATE INTO V_INIT_DATE FROM JC_TSYSTEMINFO;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "   '   SYS_DATE,EXRATE_SET_NO,SOURCE_CURRENCY_NO,TARGET_CURRENCY_NO,BID_PRICE_CURRENCY,ASK_PRICE,MID_PRICE,'   ||"
            "   '   EXCHANGE_UNIT_AMOUNT,PRIORITY_LEVEL,ORIGIN,DIRECT_EXCHANGE_PRICE)'   ||"
            "   '   SELECT '||V_INIT_DATE||', T1.SET_NO, NVL(T1.CURRENCY_SOURCE,'' ''), NVL(T1.CURRENCY_TARGET,'' ''), T1.BID_PRICE, T1.ASK_PRICE,'   ||"
            "   '   T1.MID_PRICE, T1.UNIT_AMOUNT, T1.PRIORITY_LEVEL, NVL(T1.ORIGIN,'' ''), T1.DIRECT_PRICE'   ||"
            "   '   FROM SYNC_CURRENCYRATE T1  '; "
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


