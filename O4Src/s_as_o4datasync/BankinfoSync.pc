#include "BankinfoSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CBankinfoSync::CBankinfoSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tbankinfo");
    strcpy(m_sSrcView, "VO4JC_BANKINFO");
    strcpy(m_sTmpTable, "sync_bankinfo");
    strcpy(m_sDstTable, "jc_tbankinfo");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CBankinfoSync::~CBankinfoSync()
{
}

bool CBankinfoSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct BankinfoRecord
    {
        char balance_setting[BATCH_ROWS][257];
        int bank_id[BATCH_ROWS];
        char bank_name[BATCH_ROWS][201];
        char bank_no[BATCH_ROWS][31];
        char bank_type[BATCH_ROWS][2];
        char bic_code[BATCH_ROWS][21];
        double capital_ratio[BATCH_ROWS];
        double core_capital_ratio[BATCH_ROWS];
        char country_no[BATCH_ROWS][4];
        char custodian_type[BATCH_ROWS][2];
        char export_name[BATCH_ROWS][129];
        char holding_setting[BATCH_ROWS][257];
        int issuer_id[BATCH_ROWS];
        double lastyear_asset[BATCH_ROWS];
        double lastyear_capital[BATCH_ROWS];
    } BankinfoRecord;
    BankinfoRecord *lpBankinfoRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpBankinfoRecord = new BankinfoRecord();
    if (NULL == lpBankinfoRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【BankinfoRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpBankinfoRecord, 0, sizeof (BankinfoRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                    select balance_setting, bank_id, bank_name, bank_no, bank_type, bic_code, capital_ratio, core_capital_ratio, country_no, custodian_type, export_name, holding_setting, issuer_id, lastyear_asset, lastyear_capital 
                    from VO4JC_BANKINFO;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpBankinfoRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpBankinfoRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpBankinfoRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_bankinfo(balance_setting, bank_id, bank_name, bank_no, bank_type, bic_code, capital_ratio, core_capital_ratio, country_no, custodian_type, export_name, holding_setting, issuer_id, lastyear_asset, lastyear_capital)
             values(rtrim(:lpBankinfoRecord->balance_setting),
										:lpBankinfoRecord->bank_id,
										rtrim(:lpBankinfoRecord->bank_name),
										rtrim(:lpBankinfoRecord->bank_no),
										rtrim(:lpBankinfoRecord->bank_type),
										rtrim(:lpBankinfoRecord->bic_code),
										:lpBankinfoRecord->capital_ratio,
										:lpBankinfoRecord->core_capital_ratio,
										rtrim(:lpBankinfoRecord->country_no),
										rtrim(:lpBankinfoRecord->custodian_type),
										rtrim(:lpBankinfoRecord->export_name),
										rtrim(:lpBankinfoRecord->holding_setting),
										:lpBankinfoRecord->issuer_id,
										:lpBankinfoRecord->lastyear_asset,
										:lpBankinfoRecord->lastyear_capital);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpBankinfoRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpBankinfoRecord;
    return true;
}

bool CBankinfoSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "       '   BANK_ID,BANK_NO,BANK_NAME,COUNTRY_NO,CUSTODIAN_TYPE,LASTYEAR_CAPITAL,CAPITAL_RATIO,BALANCE_SETTING, '   ||"
            "       '   EXPORT_NAME,HOLDING_SETTING,BIC_CODE,ISSUER_ID,LASTYEAR_ASSET,CORE_CAPITAL_RATIO,BANK_TYPE) '   ||"
            "       '   SELECT T1.BANK_ID, NVL(T1.BANK_NO,'' ''), NVL(T1.BANK_NAME,'' ''), NVL(T1.COUNTRY_NO,'' ''), NVL(T1.CUSTODIAN_TYPE,'' ''), T1.LASTYEAR_CAPITAL, T1.CAPITAL_RATIO, '   ||"
            "       '   NVL(T1.BALANCE_SETTING,'' ''), NVL(T1.EXPORT_NAME,'' ''), NVL(T1.HOLDING_SETTING,'' ''), NVL(T1.BIC_CODE,'' ''), T1.ISSUER_ID, T1.LASTYEAR_ASSET, T1.CORE_CAPITAL_RATIO, NVL(T1.BANK_TYPE,'' '') '   ||"
            "       '   FROM　SYNC_BANKINFO T1 ';   "
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


