#include "Instancestock_qh.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CInstancestockQh::CInstancestockQh(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tassetday");
    strcpy(m_sSrcView, "vo4jc_ftrinstancestock");
    strcpy(m_sTmpTable, "sync_instancestock_qh");
    strcpy(m_sDstTable, "uft_tinstancestock_qh");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CInstancestockQh::~CInstancestockQh()
{
}

bool CInstancestockQh::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct InstancestockRecord
    {
        int business_date[BATCH_ROWS];//              number(8,0)    DEFAULT 0       NOT NULL   , 
        int instance_id[BATCH_ROWS];//                number(10,0)   DEFAULT 0       NOT NULL   , 
        int company_id[BATCH_ROWS];//                 number(10,0)   DEFAULT 0       NOT NULL   , 
        int fund_id[BATCH_ROWS];//                    number(8,0)    DEFAULT 0       NOT NULL   , 
        int asset_id[BATCH_ROWS];//                   number(10,0)   DEFAULT 0       NOT NULL   , 
        int combi_id[BATCH_ROWS];//                   number(10,0)   DEFAULT 0       NOT NULL   , 
        char invest_type[BATCH_ROWS][2];//                char(1)        DEFAULT '' ''   NOT NULL   , 
        char position_type[BATCH_ROWS][2];//              char(1)        DEFAULT '' ''   NOT NULL   , 
        char stockholder_id[BATCH_ROWS][21];//             varchar2(20)   DEFAULT '' ''   NOT NULL   ,        
        int market_no[BATCH_ROWS];//                  number(8,0)    DEFAULT 0       NOT NULL   , 
        char report_code[BATCH_ROWS][33];//                varchar2(32)   DEFAULT '' ''   NOT NULL   , 
        char position_stock_type[BATCH_ROWS][2];//        char(1)        DEFAULT '' ''   NOT NULL   , 
        double current_amount[BATCH_ROWS];//             number(20,4)   DEFAULT 0       NOT NULL   , 
        double original_real_cost[BATCH_ROWS];//         number(18,2)   DEFAULT 0       NOT NULL   ,       
        double original_real_profit[BATCH_ROWS];//       number(18,2)   DEFAULT 0       NOT NULL   ,         
        double total_buy_amount[BATCH_ROWS];//           number(20,4)   DEFAULT 0       NOT NULL   , 
        double total_sale_amount[BATCH_ROWS];//          number(20,4)   DEFAULT 0       NOT NULL   , 
        double total_buy_balance[BATCH_ROWS];//          number(18,2)   DEFAULT 0       NOT NULL   , 
        double total_sale_balance[BATCH_ROWS];//         number(18,2)   DEFAULT 0       NOT NULL   
    } InstancestockRecord;
    InstancestockRecord *lpInstancestockRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpInstancestockRecord =  new InstancestockRecord();
    if (NULL == lpInstancestockRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【InstancestockRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpInstancestockRecord, 0, sizeof (InstancestockRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
        select 
            business_date,             
            instance_id,               
            company_id,                
            fund_id,                   
            asset_id,                  
            combi_id,                  
            invest_type,               
            position_type,             
            stockholder_id,                                     
            market_no,                 
            report_code,               
            position_stock_type,       
            current_amount,            
            original_real_cost,                    
            original_real_profit,                         
            total_buy_amount,          
            total_sale_amount,         
            total_buy_balance,         
            total_sale_balance 
        from vo4jc_ftrinstancestock;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpInstancestockRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpInstancestockRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpInstancestockRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_instancestock_qh(
                    business_date,             
                    instance_id,               
                    company_id,                
                    fund_id,                   
                    asset_id,                  
                    combi_id,                  
                    invest_type,               
                    position_type,             
                    stockholder_id,                           
                    market_no,                 
                    report_code,               
                    position_stock_type,       
                    current_amount,            
                    original_real_cost,           
                    original_real_profit,             
                    total_buy_amount,          
                    total_sale_amount,         
                    total_buy_balance,         
                    total_sale_balance) 
             values(:lpInstancestockRecord->business_date,					        
                    :lpInstancestockRecord->instance_id,               
                    :lpInstancestockRecord->company_id,                
                    :lpInstancestockRecord->fund_id,                   
                    :lpInstancestockRecord->asset_id,                  
                    :lpInstancestockRecord->combi_id,                  
                    rtrim(:lpInstancestockRecord->invest_type),               
                    rtrim(:lpInstancestockRecord->position_type),             
                    rtrim(:lpInstancestockRecord->stockholder_id),                          
                    :lpInstancestockRecord->market_no,                 
                    rtrim(:lpInstancestockRecord->report_code),               
                    rtrim(:lpInstancestockRecord->position_stock_type),       
                    :lpInstancestockRecord->current_amount,            
                    :lpInstancestockRecord->original_real_cost,          
                    :lpInstancestockRecord->original_real_profit,            
                    :lpInstancestockRecord->total_buy_amount,          
                    :lpInstancestockRecord->total_sale_amount,         
                    :lpInstancestockRecord->total_buy_balance,         
                    :lpInstancestockRecord->total_sale_balance);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpInstancestockRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpInstancestockRecord;
    return true;
}

bool CInstancestockQh::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '||V_TABLE_NAME_O4||' (' ||"
            "                    ' business_date,' ||  "             
            "                    ' instance_id,' ||  "               
            "                    ' company_id,' ||  "                
            "                    ' fund_id,' ||  "                   
            "                    ' asset_id,' ||  "                  
            "                    ' combi_id,' ||  "                  
            "                    ' invest_type,' ||  "               
            "                    ' position_type,' ||  "             
            "                    ' stockholder_id,' ||  "                          
            "                    ' market_no,' ||  "                 
            "                    ' report_code,' ||  "               
            "                    ' position_stock_type,' ||  "       
            "                    ' current_amount,' ||  "            
            "                    ' original_real_cost,' ||  "          
            "                    ' original_real_profit,' ||  "         
            "                    ' total_buy_amount,' ||  "          
            "                    ' total_sale_amount,' ||  "         
            "                    ' total_buy_balance,' ||  "         
            "                    ' total_sale_balance) ' ||  "    
            "               ' select ' ||"
            "                    ' business_date,' ||  "             
            "                    ' instance_id,' ||  "               
            "                    ' company_id,' ||  "                
            "                    ' fund_id,' ||  "                   
            "                    ' asset_id,' ||  "                  
            "                    ' combi_id,' ||  "                  
            "                    ' invest_type,' ||  "               
            "                    ' position_type,' ||  "             
            "                    ' stockholder_id,' ||  "                        
            "                    ' market_no,' ||  "                 
            "                    ' report_code,' ||  "               
            "                    ' position_stock_type,' ||  "       
            "                    ' current_amount,' ||  "            
            "                    ' original_real_cost,' ||  "          
            "                    ' original_real_profit,' ||  "      
            "                    ' total_buy_amount,' ||  "          
            "                    ' total_sale_amount,' ||  "         
            "                    ' total_buy_balance,' ||  "         
            "                    ' total_sale_balance ' ||  "   
            "               ' from ' || V_TABLE_NAME_TMP;"
            "  COMMIT;"
            "END;", m_sTmpTable, m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


