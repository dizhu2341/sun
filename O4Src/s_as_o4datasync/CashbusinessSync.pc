#include "CashbusinessSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CCashbusinessSync::CCashbusinessSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tcashbusiness");
    strcpy(m_sSrcView, "VO4JC_CASHBUSINESS");
    strcpy(m_sTmpTable, "sync_cashbusiness");
    strcpy(m_sDstTable, "uft_tcashbusiness");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CCashbusinessSync::~CCashbusinessSync()
{
}

bool CCashbusinessSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct CashbusinessRecord
    {
        int business_date[BATCH_ROWS];
        int busin_no[BATCH_ROWS];
        int company_id[BATCH_ROWS];
        int fund_id[BATCH_ROWS];
        int asset_id[BATCH_ROWS];
        char balance_type[BATCH_ROWS][2];
        int capital_account_id[BATCH_ROWS];
        char currency_no[BATCH_ROWS][4];
        char busin_op_flag[BATCH_ROWS][4];
        double occur_balance[BATCH_ROWS];
        double occur_share[BATCH_ROWS];
        int operate_enable_date[BATCH_ROWS];
        int enable_point[BATCH_ROWS];
        int expire_date[BATCH_ROWS];
        int expire_point[BATCH_ROWS];
        char mature_enable_flag[BATCH_ROWS][2];
        int operator_no[BATCH_ROWS];
        int occur_time[BATCH_ROWS];
        char future_influencet0_flag[BATCH_ROWS][2];
    } CashbusinessRecord;
    CashbusinessRecord *lpCashbusinessRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpCashbusinessRecord =  new CashbusinessRecord();
    if (NULL == lpCashbusinessRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【CashbusinessRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpCashbusinessRecord, 0, sizeof (CashbusinessRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
            select 
                business_date, 
                busin_no,
                company_id,
                fund_id, 
                asset_id, 
                balance_type, 
                capital_account_id,
                currency_no, 
                busin_op_flag, 
                occur_balance, 
                occur_share, 
                operate_enable_date, 
                enable_point, 
                expire_date, 
                expire_point, 
                mature_enable_flag,
                operator_no,
                occur_time,
                future_influencet0_flag
            from VO4JC_CASHBUSINESS;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpCashbusinessRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpCashbusinessRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpCashbusinessRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
            insert into sync_cashbusiness( business_date, 
                                           busin_no,
                                           company_id,
                                           fund_id, 
                                           asset_id, 
                                           balance_type, 
                                           capital_account_id,
                                           currency_no, 
                                           busin_op_flag, 
                                           occur_balance, 
                                           occur_share, 
                                           operate_enable_date, 
                                           enable_point, 
                                           expire_date, 
                                           expire_point, 
                                           mature_enable_flag,
                                           operator_no,
                                           occur_time,
                                           future_influencet0_flag)
            values(:lpCashbusinessRecord->business_date,
                   :lpCashbusinessRecord->busin_no,
                   :lpCashbusinessRecord->company_id,
                   :lpCashbusinessRecord->fund_id,
                   :lpCashbusinessRecord->asset_id,
                   rtrim(:lpCashbusinessRecord->balance_type),
                   :lpCashbusinessRecord->capital_account_id,
                   rtrim(:lpCashbusinessRecord->currency_no),
                   rtrim(:lpCashbusinessRecord->busin_op_flag),
                   :lpCashbusinessRecord->occur_balance,
                   :lpCashbusinessRecord->occur_share,
                   :lpCashbusinessRecord->operate_enable_date,
                   :lpCashbusinessRecord->enable_point,
                   :lpCashbusinessRecord->expire_date,
                   :lpCashbusinessRecord->expire_point,
                   rtrim(:lpCashbusinessRecord->mature_enable_flag),
                   :lpCashbusinessRecord->operator_no,
                   :lpCashbusinessRecord->occur_time,
                   rtrim(:lpCashbusinessRecord->future_influencet0_flag));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpCashbusinessRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpCashbusinessRecord;
    return true;
}

bool CCashbusinessSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "  V_BUSINESS_DATE   NUMBER(8);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            ""
            " SELECT T.BUSINESS_DATE INTO V_BUSINESS_DATE FROM JC_TMARKETINFO T WHERE T.MARKET_NO=1;"
            ""
            "  EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "		'BUSINESS_DATE,' ||"
            "       'BUSIN_NO,' ||"
            "       'COMPANY_ID,' ||"
            "       'FUND_ID,' ||"
            "       'ASSET_ID,' ||"
            "       'balance_type,' ||"
            "       'CAPITAL_ACCOUNT_ID,' ||"
            "       'CURRENCY_NO,' ||"
            "       'BUSIN_OP_FLAG,' ||"
            "       'OCCUR_BALANCE,' ||"
            "		'OCCUR_SHARE,OPERATE_ENABLE_DATE,ENABLE_POINT,EXPIRE_DATE,EXPIRE_POINT,MATURE_ENABLE_FLAG, OPERATOR_NO, OCCUR_TIME, FUTURE_INFLUENCET0_FLAG)	' ||"
            "		'SELECT '||V_BUSINESS_DATE||', T1.BUSIN_NO, T1.COMPANY_ID, T1.FUND_ID, T1.ASSET_ID, '||"           
            "       'T1.balance_type, ' ||"
            "       'T1.CAPITAL_ACCOUNT_ID, T1.CURRENCY_NO, T1.BUSIN_OP_FLAG, T1.OCCUR_BALANCE, T1.OCCUR_SHARE,	'	|| "
            "		'T1.OPERATE_ENABLE_DATE, T1.ENABLE_POINT, T1.EXPIRE_DATE, T1.EXPIRE_POINT, T1.MATURE_ENABLE_FLAG, T1.OPERATOR_NO, T1.OCCUR_TIME, T1.FUTURE_INFLUENCET0_FLAG	'	||"
            "       'FROM  '|| V_TABLE_NAME_TMP || ' T1'; "
            "  COMMIT;"
            "END;", m_sTmpTable, m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


