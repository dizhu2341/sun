#include "BusinessdealconfigSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CBusinessdealconfigSync::CBusinessdealconfigSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tbusinessdealconfig");
    strcpy(m_sSrcView, "VO4JC_BUSINESSDEALCONFIG");
    strcpy(m_sTmpTable, "sync_businessdealconfig");
    strcpy(m_sDstTable, "uft_tbusinessdealconfig");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CBusinessdealconfigSync::~CBusinessdealconfigSync()
{
}

bool CBusinessdealconfigSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct BusinessdealconfigRecord
    {
        char market_no[BATCH_ROWS][2];
        char stock_type[BATCH_ROWS][3];
        char entrust_direction[BATCH_ROWS][3];
        int dimension_id[BATCH_ROWS];
        int clear_speed[BATCH_ROWS];
        int asset_settle_date[BATCH_ROWS];
        char asset_settle_point[BATCH_ROWS][2];
        char cash_control_type[BATCH_ROWS][2];
        char stock_control_type[BATCH_ROWS][2];
        char cash_add_type[BATCH_ROWS][2];
        char stock_add_type[BATCH_ROWS][2];
        char add_point[BATCH_ROWS][2];
        char market_cash_diff[BATCH_ROWS][2];
        char market_cash_add_type[BATCH_ROWS][2];
        char contain_market [BATCH_ROWS][9];
    } BusinessdealconfigRecord;
    BusinessdealconfigRecord *lpBusinessdealconfigRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpBusinessdealconfigRecord =  new BusinessdealconfigRecord();
    if (NULL == lpBusinessdealconfigRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【BusinessdealconfigRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpBusinessdealconfigRecord, 0, sizeof (BusinessdealconfigRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR select market_no, stock_type, entrust_direction, dimension_id, clear_speed, asset_settle_date, asset_settle_point, 
    cash_control_type, stock_control_type, cash_add_type, stock_add_type, add_point, market_cash_diff, market_cash_add_type, contain_market  from VO4JC_BUSINESSDEALCONFIG;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpBusinessdealconfigRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpBusinessdealconfigRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpBusinessdealconfigRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_businessdealconfig(market_no, stock_type, entrust_direction, dimension_id, clear_speed, asset_settle_date, asset_settle_point, cash_control_type, stock_control_type, cash_add_type, stock_add_type, add_point, market_cash_diff, market_cash_add_type, contain_market )
             values(rtrim(:lpBusinessdealconfigRecord->market_no),
										rtrim(:lpBusinessdealconfigRecord->stock_type),
										rtrim(:lpBusinessdealconfigRecord->entrust_direction),
										:lpBusinessdealconfigRecord->dimension_id,
										:lpBusinessdealconfigRecord->clear_speed,
										:lpBusinessdealconfigRecord->asset_settle_date,
										rtrim(:lpBusinessdealconfigRecord->asset_settle_point),
										rtrim(:lpBusinessdealconfigRecord->cash_control_type),
										rtrim(:lpBusinessdealconfigRecord->stock_control_type),
										rtrim(:lpBusinessdealconfigRecord->cash_add_type),
										rtrim(:lpBusinessdealconfigRecord->stock_add_type),
										rtrim(:lpBusinessdealconfigRecord->add_point),
										rtrim(:lpBusinessdealconfigRecord->market_cash_diff),
										rtrim(:lpBusinessdealconfigRecord->market_cash_add_type),
										rtrim(:lpBusinessdealconfigRecord->contain_market ));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpBusinessdealconfigRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpBusinessdealconfigRecord;
    return true;
}

bool CBusinessdealconfigSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "  '  market_no,stock_type,entrust_direction,dimension_id,clear_speed,asset_settle_date, '  ||"
            "  '  asset_settle_point,cash_control_type,stock_control_type,cash_add_type,stock_add_type,add_point, '  ||"
            "  '  market_cash_diff,market_cash_add_type,contain_market ) '  ||"
            "  ' select ' ||"
            "  '   t2.market_no, ' ||"
            "  '   t4.stock_type, ' ||"
            "  '   t3.entrust_direction, ' ||"
            "  '   t1.dimension_id, ' ||"
            "  '   t1.clear_speed, ' ||"
            "  '   t1.asset_settle_date, ' ||"
            "  '   nvl(t1.asset_settle_point, '' ''), ' ||"
            "  '   nvl(t1.cash_control_type, '' ''), ' ||"
            "  '   nvl(t1.stock_control_type, '' ''), ' ||"
            "  '   nvl(t1.cash_add_type, '' ''), ' ||"
            "  '   nvl(t1.stock_add_type, '' ''), ' ||"
            "  '   nvl(t1.add_point, '' ''), ' ||"
            "  '   nvl(t1.market_cash_diff, '' ''), ' ||"
            "  '   nvl(t1.market_cash_add_type, '' ''), ' ||"
            "  '   nvl(t1.contain_market, '' '') ' ||"
            "  '  from sync_businessdealconfig t1, jc_tconvertmarketno t2, jc_tconvertentrustdir t3, jc_tconvertstocktype t4 ' || "
            "  '  where 1=1 ' ||"
            "  '    and t1.stock_type = t4.stock_type_src ' || "
            "  '    and t1.entrust_direction = t3.entrust_direction_src ' || "
            "  '    and t1.market_no = t2.market_no_src '; "
            "  COMMIT;"
            ""
            "END;", m_sTmpTable, m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


