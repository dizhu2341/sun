#include "OptiondepositsetSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

COptiondepositsetSync::COptiondepositsetSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "toptiondepositset");
    strcpy(m_sSrcView, "VO4JC_OPTIONDEPOSITSET");
    strcpy(m_sTmpTable, "sync_optiondepositset");
    strcpy(m_sDstTable, "jc_toptiondepositset");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

COptiondepositsetSync::~COptiondepositsetSync()
{
}

bool COptiondepositsetSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct OptiondepositsetRecord
    {
        char market_no[BATCH_ROWS][2];
        char report_code[BATCH_ROWS][33];
        char stockholder_id[BATCH_ROWS][21];
        char seat_id[BATCH_ROWS][21];
        char target_type[BATCH_ROWS][5];
        char stock_type[BATCH_ROWS][3];
        double deposit_up_ratio[BATCH_ROWS];
    } OptiondepositsetRecord;
    OptiondepositsetRecord *lpOptiondepositsetRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpOptiondepositsetRecord = new OptiondepositsetRecord();
    if (NULL == lpOptiondepositsetRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【OptiondepositsetRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpOptiondepositsetRecord, 0, sizeof (OptiondepositsetRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                    select market_no, report_code, stockholder_id, seat_id, target_type, stock_type, deposit_up_ratio
                    from VO4JC_OPTIONDEPOSITSET;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpOptiondepositsetRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpOptiondepositsetRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpOptiondepositsetRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_optiondepositset(market_no, report_code, stockholder_id, seat_id, target_type, stock_type, deposit_up_ratio)
             values(rtrim(:lpOptiondepositsetRecord->market_no),
										rtrim(:lpOptiondepositsetRecord->report_code),
										rtrim(:lpOptiondepositsetRecord->stockholder_id),
										rtrim(:lpOptiondepositsetRecord->seat_id),
										rtrim(:lpOptiondepositsetRecord->target_type),
										rtrim(:lpOptiondepositsetRecord->stock_type),
										:lpOptiondepositsetRecord->deposit_up_ratio);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpOptiondepositsetRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpOptiondepositsetRecord;
    return true;
}

bool COptiondepositsetSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_START_INTER_CODE NUMBER := 0;"
            "  V_INIT_TYPE       CHAR(1);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "  V_INIT_DATE       NUMBER(8);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  V_INIT_TYPE      := '%c';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  SELECT MAX(TO_NUMBER(SUBSTR(TO_CHAR(INTER_CODE), 1, 7)))"
            "    INTO V_START_INTER_CODE"
            "    FROM (SELECT INTER_CODE,"
            "                 CASE"
            "                   WHEN MARKET_NO IN (1, 2, 5) AND LENGTH(REPORT_CODE) <= 6 AND"
            "                        REGEXP_LIKE(REPORT_CODE, '^[0-9]+$') THEN"
            "                    1"
            "                   ELSE"
            "                    0"
            "                 END MM"
            "            FROM JC_TCONVERTINTERCODE)"
            "   WHERE MM = 0;"
            "  V_START_INTER_CODE := CASE"
            "                          WHEN V_START_INTER_CODE IS NULL THEN"
            "                           0"
            "                          ELSE"
            "                           V_START_INTER_CODE - 1000000"
            "                        END;"
            ""
            "  IF V_INIT_TYPE <> '1' THEN"
            "    EXECUTE IMMEDIATE 'INSERT INTO JC_TCONVERTINTERCODE(MARKET_NO,REPORT_CODE,INTER_CODE)' ||"
            "                      '  SELECT V.MARKET_NO,' ||"
            "                      '         V.REPORT_CODE,' ||"
            "                      '         SF_CREATE_INTERCODE_WITH_INDEX(V.MARKET_NO,' ||"
            "                      '                                        V.REPORT_CODE,' ||"
            "                      '                                        '||V_START_INTER_CODE||' + V.RN)' ||"
            "                      '    FROM (SELECT T1.*, T2.INTER_CODE,ROW_NUMBER() OVER(ORDER BY CASE WHEN t2.INTER_CODE IS NULL THEN 1 ELSE 2 END) RN' ||"
            "                      '            FROM (SELECT DISTINCT A.MARKET_NO MARKET_NO_SRC,' ||"
            "                      '                                  B.MARKET_NO,' ||"
            "                      '                                  A.REPORT_CODE' ||"
            "                      '                    FROM SYNC_OPTIONDEPOSITSET A, JC_TCONVERTMARKETNO B' ||"
            "                      '                   WHERE A.MARKET_NO = B.MARKET_NO_SRC) T1' ||"
            "                      '            LEFT JOIN JC_TCONVERTINTERCODE T2' ||"
            "                      '              ON T1.MARKET_NO = T2.MARKET_NO' ||"
            "                      '             AND T1.REPORT_CODE = T2.REPORT_CODE) V' ||"
            "                      '             WHERE V.INTER_CODE IS NULL';"
            "  END IF;"
            "  SELECT INIT_DATE INTO V_INIT_DATE FROM JC_TSYSTEMINFO;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "       '   SYS_DATE, MARKET_NO, INTER_CODE, STOCKHOLDER_ID, SEAT_ID, OPTION_TYPE, STOCK_TYPE, DEPOSIT_UP_RATIO)'   ||"
            "       '   WITH V_OPTIONDEPOSITSET AS('   ||"
            "       '   SELECT T12.MARKET_NO, T11.MARKET_NO MARKET_NO_SRC, T11.REPORT_CODE REPORT_CODE, NVL(T11.STOCKHOLDER_ID, ''*'') STOCKHOLDER_ID,'   ||"
            "       '   NVL(T11.SEAT_ID, ''*'') SEAT_ID, TO_NUMBER(NVL(T13.SUB_DIC_NO, ''0'')) OPTION_TYPE, T14.STOCK_TYPE, T11.DEPOSIT_UP_RATIO'   ||"
            "       '   FROM SYNC_OPTIONDEPOSITSET T11, JC_TCONVERTMARKETNO T12, JC_TCONVERTDIC T13, JC_TCONVERTSTOCKTYPE T14'   ||"
            "       '   WHERE T11.MARKET_NO = T12.MARKET_NO_SRC'   ||"
            "       '   AND T11.TARGET_TYPE = T13.SUB_DIC_SRC'   ||"
            "       '   AND T11.STOCK_TYPE = T14.STOCK_TYPE_SRC'   ||"
            "       '   AND T13.DIC_NO = 610081)'   ||"
            "       '   SELECT '||V_INIT_DATE||', T1.MARKET_NO,'   ||"
            "       '   CASE WHEN T1.MARKET_NO_SRC = ''*'' THEN  -1 WHEN T1.REPORT_CODE = ''*'' THEN  -1 ELSE T2.INTER_CODE END AS INTER_CODE,'   ||"
            "       '   T1.STOCKHOLDER_ID, T1.SEAT_ID, T1.OPTION_TYPE, T1.STOCK_TYPE, T1.DEPOSIT_UP_RATIO'   ||"
            "       '   FROM V_OPTIONDEPOSITSET T1, JC_TCONVERTINTERCODE T2' || "
            "       '   WHERE T1.MARKET_NO = T2.MARKET_NO(+)  '   ||"
            "       '   AND T1.REPORT_CODE = T2.REPORT_CODE(+) ';  "
            "  COMMIT;"
            "END;", m_sDstTable, m_cSyncFlag);

    if (m_cSyncFlag == '2')
    {
        hsLockCreateInterCode();
    }
    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (m_cSyncFlag == '2')
    {
        hsUnlockCreateInterCode();
    }
    
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    
    if (!RecoverTableIndex())
        return false;

    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


