#include "FuturekindSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CFuturekindSync::CFuturekindSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tfuturekind");
    strcpy(m_sSrcView, "VO4JC_FUTUREKIND");
    strcpy(m_sTmpTable, "sync_futurekind");
    strcpy(m_sDstTable, "jc_tfuturekind");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CFuturekindSync::~CFuturekindSync()
{
}

bool CFuturekindSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct FuturekindRecord
    {
        int kind_no[BATCH_ROWS];
        char market_no[BATCH_ROWS][2];
        char kind_code[BATCH_ROWS][65];
        char kind_name[BATCH_ROWS][129];
        double market_buy_max[BATCH_ROWS];
        double market_sale_max[BATCH_ROWS];
        double buy_max[BATCH_ROWS];
        double sale_max[BATCH_ROWS];
        int multiple[BATCH_ROWS];
        char datecalc_type[BATCH_ROWS][3];
        char contract_rule[BATCH_ROWS][21];
        int future_kind_group[BATCH_ROWS];
        char trade_month[BATCH_ROWS][32];
        char future_kind_status[BATCH_ROWS][2];
        char stock_type[BATCH_ROWS][3];
    } FuturekindRecord;
    FuturekindRecord *lpFuturekindRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpFuturekindRecord = new FuturekindRecord();
    if (NULL == lpFuturekindRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【FuturekindRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpFuturekindRecord, 0, sizeof (FuturekindRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
        select 
            kind_no, 
            market_no, 
            kind_code, 
            kind_name, 
            market_buy_max, 
            market_sale_max, 
            buy_max, 
            sale_max, 
            multiple, 
            datecalc_type, 
            contract_rule, 
            future_kind_group,
            trade_month,
            future_kind_status,
            stock_type
        from VO4JC_FUTUREKIND;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpFuturekindRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpFuturekindRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFuturekindRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_futurekind(kind_no, market_no, kind_code, kind_name, market_buy_max, market_sale_max, buy_max, sale_max, multiple, datecalc_type, contract_rule, future_kind_group, trade_month, future_kind_status, stock_type)
             values(:lpFuturekindRecord->kind_no,
										rtrim(:lpFuturekindRecord->market_no),
										rtrim(:lpFuturekindRecord->kind_code),
										rtrim(:lpFuturekindRecord->kind_name),
										:lpFuturekindRecord->market_buy_max,
										:lpFuturekindRecord->market_sale_max,
										:lpFuturekindRecord->buy_max,
										:lpFuturekindRecord->sale_max,
										:lpFuturekindRecord->multiple,
										rtrim(:lpFuturekindRecord->datecalc_type),
										rtrim(:lpFuturekindRecord->contract_rule),
										:lpFuturekindRecord->future_kind_group,
                                        rtrim(:lpFuturekindRecord->trade_month),
                                        rtrim(:lpFuturekindRecord->future_kind_status),
                                        rtrim(:lpFuturekindRecord->stock_type));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFuturekindRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpFuturekindRecord;
    return true;
}

bool CFuturekindSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;
    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "   '   FUTURE_KIND_ID,MARKET_NO,FUTURE_KIND_CODE,FUTURE_KIND_NAME,MARKET_BUY_MAX,'   ||"
            "   '   MARKET_SALE_MAX,BUY_MAX,SALE_MAX,MULTIPLE,DATECALC_TYPE,CONTRACT_RULE,FUTURE_KIND_GROUP, TRADE_MONTH, future_kind_status, stock_type)'   ||"
            "   '   SELECT T1.KIND_NO, T2.MARKET_NO, NVL(T1.KIND_CODE,'' ''), NVL(T1.KIND_NAME,'' ''), T1.MARKET_BUY_MAX, T1.MARKET_SALE_MAX, T1.BUY_MAX,'   ||"
            "   '   T1.SALE_MAX, T1.MULTIPLE, TO_NUMBER(NVL(T1.DATECALC_TYPE, ''0'')) DATECALC_TYPE,NVL(T1.CONTRACT_RULE,'' ''), T1.FUTURE_KIND_GROUP, NVL(T1.TRADE_MONTH, ''1''), T1.future_kind_status, T3.stock_type '   ||"
            "   '   FROM SYNC_FUTUREKIND T1,JC_TCONVERTMARKETNO T2, jc_tconvertstocktype T3'   ||"
            "   '   WHERE T1.MARKET_NO = T2.MARKET_NO_SRC'||   "
            "   '   AND T1.STOCK_TYPE = T3.STOCK_TYPE_SRC'; "
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;

    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


