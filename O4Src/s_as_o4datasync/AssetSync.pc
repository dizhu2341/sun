/* 
 * File:   AssetSync.pc
 * Author: sunhm15168
 * Description: 资产单元同步类
 * Created on 2016年3月29日, 下午6:27
 */

#include "AssetSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CAssetSync::CAssetSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tasset");
    strcpy(m_sSrcView, "VO4JC_ASSET");
    strcpy(m_sTmpTable, "sync_asset");
    strcpy(m_sDstTable, "jc_tasset");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CAssetSync::~CAssetSync()
{

}

bool CAssetSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;

    typedef struct AssetRecord
    {
        int   asset_id[BATCH_ROWS];
        int   fund_id[BATCH_ROWS];
        char  asset_code[BATCH_ROWS][25];
        char  asset_name[BATCH_ROWS][129];
        char  overdraft[BATCH_ROWS][2];
        char  invest_overdraft[BATCH_ROWS][129];
        char  asset_status[BATCH_ROWS][2];
        char  credit_asset_flag[BATCH_ROWS][2];
        int   fee_set_id[BATCH_ROWS];
        double ta_allocate_ratio[BATCH_ROWS];
        char   fa_account_no[BATCH_ROWS][11];
        char   uft_trade_flag[BATCH_ROWS][2];
    } AssetRecord;
    AssetRecord *lpAssetRecord;
    EXEC SQL END DECLARE SECTION;
    lpAssetRecord = new AssetRecord();
    if (NULL == lpAssetRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【AssetRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpAssetRecord, 0, sizeof (AssetRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR
        SELECT
        ASSET_ID,                   FUND_ID,                ASSET_CODE,              ASSET_NAME,            OVERDRAFT, 
        INVEST_OVERDRAFT,           ASSET_STATUS,           CREDIT_ASSET,            SET_ID,                TA_ALLOCATE_RATIO,      FA_ACCOUNT_NO,      UFT_TRADE_FLAG 
        FROM VO4JC_ASSET;
    EXEC SQL OPEN CUR_READDATA;

    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpAssetRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpAssetRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpAssetRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_asset(
                    asset_id,                  fund_id,                asset_code,                 asset_name,         overdraft,
                    invest_overdraft,          asset_status,           credit_asset,          set_id,         ta_allocate_ratio,       fa_account_no,       uft_trade_flag)
             values(:lpAssetRecord->asset_id,
                    :lpAssetRecord->fund_id,           
                    rtrim(:lpAssetRecord->asset_code), 
                    rtrim(:lpAssetRecord->asset_name),
                    rtrim(:lpAssetRecord->overdraft),
                    rtrim(:lpAssetRecord->invest_overdraft),
                    rtrim(:lpAssetRecord->asset_status),
                    rtrim(:lpAssetRecord->credit_asset_flag),
                    :lpAssetRecord->fee_set_id,
                    :lpAssetRecord->ta_allocate_ratio,
                    rtrim(:lpAssetRecord->fa_account_no),
                    rtrim(:lpAssetRecord->uft_trade_flag));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpAssetRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    delete lpAssetRecord;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    return true;
}

bool CAssetSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始...");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;

    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME      VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'DELETE FROM ' || V_TABLE_NAME;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME || '(' ||   "
            "                       '	ASSET_ID,                   FUND_ID,                    ASSET_CODE,        ASSET_NAME,' || "
            "                       '	OVERDRAFT,                  INVEST_OVERDRAFT,           ASSET_STATUS,      CREDIT_ASSET_FLAG,' || "
            "                       '	FEE_SET_ID,                 TA_ALLOCATE_RATIO,          FA_ACCOUNT_NO, ' ||"
            "                       '   REMARK,                     SELF_ACCOUNT_ID,            TRUST_FLAG,             PRESERVE_ASSET_TYPE,        CASH_POOL_FLAG,     TRANSFER_ORDER,  '  ||"
            "                       '   CASH_AVAILABLE_TYPE,        CASH_AVAILABLE_VALUE,       T1_CASH_AVAILABLE_TYPE, T1_CASH_AVAILABLE_VALUE,    INS_BRANCH_ORGAN,  UFT_TRADE_FLAG)'	||"
            "                       '	SELECT ' || "
            "                       '	ASSET_ID,                           FUND_ID,                      NVL(ASSET_CODE,'' ''),            NVL(ASSET_NAME,'' ''),          NVL(DECODE(OVERDRAFT, ''2'', ''0'', OVERDRAFT),'' ''),' || "
            "                       '	NVL(INVEST_OVERDRAFT, '' ''),       NVL(ASSET_STATUS,'' ''),      NVL(CREDIT_ASSET,'' ''),          NVL(SET_ID, 0),                 TA_ALLOCATE_RATIO,               NVL(FA_ACCOUNT_NO,'' ''),'|| "
            "                       '   '' '' REMARK,0 SELF_ACCOUNT_ID,     ''1'' TRUST_FLAG,             '' '' PRESERVE_ASSET_TYPE,        ''0'' CASH_POOL_FLAG,           0 TRANSFER_ORDER,'	||"
            "                       '   ''4'' CASH_AVAILABLE_TYPE,          0 CASH_AVAILABLE_VALUE,        ''4'' T1_CASH_AVAILABLE_TYPE,    0 T1_CASH_AVAILABLE_VALUE,      '' '' INS_BRANCH_ORGAN,         NVL(UFT_TRADE_FLAG,'' '') '	||"
            "                       '	FROM  SYNC_ASSET';"
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成...");
    return true;

}



