#include "OperatorstatusSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

COperatorstatusSync::COperatorstatusSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tuserstate");
    strcpy(m_sSrcView, "VO4JC_USERSTATE");
    strcpy(m_sTmpTable, "sync_operatorstatus");
    strcpy(m_sDstTable, "jc_toperatorstatus");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

COperatorstatusSync::~COperatorstatusSync()
{
}

bool COperatorstatusSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct OperatorstatusRecord
    {
        int login_id[BATCH_ROWS];
        int operator_no[BATCH_ROWS];
        int login_date[BATCH_ROWS];
        int login_time[BATCH_ROWS];
        int logout_date[BATCH_ROWS];
        int logout_time[BATCH_ROWS];
        int refresh_date[BATCH_ROWS];
        int refresh_time[BATCH_ROWS];
        char login_state[BATCH_ROWS][2];
        char computer_name[BATCH_ROWS][31];
        char mac[BATCH_ROWS][21];
        char ip_address[BATCH_ROWS][16];
        char client_type[BATCH_ROWS][2];
        char volserial_no[BATCH_ROWS][129];
        char terminal_info[BATCH_ROWS][1025];
    } OperatorstatusRecord;
    OperatorstatusRecord *lpOperatorstatusRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpOperatorstatusRecord = new OperatorstatusRecord();
    if (NULL == lpOperatorstatusRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【OperatorstatusRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpOperatorstatusRecord, 0, sizeof (OperatorstatusRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                    select login_id, operator_no, login_date, login_time, logout_date, logout_time, refresh_date, refresh_time, login_state, computer_name, mac, ip_address, client_type, volserial_no, terminal_info
                    from VO4JC_USERSTATE;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpOperatorstatusRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpOperatorstatusRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpOperatorstatusRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_operatorstatus(login_id, operator_no, login_date, login_time, logout_date, logout_time, refresh_date, refresh_time, login_state, computer_name, mac, ip_address, client_type, volserial_no, terminal_info)
             values(:lpOperatorstatusRecord->login_id,
										:lpOperatorstatusRecord->operator_no,
										:lpOperatorstatusRecord->login_date,
										:lpOperatorstatusRecord->login_time,
										:lpOperatorstatusRecord->logout_date,
										:lpOperatorstatusRecord->logout_time,
										:lpOperatorstatusRecord->refresh_date,
										:lpOperatorstatusRecord->refresh_time,
										rtrim(:lpOperatorstatusRecord->login_state),
										rtrim(:lpOperatorstatusRecord->computer_name),
										rtrim(:lpOperatorstatusRecord->mac),
										rtrim(:lpOperatorstatusRecord->ip_address),
										rtrim(:lpOperatorstatusRecord->client_type),
										rtrim(:lpOperatorstatusRecord->volserial_no),
										rtrim(:lpOperatorstatusRecord->terminal_info));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpOperatorstatusRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpOperatorstatusRecord;
    return true;
}

bool COperatorstatusSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "       '   LOGIN_ID, OPERATOR_NO, CLIENT_TYPE, LOGIN_DATE, LOGIN_TIME, LOGOUT_DATE, LOGOUT_TIME, REFRESH_DATE, '   ||"
            "       '   REFRESH_TIME, LOGIN_STATE, COMPUTER_NAME, MAC, IP_ADDRESS, VOLSERIAL_NO, TERMINAL_INFO)'   ||"
            "       '   SELECT T1.LOGIN_ID, T1.OPERATOR_NO, NVL(T1.CLIENT_TYPE,'' ''), T1.LOGIN_DATE, T1.LOGIN_TIME, T1.LOGOUT_DATE, T1.LOGOUT_TIME, T1.REFRESH_DATE, '   ||"
            "       '   T1.REFRESH_TIME, NVL(T1.LOGIN_STATE,'' ''), NVL(T1.COMPUTER_NAME,'' ''), NVL(T1.MAC,'' ''), NVL(T1.IP_ADDRESS,'' ''), NVL(T1.VOLSERIAL_NO,'' ''), NVL(T1.TERMINAL_INFO,'' '') '   ||"
            "       '   FROM  SYNC_OPERATORSTATUS T1';  "
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


