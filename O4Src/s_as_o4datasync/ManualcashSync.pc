#include "ManualcashSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>
//功能号2615128

CManualcashSync::CManualcashSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tcashfrozendetail");
    strcpy(m_sSrcView, "VO4JC_CASHFROZENDETAIL");
    strcpy(m_sTmpTable, "sync_manualcash");
    strcpy(m_sDstTable, "uft_tmanualcash");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CManualcashSync::~CManualcashSync()
{
}

bool CManualcashSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct ManualcashRecord
    {
        int business_date[BATCH_ROWS];
        int frozen_serial_no[BATCH_ROWS];
        int busin_no[BATCH_ROWS];
        int fund_id[BATCH_ROWS];
        int asset_id[BATCH_ROWS];
        char balance_type[BATCH_ROWS][2];
        int capital_account_id[BATCH_ROWS];
        char currency_no[BATCH_ROWS][4];
        char cash_frozen_direction[BATCH_ROWS][2];
        double occur_balance[BATCH_ROWS];
        int frozen_expire_date[BATCH_ROWS];
        int expire_point[BATCH_ROWS];
        char mature_enable_flag[BATCH_ROWS][2];
    } ManualcashRecord;
    ManualcashRecord *lpManualcashRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpManualcashRecord =  new ManualcashRecord();
    if (NULL == lpManualcashRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【ManualcashRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpManualcashRecord, 0, sizeof (ManualcashRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                select 
                    business_date, 
                    frozen_serial_no, 
                    busin_no, 
                    fund_id, 
                    asset_id, 
                    balance_type, 
                    capital_account_id, 
                    currency_no, 
                    cash_frozen_direction, 
                    occur_balance, 
                    frozen_expire_date, 
                    expire_point, 
                    mature_enable_flag 
                from VO4JC_CASHFROZENDETAIL;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpManualcashRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpManualcashRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpManualcashRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_manualcash(business_date, 
                                        frozen_serial_no, 
                                        busin_no, 
                                        fund_id, 
                                        asset_id, 
                                        balance_type, 
                                        capital_account_id, 
                                        currency_no, 
                                        cash_frozen_direction, 
                                        occur_balance, 
                                        frozen_expire_date, 
                                        expire_point, 
                                        mature_enable_flag)
             values(:lpManualcashRecord->business_date,
                    :lpManualcashRecord->frozen_serial_no,
                    :lpManualcashRecord->busin_no,
                    :lpManualcashRecord->fund_id,
                    :lpManualcashRecord->asset_id,
                    rtrim(:lpManualcashRecord->balance_type),
                    :lpManualcashRecord->capital_account_id,
                    rtrim(:lpManualcashRecord->currency_no),
                    rtrim(:lpManualcashRecord->cash_frozen_direction),
                    :lpManualcashRecord->occur_balance,
                    :lpManualcashRecord->frozen_expire_date,
                    :lpManualcashRecord->expire_point,
                    rtrim(:lpManualcashRecord->mature_enable_flag));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpManualcashRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpManualcashRecord;
    return true;
}

bool CManualcashSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "  V_BUSINESS_DATE   NUMBER(8);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            ""
            " SELECT T.BUSINESS_DATE INTO V_BUSINESS_DATE FROM JC_TMARKETINFO T WHERE T.MARKET_NO=1;"
            ""
            "  EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "  '  BUSINESS_DATE, FROZEN_SERIAL_NO,BUSIN_NO,FUND_ID,ASSET_ID,BALANCE_TYPE,CAPITAL_ACCOUNT_ID,CURRENCY_NO,CASH_FROZEN_DIRECTION, '  ||"
            "  '  OCCUR_BALANCE,FROZEN_EXPIRE_DATE,EXPIRE_POINT,MATURE_ENABLE_FLAG) '  ||"
            "  '  SELECT '||V_BUSINESS_DATE||',T1.FROZEN_SERIAL_NO,T1.BUSIN_NO,T1.FUND_ID,T1.ASSET_ID, ' || "
         
            "   ' T1.balance_type, ' ||"
            "   ' T1.CAPITAL_ACCOUNT_ID,NVL(T1.CURRENCY_NO,''CNY''),NVL(T1.CASH_FROZEN_DIRECTION,'' ''), '  ||"
            "  '  T1.OCCUR_BALANCE,T1.FROZEN_EXPIRE_DATE,T1.EXPIRE_POINT,NVL(T1.MATURE_ENABLE_FLAG,'' '') FROM '|| V_TABLE_NAME_TMP || ' T1';"
            "  COMMIT;"
            "END;", m_sTmpTable, m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


