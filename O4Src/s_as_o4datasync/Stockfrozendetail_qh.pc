#include "Stockfrozendetail_qh.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CStockFrozenDetailQh::CStockFrozenDetailQh(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tstockfrozendetail");
    strcpy(m_sSrcView,  "vo4jc_ftrstockfrozendetail");
    strcpy(m_sTmpTable, "sync_stockfrozendetail_qh");
    strcpy(m_sDstTable, "uft_tstockfrozendetail_qh");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CStockFrozenDetailQh::~CStockFrozenDetailQh()
{}

bool CStockFrozenDetailQh::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    
    EXEC SQL BEGIN DECLARE SECTION;
        int nFetchRows;
       
        typedef struct StockfrozendetailQhRecord
        {
            int business_date[BATCH_ROWS];//            number(8,0)    DEFAULT 0       NOT NULL   , 
            int frozen_serial_no[BATCH_ROWS];//         number(10,0)   DEFAULT 0       NOT NULL   , 
            int busin_no[BATCH_ROWS];//                 number(10,0)   DEFAULT 0       NOT NULL   , 
            int fund_id[BATCH_ROWS];//                  number(8,0)    DEFAULT 0       NOT NULL   , 
            int asset_id[BATCH_ROWS];//                 number(10,0)   DEFAULT 0       NOT NULL   , 
            int combi_id[BATCH_ROWS];//                 number(10,0)   DEFAULT 0       NOT NULL   , 
            char invest_type[BATCH_ROWS][2];//              char(1)        DEFAULT '' ''   NOT NULL   , 
            char position_type[BATCH_ROWS][2];//            char(1)        DEFAULT '' ''   NOT NULL   , 
            char stockholder_id[BATCH_ROWS][21];//           varchar2(20)   DEFAULT '' ''   NOT NULL   ,             
            int market_no[BATCH_ROWS];//                number(8,0)    DEFAULT 0       NOT NULL   , 
            char report_code[BATCH_ROWS][33];//              varchar2(32)   DEFAULT '' ''   NOT NULL   , 
            char stock_frozen_direction[BATCH_ROWS][2];//   char(1)        DEFAULT '' ''   NOT NULL   , 
            double occur_amount[BATCH_ROWS];//             number(20,4)   DEFAULT 0       NOT NULL   , 
            int frozen_expire_date[BATCH_ROWS];//       number(8,0)    DEFAULT 0       NOT NULL   , 
            int expire_point[BATCH_ROWS];//             number(8,0)    DEFAULT 0       NOT NULL     
        } StockfrozendetailQhRecord;
        StockfrozendetailQhRecord * lpStockfrozendetailQhRecord = NULL;
    EXEC SQL END DECLARE SECTION;
    
    // 从O3视图读取数据放入到游标
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
   
    sql_context O3DbContext = m_lpO3Conn->getSQLContext(); // 获取O3数据库连接句柄
    EXEC SQL CONTEXT USE :O3DbContext;
    EXEC SQL DECLARE RESULT CURSOR FOR 
        select
            business_date, 
            frozen_serial_no, 
            busin_no, 
            fund_id, 
            asset_id, 
            combi_id, 
            invest_type, 
            position_type, 
            stockholder_id, 
            market_no, 
            report_code, 
            stock_frozen_direction, 
            occur_amount, 
            frozen_expire_date, 
            expire_point
        from vo4jc_ftrstockfrozendetail;
    EXEC SQL OPEN RESULT;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");
    
    // 申请内存空间
    lpStockfrozendetailQhRecord =  new StockfrozendetailQhRecord();
    if (NULL == lpStockfrozendetailQhRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【StockbusinessRecord】失败", m_sDstTable);
        return false;
    }
    
    // 获取O4数据连接句柄
    sql_context O4DbContext = m_lpO4Conn->getSQLContext();
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 清空内存，并把游标里的结果集放入lpStockBusinessXhRecord指向的内存中，一次放入BATCH_ROWS行数据
        memset(lpStockfrozendetailQhRecord, 0, sizeof (StockfrozendetailQhRecord));
        EXEC SQL CONTEXT USE :O3DbContext;
        EXEC SQL FETCH RESULT into :lpStockfrozendetailQhRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpStockfrozendetailQhRecord;
            return false;
        }
        
        // 如果是最后一次循环，那么nFetchRows就等于m_nRemainRows行数据，m_nRemainRows小于等于BATCH_ROWS
        // 如果不是最后一次循环，那么nFetchRows就等于m_nBatchRows=BATCH_ROWS行数据
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;
        
        // 把lpStockBusinessXhRecord指向的内存里的数据导入到中间表
        EXEC SQL CONTEXT USE :O4DbContext;
        EXEC SQL for :nFetchRows
            insert into sync_stockfrozendetail_qh(
                business_date, 
                frozen_serial_no, 
                busin_no, 
                fund_id, 
                asset_id, 
                combi_id, 
                invest_type, 
                position_type, 
                stockholder_id, 
                market_no, 
                report_code, 
                stock_frozen_direction, 
                occur_amount, 
                frozen_expire_date, 
                expire_point)
            values(
                :lpStockfrozendetailQhRecord->business_date, 
                :lpStockfrozendetailQhRecord->frozen_serial_no, 
                :lpStockfrozendetailQhRecord->busin_no, 
                :lpStockfrozendetailQhRecord->fund_id, 
                :lpStockfrozendetailQhRecord->asset_id, 
                :lpStockfrozendetailQhRecord->combi_id, 
                rtrim(:lpStockfrozendetailQhRecord->invest_type), 
                rtrim(:lpStockfrozendetailQhRecord->position_type), 
                rtrim(:lpStockfrozendetailQhRecord->stockholder_id), 
                :lpStockfrozendetailQhRecord->market_no, 
                rtrim(:lpStockfrozendetailQhRecord->report_code), 
                rtrim(:lpStockfrozendetailQhRecord->stock_frozen_direction), 
                :lpStockfrozendetailQhRecord->occur_amount, 
                :lpStockfrozendetailQhRecord->frozen_expire_date, 
                :lpStockfrozendetailQhRecord->expire_point);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpStockfrozendetailQhRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }
    
    EXEC SQL CONTEXT USE :O3DbContext;
    EXEC SQL CLOSE RESULT;
    delete lpStockfrozendetailQhRecord;
    
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    return true;
}

bool CStockFrozenDetailQh::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
        char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    // 删除O4表的主键和索引
    if (!DropTableIndex())
    {
        return false;
    }
    
    // 获取O4数据库的连接句柄
    sql_context O4DbContext = m_lpO4Conn->getSQLContext();
    EXEC SQL CONTEXT USE :O4DbContext;
    sprintf(sExecSql, 
            "DECLARE"
            "   V_O4_TEMP_TABLE_NAME    VARCHAR2(64);"
            "   V_O4_TABLE_NAME         VARCHAR2(64);"
            "BEGIN"
            "   V_O4_TEMP_TABLE_NAME := '%s';"
            "   V_O4_TABLE_NAME  := '%s';"
            ""
            // 清空O4表数据，并把水位清零
            "   EXECUTE IMMEDIATE 'truncate table ' || V_O4_TABLE_NAME;"
            // 把中间表数据导入到O4表
            "   EXECUTE IMMEDIATE   'INSERT INTO '|| V_O4_TABLE_NAME || '(' || "
            "                            'business_date, ' || "                      
"                            'frozen_serial_no, ' || "        
"                            'busin_no, ' || "               
"                            'fund_id, ' || "                
"                            'asset_id, ' || "               
"                            'combi_id, ' || "               
"                            'invest_type, ' || "            
"                            'position_type, ' || "          
"                            'stockholder_id, ' || "          
"                            'market_no, ' || "              
"                            'report_code, ' || "            
"                            'stock_frozen_direction, ' || " 
"                            'occur_amount, ' || "            
"                            'frozen_expire_date, ' || "     
"                            'expire_point) ' || "            
            "                       ' SELECT ' ||"
            "                            'business_date, ' || "                      
"                            'frozen_serial_no, ' || "        
"                            'busin_no, ' || "               
"                            'fund_id, ' || "                
"                            'asset_id, ' || "               
"                            'combi_id, ' || "               
"                            'invest_type, ' || "            
"                            'position_type, ' || "          
"                            'stockholder_id, ' || "          
"                            'market_no, ' || "              
"                            'report_code, ' || "            
"                            'stock_frozen_direction, ' || " 
"                            'occur_amount, ' || "            
"                            'frozen_expire_date, ' || "     
"                            'expire_point ' || "            
            "                       'FROM '|| V_O4_TEMP_TABLE_NAME ;"
            "   COMMIT;"
            "END;",
            m_sTmpTable, m_sDstTable);
    
    // 执行sql语句
    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        // 重建O4表的主键和索引
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    
    // 重建O4表的主键和索引
    if (!RecoverTableIndex())
    {
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}

