#include "SysparamvalueSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CSysparamvalueSync::CSysparamvalueSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tsysparameter");
    strcpy(m_sSrcView, "VO4JC_SYSPARAMETER");
    strcpy(m_sTmpTable, "sync_sysparamvalue");
    strcpy(m_sDstTable, "jc_tsysparamvalue");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CSysparamvalueSync::~CSysparamvalueSync()
{
}

bool CSysparamvalueSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct SysparamvalueRecord
    {
        int sysparameter_no[BATCH_ROWS];
        char sysparameter_describe[BATCH_ROWS][256];
        char sysparameter_value[BATCH_ROWS][4001];
        char loweast_layer[BATCH_ROWS][2];
    } SysparamvalueRecord;
    SysparamvalueRecord *lpSysparamvalueRecord = NULL;
    char StockTypeArr[4001];
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpSysparamvalueRecord = new SysparamvalueRecord();
    if (NULL == lpSysparamvalueRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【SysparamvalueRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpSysparamvalueRecord, 0, sizeof (SysparamvalueRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                    select sysparameter_no, sysparameter_describe, sysparameter_value, loweast_layer 
                    from VO4JC_SYSPARAMETER;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpSysparamvalueRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");
    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpSysparamvalueRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpSysparamvalueRecord;
            return false;
        }
        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;
        
        for (int i = 0; i < m_nTotalRows; i++)
        {
            if (lpSysparamvalueRecord->sysparameter_no[i] == 810010)
            {
                ConvertStockTypeList(StockTypeArr, lpSysparamvalueRecord->sysparameter_value[i]);
            }
        }

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_sysparamvalue(sysparameter_no, sysparameter_describe, sysparameter_value, loweast_layer)
             values(:lpSysparamvalueRecord->sysparameter_no,
										rtrim(:lpSysparamvalueRecord->sysparameter_describe),
										rtrim(:lpSysparamvalueRecord->sysparameter_value),
										rtrim(:lpSysparamvalueRecord->loweast_layer));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpSysparamvalueRecord;
            return false;
        }
        //对系统参数值810010和40112进行转换
        EXEC SQL update  sync_sysparamvalue set sysparameter_value = :StockTypeArr where sysparameter_no = 810010;
        EXEC SQL update  sync_sysparamvalue set sysparameter_value = (sysparameter_value + 2) where sysparameter_no = 40112;
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpSysparamvalueRecord;
    return true;
}

bool CSysparamvalueSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;
    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "  V_STOCK_LIST      VARCHAR2(4000);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "       '   SYSPARAM_NO, COMPANY_ID, DEPT_ID, PARAM_VALUE)  '    ||"
            "       '   SELECT T1.SYSPARAMETER_NO, -1, -1, T1.SYSPARAMETER_VALUE FROM SYNC_SYSPARAMVALUE T1 WHERE EXISTS(  '    ||"
            "       '   SELECT * FROM JC_TSYSPARAMETER T2 WHERE T2.SYSPARAM_NO = T1.SYSPARAMETER_NO) ';  "
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}

void CSysparamvalueSync::ConvertStockTypeList(char StockTypeArr[4001], char StockTypeSrc[4001])
{
    int nRet = 0;
    int nErrNo = 0;
    char sErrInfo[1025] = {0};
    char sErrPathInfo[4001] = {0};
    char sWhereStr[2048] = {0};
    char sStockTypeList[4000] = {0};

    IF2PackSvr * lpPackService = m_lpContext->GetF2PackSvr();
    IF2Packer * lpInPacker = lpPackService->GetPacker(2);
    IF2Packer * lpOutPacker = lpPackService->GetPacker(2);
    IF2UnPacker * lpOutUnPacker = NULL;
    //查询内存表
    replace(sWhereStr, StockTypeSrc, ",", "','0");
    hs_snprintf(sWhereStr, sizeof (sWhereStr), "'0%s'", sWhereStr);
    hs_snprintf(sWhereStr, sizeof (sWhereStr), "stock_type_src in (%s)", sWhereStr);

    lpInPacker->BeginPack();
    lpInPacker->AddField("table_name", 'S');
    lpInPacker->AddField("column_str", 'S');
    lpInPacker->AddField("where_str", 'S', 2048);
    lpInPacker->AddField("error_pathinfo", 'S', 4000);
    lpInPacker->AddStr("jc_tconvertstocktype");
    lpInPacker->AddStr("stock_type");
    lpInPacker->AddStr(sWhereStr);
    lpInPacker->AddStr(" ");
    lpInPacker->EndPack();

    lpOutPacker->BeginPack();
    nRet = GetMdbData(m_lpContext, lpInPacker->UnPack(), lpOutPacker, &nErrNo, sErrInfo, sErrPathInfo);
    lpOutPacker->EndPack();
    if (nRet != 0)
    {
        SetErrorInfo(SYNC_ERR_OTHER, "【%s】表同步，转换证券类别列表时读取内存表失败【%s】", m_sDstTable, sErrInfo);

        if (lpInPacker)
        {
            free(lpInPacker->GetPackBuf());
            lpInPacker->Release();
        }
        if (lpOutPacker)
        {
            free(lpOutPacker->GetPackBuf());
            lpOutPacker->Release();
        }
        return;
    }

    //重新组装转换后的列表字符串
    int j = 0;
    lpOutUnPacker = lpOutPacker->UnPack();
    while (!lpOutUnPacker->IsEOF())
    {
        if (j)
        {
            sprintf(sStockTypeList, "%s,%d", sStockTypeList, lpOutUnPacker->GetInt("stock_type"));
        } else
        {
            sprintf(sStockTypeList, "%d", lpOutUnPacker->GetInt("stock_type"));
        }
        j++;
        lpOutUnPacker->Next();
    }

    strcpy(StockTypeArr, sStockTypeList);

    //重置
    memset(sStockTypeList, 0, sizeof (sStockTypeList));
    memset(sWhereStr, 0, sizeof (sWhereStr));

    //释放资源
    if (lpInPacker)
    {
        free(lpInPacker->GetPackBuf());
        lpInPacker->Release();
    }
    if (lpOutPacker)
    {
        free(lpOutPacker->GetPackBuf());
        lpOutPacker->Release();
    }
}


