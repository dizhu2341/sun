#include "StockbusinessSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CStockbusinessSync::CStockbusinessSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tstockbusiness");
    strcpy(m_sSrcView, "VO4JC_STOCKBUSINESS");
    strcpy(m_sTmpTable, "sync_stockbusiness");
    strcpy(m_sDstTable, "uft_tstockbusiness");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CStockbusinessSync::~CStockbusinessSync()
{
}

bool CStockbusinessSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct StockbusinessRecord
    {
        int business_date[BATCH_ROWS];
        int serial_no[BATCH_ROWS];
        int fund_id[BATCH_ROWS];
        int asset_id[BATCH_ROWS];
        int combi_id[BATCH_ROWS];
        char invest_type[BATCH_ROWS][2];
        char position_type[BATCH_ROWS][2];
        char stockholder_id[BATCH_ROWS][21];
        char bind_seat[BATCH_ROWS][21];
        char market_no[BATCH_ROWS][2];
        char report_code[BATCH_ROWS][33];
        char busin_opflag[BATCH_ROWS][4];
        double occur_amount[BATCH_ROWS];
        int operate_enable_date[BATCH_ROWS];
        int enable_point[BATCH_ROWS];
        int expire_date[BATCH_ROWS];
        int expire_point[BATCH_ROWS];
    } StockbusinessRecord;
    StockbusinessRecord *lpStockbusinessRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpStockbusinessRecord =  new StockbusinessRecord();
    if (NULL == lpStockbusinessRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【StockbusinessRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpStockbusinessRecord, 0, sizeof (StockbusinessRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                    select business_date, serial_no, fund_id, asset_id, combi_id, invest_type, position_type, stockholder_id, bind_seat, market_no, report_code, busin_opflag, occur_amount, operate_enable_date, enable_point, expire_date, expire_point 
                    from VO4JC_STOCKBUSINESS;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpStockbusinessRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpStockbusinessRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpStockbusinessRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_stockbusiness(business_date, serial_no, fund_id, asset_id, combi_id, invest_type, position_type, stockholder_id, bind_seat, market_no, report_code, busin_opflag, occur_amount, operate_enable_date, enable_point, expire_date, expire_point)
             values(:lpStockbusinessRecord->business_date,
										:lpStockbusinessRecord->serial_no,
										:lpStockbusinessRecord->fund_id,
										:lpStockbusinessRecord->asset_id,
										:lpStockbusinessRecord->combi_id,
										rtrim(:lpStockbusinessRecord->invest_type),
										rtrim(:lpStockbusinessRecord->position_type),
										rtrim(:lpStockbusinessRecord->stockholder_id),
										rtrim(:lpStockbusinessRecord->bind_seat),
										rtrim(:lpStockbusinessRecord->market_no),
										rtrim(:lpStockbusinessRecord->report_code),
										rtrim(:lpStockbusinessRecord->busin_opflag),
										:lpStockbusinessRecord->occur_amount,
										:lpStockbusinessRecord->operate_enable_date,
										:lpStockbusinessRecord->enable_point,
										:lpStockbusinessRecord->expire_date,
										:lpStockbusinessRecord->expire_point);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpStockbusinessRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpStockbusinessRecord;
    return true;
}

bool CStockbusinessSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "		'BUSINESS_DATE,SERIAL_NO,FUND_ID,ASSET_ID,COMBI_ID,INVEST_TYPE,POSITION_TYPE,STOCKHOLDER_ID,'  ||"
            "		'BIND_SEAT,MARKET_NO,REPORT_CODE,INTER_CODE,BUSIN_OP_FLAG,OCCUR_AMOUNT,OPERATE_ENABLE_DATE,ENABLE_POINT,EXPIRE_DATE,EXPIRE_POINT)'  ||"
            "                    'WITH V_INTER_CODE AS ' ||"
            "                    '(SELECT DISTINCT ' ||"
            "                    '       B.MARKET_NO MARKET_NO, ' ||"
            "                    '       A.MARKET_NO MARKET_NO_SRC, ' ||"
            "                    '       A.REPORT_CODE REPORT_CODE, ' ||"
            "                    '       C.INTER_CODE ' ||"
            "                    '  FROM '||V_TABLE_NAME_TMP||' A, JC_TCONVERTMARKETNO B, JC_TCONVERTINTERCODE C ' ||"
            "                    ' WHERE A.MARKET_NO = B.MARKET_NO_SRC ' ||"
            "                    ' AND B.MARKET_NO=C.MARKET_NO ' ||"
            "                    ' AND A.REPORT_CODE=C.REPORT_CODE) ' ||"
            "               'SELECT  T2.BUSINESS_DATE, T1.SERIAL_NO, T1.FUND_ID, T1.ASSET_ID, T1.COMBI_ID, NVL(T1.INVEST_TYPE, '' ''), NVL(T1.POSITION_TYPE, '' ''), '||"
            "               ' CASE WHEN T1.STOCKHOLDER_ID=''-1'' THEN ''*'' ELSE NVL(T1.STOCKHOLDER_ID, ''*'') END AS STOCKHOLDER_ID, ' ||   "
            "               'NVL(T1.BIND_SEAT, '' ''), T3.MARKET_NO, NVL(T1.REPORT_CODE, '' ''),T3.INTER_CODE, T1.BUSIN_OPFLAG, T1.OCCUR_AMOUNT, T1.OPERATE_ENABLE_DATE, T1.ENABLE_POINT, T1.EXPIRE_DATE, T1.EXPIRE_POINT'||"
            "               '  FROM '||V_TABLE_NAME_TMP||' T1,JC_TMARKETINFO T2,V_INTER_CODE T3  ' || "
            "               ' WHERE T1.MARKET_NO = T3.MARKET_NO_SRC' || "
            "               ' AND T1.REPORT_CODE=T3.REPORT_CODE'|| "
            "               ' AND T2.MARKET_NO = T3.MARKET_NO' ||"
            "               ' AND T3.INTER_CODE IS NOT NULL'; "
            "  COMMIT;"
            "END;", m_sTmpTable, m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


