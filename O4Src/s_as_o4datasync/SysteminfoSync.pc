#include "SysteminfoSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CSysteminfoSync::CSysteminfoSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tsysteminfo");
    strcpy(m_sSrcView, "VO4JC_SYSTEMINFO");
    strcpy(m_sTmpTable, "sync_systeminfo");
    strcpy(m_sDstTable, "jc_tsysteminfo");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CSysteminfoSync::~CSysteminfoSync()
{
}

bool CSysteminfoSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct SysteminfoRecord
    {
        char consumer_no[BATCH_ROWS][65];
        char consumer_name[BATCH_ROWS][129];
        int lastinit_date[BATCH_ROWS];
        int init_date[BATCH_ROWS];
    } SysteminfoRecord;
    SysteminfoRecord *lpSysteminfoRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpSysteminfoRecord = new SysteminfoRecord();
    if (NULL == lpSysteminfoRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【SysteminfoRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpSysteminfoRecord, 0, sizeof (SysteminfoRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                    select consumer_no, consumer_name, lastinit_date, init_date 
                    from VO4JC_SYSTEMINFO;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpSysteminfoRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpSysteminfoRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpSysteminfoRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_systeminfo(consumer_no, consumer_name, lastinit_date, init_date)
             values(rtrim(:lpSysteminfoRecord->consumer_no),
										rtrim(:lpSysteminfoRecord->consumer_name),
										:lpSysteminfoRecord->lastinit_date,
										:lpSysteminfoRecord->init_date);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpSysteminfoRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpSysteminfoRecord;
    return true;
}

bool CSysteminfoSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "	'   CONSUMER_NO, CONSUMER_NAME, LASTINIT_DATE, INIT_DATE)	'||"
            "	'   SELECT  NVL(T1.CONSUMER_NO,'' ''), NVL(T1.CONSUMER_NAME,'' ''), T1.LASTINIT_DATE, T1.INIT_DATE '||"
            "	'   FROM SYNC_SYSTEMINFO T1';	"
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


