#include "UnfinishedbusinSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CUnfinishedbusinSync::CUnfinishedbusinSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tuncompletelog");
    strcpy(m_sSrcView,  "vo4jc_liquncomplete");
    strcpy(m_sTmpTable, "sync_unfinishedbusin");
    strcpy(m_sDstTable, "uft_tunfinishedbusin");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CUnfinishedbusinSync::~CUnfinishedbusinSync()
{
}

bool CUnfinishedbusinSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct UnfinishedbusinRecord
    {
        int business_date[BATCH_ROWS];
        int serial_no[BATCH_ROWS];
        int company_id[BATCH_ROWS];
        int fund_id[BATCH_ROWS];
        int asset_id[BATCH_ROWS];
        int combi_id[BATCH_ROWS];
        char balance_type[BATCH_ROWS][2];
        int capital_account_id[BATCH_ROWS];
        char invest_type[BATCH_ROWS][2];
        char position_type[BATCH_ROWS][2];
        char stockholder_id[BATCH_ROWS][21];
        char bind_seat[BATCH_ROWS][21];
        int market_no[BATCH_ROWS];
        char report_code[BATCH_ROWS][33];
        int busin_flag[BATCH_ROWS];
        int occur_date[BATCH_ROWS];
        int expire_date[BATCH_ROWS];
        double occur_amount[BATCH_ROWS];
        double occur_balance[BATCH_ROWS];
        char trade_seat[BATCH_ROWS][21];
        char position_stock_type[BATCH_ROWS][2];
        char settle_currency_no[BATCH_ROWS][4];
        double deal_price[BATCH_ROWS];
        int expire_point[BATCH_ROWS];
        char deal_no[BATCH_ROWS][65];
        char report_serial_no_str[BATCH_ROWS][65];
        int trade_platform_id[BATCH_ROWS];
        int entrust_direction[BATCH_ROWS];
    } UnfinishedbusinRecord;
    UnfinishedbusinRecord *lpUnfinishedbusinRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpUnfinishedbusinRecord =  new UnfinishedbusinRecord();
    if (NULL == lpUnfinishedbusinRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【UnfinishedbusinRecord】失败", m_sDstTable);
        return false;
    }
    

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                select 
                    business_date, 
                    serial_no, 
                    company_id, 
                    fund_id, 
                    asset_id, 
                    combi_id, 
                    balance_type, 
                    capital_account_id,
                    invest_type, 
                    position_type, 
                    stockholder_id, 
                    bind_seat, 
                    market_no, 
                    report_code, 
                    busin_flag, 
                    occur_date, 
                    expire_date, 
                    occur_amount, 
                    occur_balance, 
                    trade_seat,
                    position_stock_type,
                    settle_currency_no,
                    deal_price,
                    expire_point,
                    deal_no,
                    report_serial_no_str,
                    trade_platform_id,
                    entrust_direction
                from vo4jc_liquncomplete;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpUnfinishedbusinRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        memset(lpUnfinishedbusinRecord, 0, sizeof (UnfinishedbusinRecord));
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpUnfinishedbusinRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpUnfinishedbusinRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_unfinishedbusin(business_date, 
                                            serial_no, 
                                            company_id, 
                                            fund_id, 
                                            asset_id, 
                                            combi_id, 
                                            balance_type,
                                            capital_account_id,
                                            invest_type, 
                                            position_type, 
                                            stockholder_id, 
                                            bind_seat, 
                                            market_no, 
                                            report_code,
                                            busin_flag, 
                                            occur_date, 
                                            expire_date, 
                                            occur_amount, 
                                            occur_balance, 
                                            trade_seat,
                                            position_stock_type,
                                            settle_currency_no,
                                            deal_price,
                                            expire_point,
                                            deal_no,
                                            report_serial_no_str,
                                            trade_platform_id,
                                            entrust_direction)
             values(:lpUnfinishedbusinRecord->business_date,
                    :lpUnfinishedbusinRecord->serial_no,
                    :lpUnfinishedbusinRecord->company_id,
                    :lpUnfinishedbusinRecord->fund_id,
                    :lpUnfinishedbusinRecord->asset_id,
                    :lpUnfinishedbusinRecord->combi_id,
                    rtrim(:lpUnfinishedbusinRecord->balance_type),
                    :lpUnfinishedbusinRecord->capital_account_id,
                    rtrim(:lpUnfinishedbusinRecord->invest_type),
                    rtrim(:lpUnfinishedbusinRecord->position_type),
                    rtrim(:lpUnfinishedbusinRecord->stockholder_id),
                    rtrim(:lpUnfinishedbusinRecord->bind_seat),
                    (:lpUnfinishedbusinRecord->market_no),
                    rtrim(:lpUnfinishedbusinRecord->report_code),
                    :lpUnfinishedbusinRecord->busin_flag,
                    :lpUnfinishedbusinRecord->occur_date,
                    :lpUnfinishedbusinRecord->expire_date,
                    :lpUnfinishedbusinRecord->occur_amount,
                    :lpUnfinishedbusinRecord->occur_balance,
                    rtrim(:lpUnfinishedbusinRecord->trade_seat),
                    rtrim(:lpUnfinishedbusinRecord->position_stock_type),
                    rtrim(:lpUnfinishedbusinRecord->settle_currency_no),
                    :lpUnfinishedbusinRecord->deal_price,
                    :lpUnfinishedbusinRecord->expire_point,
                    rtrim(:lpUnfinishedbusinRecord->deal_no),
                    rtrim(:lpUnfinishedbusinRecord->report_serial_no_str),
                    :lpUnfinishedbusinRecord->trade_platform_id,
                    :lpUnfinishedbusinRecord->entrust_direction);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpUnfinishedbusinRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpUnfinishedbusinRecord;
    return true;
}

bool CUnfinishedbusinSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[20480] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "               '   BUSINESS_DATE,SERIAL_NO,COMPANY_ID, FUND_ID,ASSET_ID,COMBI_ID,BALANCE_TYPE, CAPITAL_ACCOUNT_ID, INVEST_TYPE,POSITION_TYPE,STOCKHOLDER_ID,'   ||"
            "               '   BIND_SEAT,MARKET_NO,REPORT_CODE,INTER_CODE,BUSIN_FLAG,OCCUR_DATE,EXPIRE_DATE,OCCUR_AMOUNT,OCCUR_BALANCE,TRADE_SEAT, POSITION_STOCK_TYPE,  '|| "
            "               '   SETTLE_CURRENCY_NO, DEAL_PRICE, EXPIRE_POINT, DEAL_NO, REPORT_SERIAL_NO_STR, TRADE_PLATFORM_ID, ENTRUST_DIRECTION)' ||"      
            "               '   SELECT　T2.BUSINESS_DATE,T1.SERIAL_NO, T1.COMPANY_ID, T1.FUND_ID,T1.ASSET_ID,T1.COMBI_ID, '||"          
            "               '   T1.balance_type, ' ||"
            "               '   NVL(T1.CAPITAL_ACCOUNT_ID, 0),NVL(T1.INVEST_TYPE,'' ''),NVL(T1.POSITION_TYPE,'' ''),'   ||"
            "               '   CASE WHEN T1.STOCKHOLDER_ID=''-1'' THEN ''*'' ELSE NVL(T1.STOCKHOLDER_ID, ''*'') END AS STOCKHOLDER_ID, ' ||   "
            "               '   NVL(T1.BIND_SEAT,'' ''),T1.MARKET_NO,NVL(T1.REPORT_CODE,'' ''),T3.INTER_CODE,T1.BUSIN_FLAG,T1.OCCUR_DATE,T1.EXPIRE_DATE,T1.OCCUR_AMOUNT,T1.OCCUR_BALANCE,NVL(T1.TRADE_SEAT,'' ''), '|| "
            "               '   T1.POSITION_STOCK_TYPE, NVL(T1.SETTLE_CURRENCY_NO, '' ''), T1.DEAL_PRICE, T1.EXPIRE_POINT, NVL(T1.DEAL_NO, '' ''), NVL(T1.REPORT_SERIAL_NO_STR, '' ''), T1.TRADE_PLATFORM_ID, T1.ENTRUST_DIRECTION' ||"
            "               '  FROM '||V_TABLE_NAME_TMP||' T1,JC_TMARKETINFO T2,  JC_TCONVERTINTERCODE T3  ' || "
            "               ' WHERE T2.MARKET_NO = T3.MARKET_NO ' || "
            "               ' AND T1.MARKET_NO = T3.MARKET_NO '||"
            "               ' AND T1.REPORT_CODE=T3.REPORT_CODE' ||"
            "               ' AND T3.INTER_CODE IS NOT NULL'; "
            "  COMMIT;"
            "END;", m_sTmpTable, m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


