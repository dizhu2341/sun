#include "Instancestock_yhj.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CInstancestockYhj::CInstancestockYhj(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tassetday");
    strcpy(m_sSrcView, "vo4jc_bnkinstancestock");
    strcpy(m_sTmpTable, "sync_instancestock_yhj");
    strcpy(m_sDstTable, "uft_tinstancestock_yhj");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CInstancestockYhj::~CInstancestockYhj()
{
}

bool CInstancestockYhj::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;    

    EXEC SQL BEGIN DECLARE SECTION;
        int nFetchRows;
        //声明结构体变量

        typedef struct InstancestockRecord
        {
            int business_date[BATCH_ROWS];//              number(8,0)    DEFAULT 0       NOT NULL   , 
            int instance_id[BATCH_ROWS];//                number(10,0)   DEFAULT 0       NOT NULL   , 
            int company_id[BATCH_ROWS];//                 number(10,0)   DEFAULT 0       NOT NULL   , 
            int fund_id[BATCH_ROWS];//                    number(8,0)    DEFAULT 0       NOT NULL   , 
            int asset_id[BATCH_ROWS];//                   number(10,0)   DEFAULT 0       NOT NULL   , 
            int combi_id[BATCH_ROWS];//                   number(10,0)   DEFAULT 0       NOT NULL   , 
            char invest_type[BATCH_ROWS][2];//                char(1)        DEFAULT '' ''   NOT NULL   , 
            char position_type[BATCH_ROWS][2];//              char(1)        DEFAULT '' ''   NOT NULL   , 
            int market_no[BATCH_ROWS];//                  number(8,0)    DEFAULT 0       NOT NULL   , 
            char report_code[BATCH_ROWS][33];//                varchar2(32)   DEFAULT '' ''   NOT NULL   , 
            char position_stock_type[BATCH_ROWS][2];//        char(1)        DEFAULT '' ''   NOT NULL   , 
            double current_amount[BATCH_ROWS];//             number(20,4)   DEFAULT 0       NOT NULL   , 
            double original_real_cost[BATCH_ROWS];//         number(18,2)   DEFAULT 0       NOT NULL   , 
            double original_interest_cost[BATCH_ROWS];//     number(18,2)   DEFAULT 0       NOT NULL   , 
            double original_real_profit[BATCH_ROWS];//       number(18,2)   DEFAULT 0       NOT NULL   , 
            double original_interest_profit[BATCH_ROWS];//   number(18,2)   DEFAULT 0       NOT NULL   , 
            double total_buy_amount[BATCH_ROWS];//           number(20,4)   DEFAULT 0       NOT NULL   , 
            double total_sale_amount[BATCH_ROWS];//          number(20,4)   DEFAULT 0       NOT NULL   , 
            double total_buy_balance[BATCH_ROWS];//          number(18,2)   DEFAULT 0       NOT NULL   , 
            double total_sale_balance[BATCH_ROWS];//         number(18,2)   DEFAULT 0       NOT NULL     
        } InstancestockRecord;
        InstancestockRecord *lpInstancestockRecord = NULL;
    EXEC SQL END DECLARE SECTION;
        
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    // 获取O3数据库连接句柄
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    if (NULL == o3Ctx)
    {
        SetErrorInfo(DB_ERR_CONNECTION, "【%s】表同步，获取O3数据库连接句柄失败", m_sDstTable);
        return false;
    }
    // 从O32读取数据放入到结构体
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
        select 
            business_date,
            instance_id,
            company_id,
            fund_id,
            asset_id,
            combi_id,
            invest_type,
            position_type,
            market_no,
            report_code,
            position_stock_type,
            current_amount,
            original_real_cost,
            original_interest_cost,
            original_real_profit,
            original_interest_profit,
            total_buy_amount,
            total_sale_amount,
            total_buy_balance,
            total_sale_balance
        from vo4jc_bnkinstancestock;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);        
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");
    
    // 获取O4数据库连接句柄
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    if (NULL == o4Ctx)
    {
        SetErrorInfo(DB_ERR_CONNECTION, "【%s】表同步，获取O4数据库连接句柄失败", m_sDstTable);
        return false;
    }
    
     // 申请内存空间
    lpInstancestockRecord =  new InstancestockRecord();
    if (NULL == lpInstancestockRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【InstancestockRecord】失败", m_sDstTable);
        return false;
    }
    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        memset(lpInstancestockRecord, 0, sizeof (InstancestockRecord));
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpInstancestockRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpInstancestockRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_instancestock_yhj(
                                business_date,
                                instance_id,
                                company_id,
                                fund_id,
                                asset_id,
                                combi_id,
                                invest_type,
                                position_type,
                                market_no,
                                report_code,
                                position_stock_type,
                                current_amount,
                                original_real_cost,
                                original_interest_cost,
                                original_real_profit,
                                original_interest_profit,
                                total_buy_amount,
                                total_sale_amount,
                                total_buy_balance,
                                total_sale_balance)
             values(:lpInstancestockRecord->business_date,
                    :lpInstancestockRecord->instance_id,
                    :lpInstancestockRecord->company_id,
                    :lpInstancestockRecord->fund_id,
                    :lpInstancestockRecord->asset_id,
                    :lpInstancestockRecord->combi_id,
                    rtrim(:lpInstancestockRecord->invest_type),
                    rtrim(:lpInstancestockRecord->position_type),
                    :lpInstancestockRecord->market_no,
                    rtrim(:lpInstancestockRecord->report_code),
                    rtrim(:lpInstancestockRecord->position_stock_type),
                    :lpInstancestockRecord->current_amount,
                    :lpInstancestockRecord->original_real_cost,
                    :lpInstancestockRecord->original_interest_cost,
                    :lpInstancestockRecord->original_real_profit,
                    :lpInstancestockRecord->original_interest_profit,
                    :lpInstancestockRecord->total_buy_amount,
                    :lpInstancestockRecord->total_sale_amount,
                    :lpInstancestockRecord->total_buy_balance,
                    :lpInstancestockRecord->total_sale_balance);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpInstancestockRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpInstancestockRecord;
    return true;
}

bool CInstancestockYhj::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    // 获取O4数据库连接句柄
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    if (NULL == o4Ctx)
    {
        SetErrorInfo(DB_ERR_CONNECTION, "从中间表导入数据到【%s】表，获取O4数据库连接句柄失败", m_sDstTable);
        return false;
    }
    
    // 删除主键和索引
    if (!DropTableIndex())
        return false;

    // 从中间表导入数据到目标表中
    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '||V_TABLE_NAME_O4||' (' ||"
            "   '   BUSINESS_DATE, INSTANCE_ID, COMPANY_ID, FUND_ID, ASSET_ID, COMBI_ID, INVEST_TYPE, POSITION_TYPE,  MARKET_NO, REPORT_CODE,' ||"
            "   '   POSITION_STOCK_TYPE, CURRENT_AMOUNT, ORIGINAL_REAL_COST, ORIGINAL_INTEREST_COST, ORIGINAL_REAL_PROFIT, ORIGINAL_INTEREST_PROFIT,' ||"
            "   '   TOTAL_BUY_AMOUNT, TOTAL_SALE_AMOUNT, TOTAL_BUY_BALANCE, TOTAL_SALE_BALANCE)' ||"
            "   'SELECT' ||"        
            "   '   T1.BUSINESS_DATE, T1.INSTANCE_ID, T1.COMPANY_ID, T1.FUND_ID, T1.ASSET_ID, T1.COMBI_ID, T1.INVEST_TYPE, T1.POSITION_TYPE,  T1.MARKET_NO, T1.REPORT_CODE,' ||"
            "   '   T1.POSITION_STOCK_TYPE, T1.CURRENT_AMOUNT, T1.ORIGINAL_REAL_COST, T1.ORIGINAL_INTEREST_COST, T1.ORIGINAL_REAL_PROFIT, T1.ORIGINAL_INTEREST_PROFIT,' ||"
            "   '   T1.TOTAL_BUY_AMOUNT, T1.TOTAL_SALE_AMOUNT, T1.TOTAL_BUY_BALANCE, T1.TOTAL_SALE_BALANCE' ||"
            "   ' FROM SYNC_INSTANCESTOCK_YHJ T1, jc_tconvertmarketno T2' ;"
            "  COMMIT;"
            "END;", m_sTmpTable, m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    // 重建主键和索引
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


