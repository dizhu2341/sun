#include "FuturedepositratioSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CFuturedepositratioSync::CFuturedepositratioSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tfuturedepositratio");
    strcpy(m_sSrcView, "VO4JC_FUTUREDEPOSITRATIO");
    strcpy(m_sTmpTable, "sync_futuredepositratio");
    strcpy(m_sDstTable, "jc_tfuturedepositratio");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CFuturedepositratioSync::~CFuturedepositratioSync()
{
}

bool CFuturedepositratioSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct FuturedepositratioRecord
    {
        char market_no[BATCH_ROWS][2];
        char report_code[BATCH_ROWS][33];
        char broker_no[BATCH_ROWS][33];
        char stockholder_id[BATCH_ROWS][21];
        int asset_id[BATCH_ROWS];
        double margin_ratio[BATCH_ROWS];
        double short_margin_ratio[BATCH_ROWS];
    } FuturedepositratioRecord;
    FuturedepositratioRecord *lpFuturedepositratioRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpFuturedepositratioRecord =  new FuturedepositratioRecord();
    if (NULL == lpFuturedepositratioRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【FuturedepositratioRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpFuturedepositratioRecord, 0, sizeof (FuturedepositratioRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
        select market_no, report_code, broker_no, stockholder_id, asset_id, margin_ratio, short_margin_ratio from 
        VO4JC_FUTUREDEPOSITRATIO;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpFuturedepositratioRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpFuturedepositratioRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFuturedepositratioRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_futuredepositratio(market_no, report_code, broker_no, stockholder_id, asset_id, margin_ratio, short_margin_ratio)
             values(rtrim(:lpFuturedepositratioRecord->market_no),
										rtrim(:lpFuturedepositratioRecord->report_code),
										rtrim(:lpFuturedepositratioRecord->broker_no),
										rtrim(:lpFuturedepositratioRecord->stockholder_id),
										:lpFuturedepositratioRecord->asset_id,
										:lpFuturedepositratioRecord->margin_ratio,
										:lpFuturedepositratioRecord->short_margin_ratio);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFuturedepositratioRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpFuturedepositratioRecord;
    return true;
}

bool CFuturedepositratioSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_START_INTER_CODE NUMBER := 0;"
            "  V_INIT_TYPE       CHAR(1);"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            "  V_INIT_TYPE      := '%c';"
            ""
            "  SELECT MAX(TO_NUMBER(SUBSTR(TO_CHAR(INTER_CODE), 1, 7)))"
            "    INTO V_START_INTER_CODE"
            "    FROM (SELECT INTER_CODE,"
            "                 CASE"
            "                   WHEN MARKET_NO IN (1, 2, 5) AND LENGTH(REPORT_CODE) <= 6 AND"
            "                        REGEXP_LIKE(REPORT_CODE, '^[0-9]+$') THEN"
            "                    1"
            "                   ELSE"
            "                    0"
            "                 END MM"
            "            FROM JC_TCONVERTINTERCODE)"
            "   WHERE MM = 0;"
            "  V_START_INTER_CODE := CASE"
            "                          WHEN V_START_INTER_CODE IS NULL THEN"
            "                           0"
            "                          ELSE"
            "                           V_START_INTER_CODE - 1000000"
            "                        END;"
            ""
            "  EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || V_TABLE_NAME_O4;"
            ""
            "  IF V_INIT_TYPE <> '1' THEN"
            "    EXECUTE IMMEDIATE 'INSERT INTO JC_TCONVERTINTERCODE(MARKET_NO,REPORT_CODE,INTER_CODE)' ||"
            "                      '  SELECT V.MARKET_NO,' || '         V.REPORT_CODE,' ||"
            "                      '         SF_CREATE_INTERCODE_WITH_INDEX(V.MARKET_NO,' ||"
            "                      '                                        V.REPORT_CODE,' ||"
            "                      '                                        ' ||"
            "                      V_START_INTER_CODE || ' + V.RN)' ||"
            "                      '    FROM (SELECT T1.*, T2.INTER_CODE,ROW_NUMBER() OVER(ORDER BY CASE WHEN t2.INTER_CODE IS NULL THEN 1 ELSE 2 END) RN' ||"
            "                      '            FROM (SELECT DISTINCT A.MARKET_NO MARKET_NO_SRC,' ||"
            "                      '                                  B.MARKET_NO,' ||"
            "                      '                                  A.REPORT_CODE' ||"
            "                      '                    FROM ' || V_TABLE_NAME_TMP ||"
            "                      ' A, JC_TCONVERTMARKETNO B' ||"
            "                      '                   WHERE A.MARKET_NO = B.MARKET_NO_SRC) T1' ||"
            "                      '            LEFT JOIN JC_TCONVERTINTERCODE T2' ||"
            "                      '              ON T1.MARKET_NO = T2.MARKET_NO' ||"
            "                      '             AND T1.REPORT_CODE = T2.REPORT_CODE) V' ||"
            "                      '             WHERE V.INTER_CODE IS NULL';"
            "  END IF;"
            ""
            "  EXECUTE IMMEDIATE 'INSERT INTO ' || V_TABLE_NAME_O4 || '(' ||"
            "                    '  INTER_CODE,' ||"
            "                    '   BROKER_ID,' ||"
            "                    '   STOCKHOLDER_ID,' ||"
            "                    '   ASSET_ID,' ||"
            "                    '   MARGIN_RATIO,' ||"
            "                    '   SHORT_MARGIN_RATIO)' ||"
            "                    '  SELECT T3.INTER_CODE,' ||"
            "                    '         T4.BROKER_ID,' ||"
            "                    '         CASE' ||"
            "                    '           WHEN T1.STOCKHOLDER_ID = ''-1'' THEN' ||"
            "                    '            ''*'' ' ||"
            "                    '           ELSE' ||"
            "                    '            NVL(T1.STOCKHOLDER_ID, ''*'')' ||"
            "                    '         END AS STOCKHOLDER_ID,' ||"
            "                    '         T1.ASSET_ID,' ||"
            "                    '         T1.MARGIN_RATIO,' ||"
            "                    '         T1.SHORT_MARGIN_RATIO' ||"
            "                    '    FROM '||V_TABLE_NAME_TMP||' T1,' ||"
            "                    '         JC_TCONVERTMARKETNO     T2,' ||"
            "                    '         JC_TCONVERTINTERCODE    T3,' ||"
            "                    '         JC_TCONVERTBROKER       T4' ||"
            "                    '   WHERE 1 = 1' ||"
            "                    '     AND T1.MARKET_NO = T2.MARKET_NO_SRC' ||"
            "                    '     AND T2.MARKET_NO = T3.MARKET_NO' ||"
            "                    '     AND T1.REPORT_CODE = T3.REPORT_CODE' ||"
            "                    '     AND T1.BROKER_NO = T4.BROKER_NO' ||"
            "                    '  UNION ALL' ||"
            "                    '  SELECT -1 AS INTER_CODE,' ||"
            "                    '         T2.BROKER_ID,' ||"
            "                    '         CASE' ||"
            "                    '           WHEN T1.STOCKHOLDER_ID = ''-1'' THEN' ||"
            "                    '            ''*'' ' ||"
            "                    '           ELSE' ||"
            "                    '            NVL(T1.STOCKHOLDER_ID, ''*'')' ||"
            "                    '         END AS STOCKHOLDER_ID,' ||"
            "                    '         T1.ASSET_ID,' ||"
            "                    '         T1.MARGIN_RATIO,' ||"
            "                    '         T1.SHORT_MARGIN_RATIO' ||"
            "                    '    FROM '||V_TABLE_NAME_TMP||' T1,' ||"
            "                    '         JC_TCONVERTBROKER      T2' ||"
            "                    '   WHERE 1 = 1' ||"
            "                    '     AND (T1.MARKET_NO = ''*'' OR T1.REPORT_CODE = ''*'')' ||"
            "                    '     AND T1.BROKER_NO = T2.BROKER_NO';"
            ""
            "  COMMIT;"
            "END;", m_sTmpTable, m_sDstTable, m_cSyncFlag);

    if (m_cSyncFlag == '2')
    {
        hsLockCreateInterCode();
    }
    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (m_cSyncFlag == '2')
    {
        hsUnlockCreateInterCode();
    }
    
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    
    if (!RecoverTableIndex())
        return false;

    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


