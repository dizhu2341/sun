#include "FinancedebitSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CFinancedebitSync::CFinancedebitSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tfinancedebt");
    strcpy(m_sSrcView, "VO4JC_FINANCEDEBT");
    strcpy(m_sTmpTable, "sync_financedebit");
    strcpy(m_sDstTable, "uft_tfinancedebit");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CFinancedebitSync::~CFinancedebitSync()
{
}

bool CFinancedebitSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;

    EXEC SQL BEGIN DECLARE SECTION;
        int nFetchRows;
        //声明结构体变量

        typedef struct FinancedebitRecord
        {
            int serial_no[BATCH_ROWS];//                 number(10,0)    DEFAULT 0       NOT NULL   , 
            int business_date[BATCH_ROWS];//             number(8,0)     DEFAULT 0       NOT NULL   , 
            char report_serial_no_branch[BATCH_ROWS][65];//   varchar2(64)    DEFAULT '' ''   NOT NULL   , 
            //int entrust_direction[BATCH_ROWS];//         number(3,0)     DEFAULT 0       NOT NULL   , 
            int combi_id[BATCH_ROWS];//                  number(10,0)    DEFAULT 0       NOT NULL   , 
            int asset_id[BATCH_ROWS];//                  number(10,0)    DEFAULT 0       NOT NULL   , 
            int fund_id[BATCH_ROWS];//                   number(8,0)     DEFAULT 0       NOT NULL   , 
            char invest_type[BATCH_ROWS][2];//               char(1)         DEFAULT '' ''   NOT NULL   , 
            char bind_seat[BATCH_ROWS][21];//                 varchar2(20)    DEFAULT '' ''   NOT NULL   , 
            char stockholder_id[BATCH_ROWS][21];//            varchar2(20)    DEFAULT '' ''   NOT NULL   ,             
            int market_no[BATCH_ROWS];//                 number(8,0)     DEFAULT 0       NOT NULL   , 
            double deal_amount[BATCH_ROWS];//               number(20,4)    DEFAULT 0       NOT NULL   , 
            double begin_baldebt[BATCH_ROWS];//             number(18,2)    DEFAULT 0       NOT NULL   , 
            double begin_amndebt[BATCH_ROWS];//             number(20,4)    DEFAULT 0       NOT NULL   , 
            double begin_intdebt[BATCH_ROWS];//             number(18,2)    DEFAULT 0       NOT NULL   , 
            double begin_feedebt[BATCH_ROWS];//             number(18,2)    DEFAULT 0       NOT NULL   , 
            double begin_feeintdebt[BATCH_ROWS];//          number(18,2)    DEFAULT 0       NOT NULL   , 
            double current_baldebt[BATCH_ROWS];//           number(18,2)    DEFAULT 0       NOT NULL   , 
            double current_amndebt[BATCH_ROWS];//           number(20,4)    DEFAULT 0       NOT NULL   , 
            double current_intdebt[BATCH_ROWS];//           number(18,2)    DEFAULT 0       NOT NULL   , 
            double current_feedebt[BATCH_ROWS];//           number(18,2)    DEFAULT 0       NOT NULL   , 
            double current_feeintdebt[BATCH_ROWS];//        number(18,2)    DEFAULT 0       NOT NULL   , 
            double ttrtd_baldebt[BATCH_ROWS];//             number(18,2)    DEFAULT 0       NOT NULL   , 
            double ttrtd_amndebt[BATCH_ROWS];//             number(20,4)    DEFAULT 0       NOT NULL   , 
            double ttrtd_intdebt[BATCH_ROWS];//             number(18,2)    DEFAULT 0       NOT NULL   , 
            double ttrtd_feedebt[BATCH_ROWS];//             number(18,2)    DEFAULT 0       NOT NULL   , 
            double ttrtd_feeintdebt[BATCH_ROWS];//          number(18,2)    DEFAULT 0       NOT NULL   ,           
            double direct_drop_amount[BATCH_ROWS];//        number(20,4)    DEFAULT 0       NOT NULL   , 
            double interest_cal[BATCH_ROWS];//              number(18,2)    DEFAULT 0       NOT NULL   , 
            double fee_cal[BATCH_ROWS];//                   number(18,2)    DEFAULT 0       NOT NULL   , 
            char debt_type[BATCH_ROWS][2];//                 char(1)         DEFAULT '' ''   NOT NULL   , 
            char debt_status[BATCH_ROWS][2];//               char(1)         DEFAULT '' ''   NOT NULL   , 
            int company_id[BATCH_ROWS];//                number(10,0)    DEFAULT 0       NOT NULL   , 
            char balance_type[BATCH_ROWS][2];//              char(1)         DEFAULT '' ''   NOT NULL   , 
            int capital_account_id[BATCH_ROWS];//        number(10,0)    DEFAULT 0       NOT NULL   , 
            char report_code[BATCH_ROWS][33];//               varchar2(32)    DEFAULT '' ''   NOT NULL   , 
            double deal_balance[BATCH_ROWS];//              number(18,2)    DEFAULT 0       NOT NULL   , 
            double deal_price[BATCH_ROWS];//                number(20,12)   DEFAULT 0       NOT NULL     
        } FinancedebitRecord;
        FinancedebitRecord *lpFinancedebitRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    if (NULL == o3Ctx)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，获取O3数据库连接句柄失败", m_sDstTable);
        return false;
    }
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
        select  
            serial_no, 
            business_date, 
            report_serial_no_branch,             
            combi_id, 
            asset_id, 
            fund_id, 
            invest_type, 
            bind_seat, 
            stockholder_id,            
            market_no, 
            deal_amount, 
            begin_baldebt, 
            begin_amndebt, 
            begin_intdebt, 
            begin_feedebt, 
            begin_feeintdebt, 
            current_baldebt, 
            current_amndebt, 
            current_intdebt, 
            current_feedebt, 
            current_feeintdebt, 
            ttrtd_baldebt, 
            ttrtd_amndebt, 
            ttrtd_intdebt, 
            ttrtd_feedebt, 
            ttrtd_feeintdebt,          
            direct_drop_amount, 
            interest_cal, 
            fee_cal, 
            debt_type, 
            debt_status, 
            company_id, 
            balance_type, 
            capital_account_id, 
            report_code, 
            deal_balance, 
            deal_price
        from VO4JC_FINANCEDEBT;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");
    
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    if (NULL == o4Ctx)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，获取O4数据库连接句柄失败", m_sDstTable);
        return false;
    }
    // 申请内存空间
    lpFinancedebitRecord = new FinancedebitRecord();
    if (NULL == lpFinancedebitRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【FinancedebitRecord】失败", m_sDstTable);
        return false;
    }
    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        memset(lpFinancedebitRecord, 0, sizeof (FinancedebitRecord));
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpFinancedebitRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFinancedebitRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_financedebit(
                                            serial_no, 
                                            business_date, 
                                            report_serial_no_branch, 
                                            combi_id, 
                                            asset_id, 
                                            fund_id, 
                                            invest_type, 
                                            bind_seat, 
                                            stockholder_id,                                           
                                            market_no, 
                                            deal_amount, 
                                            begin_baldebt, 
                                            begin_amndebt, 
                                            begin_intdebt, 
                                            begin_feedebt, 
                                            begin_feeintdebt, 
                                            current_baldebt, 
                                            current_amndebt, 
                                            current_intdebt, 
                                            current_feedebt, 
                                            current_feeintdebt, 
                                            ttrtd_baldebt, 
                                            ttrtd_amndebt, 
                                            ttrtd_intdebt, 
                                            ttrtd_feedebt, 
                                            ttrtd_feeintdebt,                                            
                                            direct_drop_amount, 
                                            interest_cal, 
                                            fee_cal, 
                                            debt_type, 
                                            debt_status, 
                                            company_id, 
                                            balance_type, 
                                            capital_account_id, 
                                            report_code, 
                                            deal_balance, 
                                            deal_price)
             values(:lpFinancedebitRecord->serial_no,									
                    :lpFinancedebitRecord->business_date, 
                    rtrim(:lpFinancedebitRecord->report_serial_no_branch), 
                    :lpFinancedebitRecord->combi_id, 
                    :lpFinancedebitRecord->asset_id, 
                    :lpFinancedebitRecord->fund_id, 
                    rtrim(:lpFinancedebitRecord->invest_type), 
                    rtrim(:lpFinancedebitRecord->bind_seat), 
                    rtrim(:lpFinancedebitRecord->stockholder_id), 
                    :lpFinancedebitRecord->market_no, 
                    :lpFinancedebitRecord->deal_amount, 
                    :lpFinancedebitRecord->begin_baldebt, 
                    :lpFinancedebitRecord->begin_amndebt, 
                    :lpFinancedebitRecord->begin_intdebt, 
                    :lpFinancedebitRecord->begin_feedebt, 
                    :lpFinancedebitRecord->begin_feeintdebt, 
                    :lpFinancedebitRecord->current_baldebt, 
                    :lpFinancedebitRecord->current_amndebt, 
                    :lpFinancedebitRecord->current_intdebt, 
                    :lpFinancedebitRecord->current_feedebt, 
                    :lpFinancedebitRecord->current_feeintdebt, 
                    :lpFinancedebitRecord->ttrtd_baldebt, 
                    :lpFinancedebitRecord->ttrtd_amndebt, 
                    :lpFinancedebitRecord->ttrtd_intdebt, 
                    :lpFinancedebitRecord->ttrtd_feedebt, 
                    :lpFinancedebitRecord->ttrtd_feeintdebt,                   
                    :lpFinancedebitRecord->direct_drop_amount, 
                    :lpFinancedebitRecord->interest_cal, 
                    :lpFinancedebitRecord->fee_cal, 
                    rtrim(:lpFinancedebitRecord->debt_type), 
                    rtrim(:lpFinancedebitRecord->debt_status), 
                    :lpFinancedebitRecord->company_id, 
                    rtrim(:lpFinancedebitRecord->balance_type), 
                    :lpFinancedebitRecord->capital_account_id, 
                    rtrim(:lpFinancedebitRecord->report_code), 
                    :lpFinancedebitRecord->deal_balance, 
                    :lpFinancedebitRecord->deal_price);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFinancedebitRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpFinancedebitRecord;
    return true;
}

bool CFinancedebitSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
        char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    if (NULL == o4Ctx)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "从中间表导入数据到【%s】表，获取O4数据库连接句柄失败", m_sDstTable);
        return false;
    }
    
    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "       '   SERIAL_NO, BUSINESS_DATE, REPORT_SERIAL_NO_BRANCH, COMBI_ID, ASSET_ID,'   ||"
            "       '   FUND_ID, INVEST_TYPE, BIND_SEAT, STOCKHOLDER_ID, INTER_CODE, MARKET_NO, DEAL_AMOUNT, '   ||"
            "       '   BEGIN_BALDEBT, BEGIN_AMNDEBT, BEGIN_INTDEBT, BEGIN_FEEDEBT, BEGIN_FEEINTDEBT, CURRENT_BALDEBT,'   ||"
            "       '   CURRENT_AMNDEBT, CURRENT_INTDEBT, CURRENT_FEEDEBT, CURRENT_FEEINTDEBT, TTRTD_BALDEBT, TTRTD_AMNDEBT, TTRTD_INTDEBT, TTRTD_FEEDEBT, TTRTD_FEEINTDEBT,'   ||"
            "       '   DIRECT_DROP_AMOUNT, INTEREST_CAL, FEE_CAL, DEBT_TYPE, DEBT_STATUS, '   ||"
            "       '   COMPANY_ID, BALANCE_TYPE, CAPITAL_ACCOUNT_ID, REPORT_CODE, DEAL_BALANCE, DEAL_PRICE)' ||"
            "       '   SELECT T1.SERIAL_NO, T1.BUSINESS_DATE, NVL(T1.REPORT_SERIAL_NO_BRANCH,'' ''), '   ||"
            "       '   T1.COMBI_ID, T1.ASSET_ID,T1.FUND_ID, NVL(T1.INVEST_TYPE,'' ''), NVL(T1.BIND_SEAT,'' ''), '   ||"
            "       '   CASE WHEN T1.STOCKHOLDER_ID=''-1'' THEN ''*'' ELSE NVL(T1.STOCKHOLDER_ID, ''*'') END AS STOCKHOLDER_ID,'   ||"
            "       '   T3.INTER_CODE, T1.MARKET_NO, T1.DEAL_AMOUNT, T1.BEGIN_BALDEBT, T1.BEGIN_AMNDEBT, '   ||"
            "       '   T1.BEGIN_INTDEBT, T1.BEGIN_FEEDEBT, T1.BEGIN_FEEINTDEBT, T1.CURRENT_BALDEBT, '   ||"
            "       '   T1.CURRENT_AMNDEBT, T1.CURRENT_INTDEBT, T1.CURRENT_FEEDEBT, T1.CURRENT_FEEINTDEBT, '   ||"
            "       '   T1.TTRTD_BALDEBT, T1.TTRTD_AMNDEBT, T1.TTRTD_INTDEBT, T1.TTRTD_FEEDEBT, T1.TTRTD_FEEINTDEBT,'   ||"           
            "       '   T1.DIRECT_DROP_AMOUNT, T1.INTEREST_CAL, T1.FEE_CAL, NVL(T1.DEBT_TYPE,'' ''), NVL(T1.DEBT_STATUS,'' ''),'   ||"
            "       '   T1.COMPANY_ID, T1.BALANCE_TYPE, T1.CAPITAL_ACCOUNT_ID, T1.REPORT_CODE, T1.DEAL_BALANCE, T1.DEAL_PRICE' ||"
            "       '   FROM　SYNC_FINANCEDEBIT T1, JC_TCONVERTINTERCODE T3 '   ||"
            "       '   WHERE '   ||"
            "       '    T1.MARKET_NO = T3.MARKET_NO'   ||"
            "       '   AND T1.REPORT_CODE = T3.REPORT_CODE'  ;"
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
       
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


