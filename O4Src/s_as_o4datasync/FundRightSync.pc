#include "FundRightSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CFundRightSync::CFundRightSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "topfundright");
    strcpy(m_sSrcView, "VO4JC_OPFUNDRIGHT");
    strcpy(m_sTmpTable, "sync_fundright");
    strcpy(m_sDstTable, "jc_tfundright");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CFundRightSync::~CFundRightSync()
{

}

bool CFundRightSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    //声明结构体变量
    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;

    typedef struct FundRightRecord
    {
        int   operator_no[BATCH_ROWS];
        int   company_id[BATCH_ROWS];
        int   dept_id[BATCH_ROWS];
        int   fund_id[BATCH_ROWS];
        int   asset_id[BATCH_ROWS];
        int   combi_id[BATCH_ROWS];
        char  fund_level[BATCH_ROWS][2];
        char fund_opright[BATCH_ROWS][129];
    } FundRightRecord;
    FundRightRecord *lpFundRightRecord;
    EXEC SQL END DECLARE SECTION;
    lpFundRightRecord = new FundRightRecord();
    if (NULL == lpFundRightRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【FundRightRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpFundRightRecord, 0, sizeof (FundRightRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                SELECT 
                operator_no,        company_id,         dept_id,        fund_id,    
                asset_id,           combi_id,           fund_level,     fund_opright
                FROM VO4JC_OPFUNDRIGHT;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpFundRightRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpFundRightRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFundRightRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_fundright(
                    operator_no,            company_id,                 dept_id,                fund_id, 
                    asset_id,               combi_id,                   fund_level,             fund_opright)
             values(:lpFundRightRecord->operator_no,
                    :lpFundRightRecord->company_id,
                    :lpFundRightRecord->dept_id,
                    :lpFundRightRecord->fund_id,
                    :lpFundRightRecord->asset_id,
                    :lpFundRightRecord->combi_id,
                    :lpFundRightRecord->fund_level, 
                    rtrim(:lpFundRightRecord->fund_opright));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpFundRightRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    delete lpFundRightRecord;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    return true;
}

bool CFundRightSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME      VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME := '%s';"
            ""
            "  EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || V_TABLE_NAME;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME || '(' ||  "
            "                    '	OPERATOR_NO,	COMPANY_ID,	DEPT_ID,	FUND_ID,' || "
            "                    '	ASSET_ID,	COMBI_ID,	FUND_LEVEL,	FUND_OPRIGHT)' || "
            "                    '	SELECT ' || "
            "                    '	OPERATOR_NO,	COMPANY_ID,	DEPT_ID,	FUND_ID,' || "
            "                    '	ASSET_ID,	COMBI_ID,	DECODE(FUND_LEVEL, ''1'', ''3'', ''2'', ''4'', ''3'', ''5'', ''4'', ''1'', ''5'', ''2'', FUND_LEVEL) FUND_LEVEL,' || "
            "                    '	SUBSTR(REGEXP_REPLACE(FUND_OPRIGHT, ''([0-9])'', ''\\1,''), 0, LENGTH(FUND_OPRIGHT)*2-1) FUND_OPRIGHT' || "
            "                    '	FROM SYNC_FUNDRIGHT';"
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}

