#include "CashbusinessZscshSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CCashbusinessZscshSync::CCashbusinessZscshSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tcashbusiness");
    strcpy(m_sSrcView, "VO4JC_CASHBUSINESS_ZSCSH");
    strcpy(m_sTmpTable, "sync_cashbusiness_zscsh");
    strcpy(m_sDstTable, "uft_tcashbusiness_sync");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CCashbusinessZscshSync::~CCashbusinessZscshSync()
{
}

bool CCashbusinessZscshSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct CashbusinessZscshRecord
    {
        int business_date[BATCH_ROWS];
        int serial_no[BATCH_ROWS];
        int fund_id[BATCH_ROWS];
        int asset_id[BATCH_ROWS];
        char balance_type[BATCH_ROWS][2];
        char currency_no[BATCH_ROWS][4];
        char busin_opflag[BATCH_ROWS][4];
        double occur_balance[BATCH_ROWS];
        double occur_share[BATCH_ROWS];
        int operate_enable_date[BATCH_ROWS];
        int enable_point[BATCH_ROWS];
        int expire_date[BATCH_ROWS];
        int expire_point[BATCH_ROWS];
        char mature_enable_flag[BATCH_ROWS][2];
    } CashbusinessZscshRecord;
    CashbusinessZscshRecord *lpCashbusinessZscshRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpCashbusinessZscshRecord =  new CashbusinessZscshRecord();
    if (NULL == lpCashbusinessZscshRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【CashbusinessZscshRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpCashbusinessZscshRecord, 0, sizeof (CashbusinessZscshRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
            select business_date, serial_no, fund_id, asset_id, balance_type, currency_no, busin_opflag, occur_balance, occur_share, operate_enable_date, enable_point, expire_date, expire_point, mature_enable_flag 
            from VO4JC_CASHBUSINESS_ZSCSH;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpCashbusinessZscshRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpCashbusinessZscshRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpCashbusinessZscshRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_cashbusiness_zscsh(business_date, serial_no, fund_id, asset_id, balance_type, currency_no, busin_opflag, occur_balance, occur_share, operate_enable_date, enable_point, expire_date, expire_point, mature_enable_flag)
             values(:lpCashbusinessZscshRecord->business_date,
										:lpCashbusinessZscshRecord->serial_no,
										:lpCashbusinessZscshRecord->fund_id,
										:lpCashbusinessZscshRecord->asset_id,
										rtrim(:lpCashbusinessZscshRecord->balance_type),
										rtrim(:lpCashbusinessZscshRecord->currency_no),
										rtrim(:lpCashbusinessZscshRecord->busin_opflag),
										:lpCashbusinessZscshRecord->occur_balance,
										:lpCashbusinessZscshRecord->occur_share,
										:lpCashbusinessZscshRecord->operate_enable_date,
										:lpCashbusinessZscshRecord->enable_point,
										:lpCashbusinessZscshRecord->expire_date,
										:lpCashbusinessZscshRecord->expire_point,
										rtrim(:lpCashbusinessZscshRecord->mature_enable_flag));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpCashbusinessZscshRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpCashbusinessZscshRecord;
    return true;
}

bool CCashbusinessZscshSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_TMP  VARCHAR2(64);"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "  V_BUSINESS_DATE   NUMBER(8);"
            "BEGIN"
            "  V_TABLE_NAME_TMP := '%s';"
            "  V_TABLE_NAME_O4  := '%s';"
            " SELECT T.BUSINESS_DATE INTO V_BUSINESS_DATE FROM JC_TMARKETINFO T WHERE T.MARKET_NO=1;"
            ""
            "  EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "		'BUSINESS_DATE,SERIAL_NO,FUND_ID,ASSET_ID,BALANCE_TYPE,CURRENCY_NO,BUSIN_OP_FLAG,OCCUR_BALANCE,	' ||"
            "		'OCCUR_SHARE,OPERATE_ENABLE_DATE,ENABLE_POINT,EXPIRE_DATE,EXPIRE_POINT,MATURE_ENABLE_FLAG)	' ||"
            "		'SELECT '||V_BUSINESS_DATE||', T1.SERIAL_NO, T1.FUND_ID, T1.ASSET_ID, T1.BALANCE_TYPE, T1.CURRENCY_NO, T1.BUSIN_OPFLAG, T1.OCCUR_BALANCE, T1.OCCUR_SHARE,	'	|| "
            "		'T1.OPERATE_ENABLE_DATE, T1.ENABLE_POINT, T1.EXPIRE_DATE, T1.EXPIRE_POINT, T1.MATURE_ENABLE_FLAG	'	||"
            "       'FROM  '|| V_TABLE_NAME_TMP || ' T1'; "
            "  COMMIT;"
            "END;", m_sTmpTable, m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }

    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


