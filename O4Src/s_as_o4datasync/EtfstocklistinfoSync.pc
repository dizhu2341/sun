#include "EtfstocklistinfoSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CEtfstocklistinfoSync::CEtfstocklistinfoSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tetfstocklistinfo");
    strcpy(m_sSrcView, "VO4JC_ETFSTOCKLISTINFO");
    strcpy(m_sTmpTable, "sync_etfstocklistinfo");
    strcpy(m_sDstTable, "jc_tetfstocklistinfo");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CEtfstocklistinfoSync::~CEtfstocklistinfoSync()
{
}

bool CEtfstocklistinfoSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct EtfstocklistinfoRecord
    {
        char market_no[BATCH_ROWS][2];
        char report_code[BATCH_ROWS][33];
        char market_no_element[BATCH_ROWS][2];
        char report_code_element[BATCH_ROWS][33];
        double stock_amount[BATCH_ROWS];
        char cash_substitue_type[BATCH_ROWS][2];
        double price_ratio[BATCH_ROWS];
        double purchase_rep_balance[BATCH_ROWS];
        double redeem_rep_balance[BATCH_ROWS];
        char exec_type[BATCH_ROWS][2];
    } EtfstocklistinfoRecord;
    EtfstocklistinfoRecord *lpEtfstocklistinfoRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpEtfstocklistinfoRecord = new EtfstocklistinfoRecord();
    if (NULL == lpEtfstocklistinfoRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【EtfstocklistinfoRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpEtfstocklistinfoRecord, 0, sizeof (EtfstocklistinfoRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                    select market_no, report_code, market_no_element, report_code_element, stock_amount, cash_substitue_type, price_ratio, purchase_rep_balance, redeem_rep_balance,exec_type 
                    from VO4JC_ETFSTOCKLISTINFO;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpEtfstocklistinfoRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpEtfstocklistinfoRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpEtfstocklistinfoRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_etfstocklistinfo(market_no, report_code, market_no_element, report_code_element, stock_amount, cash_substitue_type, price_ratio, purchase_rep_balance, redeem_rep_balance, exec_type)
             values(rtrim(:lpEtfstocklistinfoRecord->market_no),
										rtrim(:lpEtfstocklistinfoRecord->report_code),
										rtrim(:lpEtfstocklistinfoRecord->market_no_element),
										rtrim(:lpEtfstocklistinfoRecord->report_code_element),
										:lpEtfstocklistinfoRecord->stock_amount,
										rtrim(:lpEtfstocklistinfoRecord->cash_substitue_type),
										:lpEtfstocklistinfoRecord->price_ratio,
										:lpEtfstocklistinfoRecord->purchase_rep_balance,
										:lpEtfstocklistinfoRecord->redeem_rep_balance,
										rtrim(:lpEtfstocklistinfoRecord->exec_type));
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpEtfstocklistinfoRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpEtfstocklistinfoRecord;
    return true;
}

bool CEtfstocklistinfoSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;
    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "  V_INIT_DATE   NUMBER(8);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            " SELECT INIT_DATE INTO V_INIT_DATE FROM JC_TSYSTEMINFO;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "	'   BUSINESS_DATE,MARKET_NO,REPORT_CODE,MARKET_NO_ELEMENT,REPORT_CODE_ELEMENT,STOCK_AMOUNT,     '   ||"
            "	'   CASH_SUBSTITUE_TYPE,PRICE_RATIO,PURCHASE_REP_BALANCE,REDEEM_REP_BALANCE,EXEC_TYPE)'     ||"
            "	'   SELECT  '||V_INIT_DATE||',T2.MARKET_NO,NVL(T1.REPORT_CODE,'' ''),T3.MARKET_NO,NVL(T1.REPORT_CODE_ELEMENT,'' ''),T1.STOCK_AMOUNT,    '   ||"
            "	'   NVL(T1.CASH_SUBSTITUE_TYPE,'' ''),T1.PRICE_RATIO,T1.PURCHASE_REP_BALANCE,T1.REDEEM_REP_BALANCE,NVL(T1.EXEC_TYPE,''0'')  '	||"
            "	'   FROM    sync_etfstocklistinfo T1,JC_TCONVERTMARKETNO T2,JC_TCONVERTMARKETNO T3  '   ||"
            "	'   WHERE T1.MARKET_NO = T2.MARKET_NO_SRC AND T1.MARKET_NO_ELEMENT =  T3.MARKET_NO_SRC  ';   "
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


