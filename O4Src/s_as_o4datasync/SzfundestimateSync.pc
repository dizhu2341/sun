#include "SzfundestimateSync.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CSzfundestimateSync::CSzfundestimateSync(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tuncompletelog");
    strcpy(m_sSrcView, "VO4JC_GRDINGFND_ESTIMATESPLIT");
    strcpy(m_sTmpTable, "sync_szfundestimate");
    strcpy(m_sDstTable, "uft_tunitstock");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CSzfundestimateSync::~CSzfundestimateSync()
{
}

bool CSzfundestimateSync::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();

    EXEC SQL BEGIN DECLARE SECTION;
    int nFetchRows;
    //声明结构体变量

    typedef struct SzfundestimateRecord
    {
        int business_date[BATCH_ROWS];
        int fund_id[BATCH_ROWS];
        int asset_id[BATCH_ROWS];
        int combi_id[BATCH_ROWS];
        char invest_type[BATCH_ROWS][2];
        char stockholder_id[BATCH_ROWS][21];
        char bind_seat[BATCH_ROWS][21];
        char position_type[BATCH_ROWS][2];
        char market_no[BATCH_ROWS][2];
        char report_code[BATCH_ROWS][33];
        double estimated_amount[BATCH_ROWS];
    } SzfundestimateRecord;
    SzfundestimateRecord *lpSzfundestimateRecord = NULL;
    EXEC SQL END DECLARE SECTION;

    // 申请内存空间
    lpSzfundestimateRecord = new SzfundestimateRecord();
    if (NULL == lpSzfundestimateRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【SzfundestimateRecord】失败", m_sDstTable);
        return false;
    }
    memset(lpSzfundestimateRecord, 0, sizeof (SzfundestimateRecord));

    //-------------------------------------------------------------------------
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
                    select business_date, fund_id, asset_id, combi_id, invest_type, stockholder_id, bind_seat, position_type, market_no, report_code, estimated_amount 
                    from VO4JC_GRDINGFND_ESTIMATESPLIT;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);
        delete lpSzfundestimateRecord;
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");

    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpSzfundestimateRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpSzfundestimateRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_szfundestimate(business_date, fund_id, asset_id, combi_id, invest_type, stockholder_id, bind_seat, position_type, market_no, report_code, estimated_amount)
             values(:lpSzfundestimateRecord->business_date,
										:lpSzfundestimateRecord->fund_id,
										:lpSzfundestimateRecord->asset_id,
										:lpSzfundestimateRecord->combi_id,
										rtrim(:lpSzfundestimateRecord->invest_type),
										rtrim(:lpSzfundestimateRecord->stockholder_id),
										rtrim(:lpSzfundestimateRecord->bind_seat),
										rtrim(:lpSzfundestimateRecord->position_type),
										rtrim(:lpSzfundestimateRecord->market_no),
										rtrim(:lpSzfundestimateRecord->report_code),
										:lpSzfundestimateRecord->estimated_amount);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpSzfundestimateRecord;
            return false;
        }
        EXEC SQL UPDATE SYNC_SZFUNDESTIMATE SET STOCKHOLDER_ID = '*' WHERE STOCKHOLDER_ID = '-1';
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpSzfundestimateRecord;
    return true;
}

bool CSzfundestimateSync::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");

    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;

    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "  V_INIT_DATE       NUMBER(8);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  SELECT INIT_DATE INTO V_INIT_DATE FROM JC_TSYSTEMINFO; "
            "  EXECUTE IMMEDIATE 'UPDATE '|| V_TABLE_NAME_O4 || ' T1 SET ' || "
            "       '   (FUND_ID, ASSET_ID, ESTIMATED_AMOUNT) = '   ||"
            "       '   (SELECT T2.FUND_ID, T2.ASSET_ID, T2.ESTIMATED_AMOUNT FROM SYNC_SZFUNDESTIMATE T2, JC_TCONVERTMARKETNO T3 '   ||"
            "       '   WHERE T2.MARKET_NO = T3.MARKET_NO_SRC AND T1.MARKET_NO = T3.MARKET_NO AND T1.REPORT_CODE = T2.REPORT_CODE '   ||"
            "       '   AND T1.COMBI_ID = T2.COMBI_ID AND T1.BUSINESS_DATE = '||V_INIT_DATE||'  '   ||"
            "       '   AND T1.STOCKHOLDER_ID = T2.STOCKHOLDER_ID AND T1.INVEST_TYPE = T2.INVEST_TYPE '   ||"
            "       '   AND T1.BIND_SEAT = T2.BIND_SEAT AND T1.POSITION_TYPE = T2.POSITION_TYPE) '   ||"
            "       '   WHERE EXISTS(SELECT 1 '   ||"
            "       '   FROM SYNC_SZFUNDESTIMATE T2, JC_TCONVERTMARKETNO T3'   ||"
            "       '   WHERE T2.MARKET_NO = T3.MARKET_NO_SRC AND T1.MARKET_NO = T3.MARKET_NO AND T1.REPORT_CODE = T2.REPORT_CODE '   ||"
            "       '   AND T1.COMBI_ID = T2.COMBI_ID AND T1.BUSINESS_DATE = '||V_INIT_DATE||'  '   ||"
            "       '   AND T1.STOCKHOLDER_ID = T2.STOCKHOLDER_ID AND T1.INVEST_TYPE = T2.INVEST_TYPE '   ||"
            "       '   AND T1.BIND_SEAT = T2.BIND_SEAT AND T1.POSITION_TYPE = T2.POSITION_TYPE) ';  "            
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "       '   BUSINESS_DATE, FUND_ID, ASSET_ID, COMBI_ID, INVEST_TYPE, '   ||"
            "       '   STOCKHOLDER_ID, BIND_SEAT, POSITION_TYPE, MARKET_NO, REPORT_CODE, INTER_CODE, ESTIMATED_AMOUNT) '   ||"
            "       '   WITH V_SZFUNDESTIMATE AS('   ||"
            "       '   SELECT T11.BUSINESS_DATE, T11.FUND_ID, T11.ASSET_ID, T11.COMBI_ID, NVL(T11.INVEST_TYPE, '' '') INVEST_TYPE,'   ||"
            "       '   NVL(T11.STOCKHOLDER_ID, '' * '')  STOCKHOLDER_ID,'   ||"
            "       '   NVL(T11.BIND_SEAT, '' '') BIND_SEAT, NVL(T11.POSITION_TYPE, '' '') POSITION_TYPE, T12.MARKET_NO, NVL(T11.REPORT_CODE, '' '') REPORT_CODE, T13.INTER_CODE, T11.ESTIMATED_AMOUNT '   ||"
            "       '   FROM SYNC_SZFUNDESTIMATE T11, JC_TCONVERTMARKETNO T12, JC_TCONVERTINTERCODE T13 '   ||"
            "       '   WHERE T11.MARKET_NO = T12.MARKET_NO_SRC '   ||"
            "       '   AND T11.REPORT_CODE = T13.REPORT_CODE '   ||"
            "       '   AND T12.MARKET_NO = T13.MARKET_NO) '   ||"
            "       '   SELECT T1.BUSINESS_DATE, T1.FUND_ID, T1.ASSET_ID, T1.COMBI_ID, T1.INVEST_TYPE, '   ||"
            "       '   T1.STOCKHOLDER_ID, T1.BIND_SEAT, T1.POSITION_TYPE, T1.MARKET_NO, T1.REPORT_CODE, T1.INTER_CODE, T1.ESTIMATED_AMOUNT '   ||"
            "       '   FROM V_SZFUNDESTIMATE T1 '   ||"
            "       '   WHERE NOT EXISTS(SELECT 1 FROM UFT_TUNITSTOCK T2 WHERE T2.BUSINESS_DATE = '||V_INIT_DATE||' AND  T1.INVEST_TYPE = T2.INVEST_TYPE AND T1.COMBI_ID = T2.COMBI_ID '   ||"
            "       '   AND T1.STOCKHOLDER_ID = T2.STOCKHOLDER_ID AND T1.BIND_SEAT = T2.BIND_SEAT AND T1.POSITION_TYPE = T2.POSITION_TYPE '   ||"
            "       '   AND T1.INTER_CODE = T2.INTER_CODE) ';  "
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}


