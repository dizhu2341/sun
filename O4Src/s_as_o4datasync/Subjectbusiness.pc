#include "Subjectbusiness.h"
#define SQLCA_STORAGE_CLASS extern
#include <sqlca.h>

CSubjectBusiness::CSubjectBusiness(IAS2Context * lpContext) : CDataSync(lpContext)
{
    strcpy(m_sSrcTable, "tsubjectbusiness");
    strcpy(m_sSrcView,  "vo4jc_subjectbusiness");
    strcpy(m_sTmpTable, "sync_subjectbusiness");
    strcpy(m_sDstTable, "uft_tsubjectbusiness");
    m_nBatchRows = BATCH_ROWS;
    EXEC SQL WHENEVER SQLERROR DO SqlErrorAction();
}

CSubjectBusiness::~CSubjectBusiness()
{
}

bool CSubjectBusiness::ExpO3View2Temp()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】开始");

    // 准备RPOC执行上下文
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    
    EXEC SQL BEGIN DECLARE SECTION;
        int nFetchRows;
        //声明结构体变量

        typedef struct SubjectbusinessRecord
        {
            int business_date[BATCH_ROWS];//           number(8,0)    DEFAULT 0       NOT NULL   , 
            int busin_no[BATCH_ROWS];//                number(10,0)   DEFAULT 0       NOT NULL   , 
            int company_id[BATCH_ROWS];//              number(10,0)   DEFAULT 0       NOT NULL   , 
            int fund_id[BATCH_ROWS];//                 number(8,0)    DEFAULT 0       NOT NULL   , 
            int asset_id[BATCH_ROWS];//                number(10,0)   DEFAULT 0       NOT NULL   , 
            int subject_no[BATCH_ROWS];//              number(8,0)    DEFAULT 0       NOT NULL   , 
            char currency_no[BATCH_ROWS][3];//         varchar2(3)    DEFAULT '' ''   NOT NULL   , 
            char busin_op_flag[BATCH_ROWS][3];//       varchar2(3)    DEFAULT '' ''   NOT NULL   , 
            double subject_occur_balance[BATCH_ROWS];//number(18,2)   DEFAULT 0       NOT NULL   , 
            int operate_enable_date[BATCH_ROWS];//     number(8,0)    DEFAULT 0       NOT NULL   , 
            int enable_point[BATCH_ROWS];//            number(8,0)    DEFAULT 0       NOT NULL   , 
            char adjust_asset_flag[BATCH_ROWS][2];//   char(1)        DEFAULT '' ''   NOT NULL   , 
            int operator_no[BATCH_ROWS];//             number(8,0)    DEFAULT 0       NOT NULL   , 
            int occur_time[BATCH_ROWS];//              number(6,0)    DEFAULT 0       NOT NULL     
        } SubjectbusinessRecord;
        SubjectbusinessRecord *lpSubjectbusinessRecord = NULL;
    EXEC SQL END DECLARE SECTION;
    
    // 从O32读取数据放入到结构体
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】数据开始");
    sql_context o3Ctx = m_lpO3Conn->getSQLContext();
    if (NULL == o3Ctx)
    {
        SetErrorInfo(DB_ERR_CONNECTION, "【%s】表同步，获取O3数据库连接句柄失败", m_sDstTable);        
        return false;
    }  
    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL DECLARE CUR_READDATA CURSOR FOR 
        select 
            business_date,
            busin_no,
            company_id,
            fund_id, 
            asset_id, 
            subject_no, 
            currency_no,
            busin_op_flag,
            subject_occur_balance, 
            operate_enable_date,
            enable_point,
            adjust_asset_flag,
            operator_no,
            occur_time
        from vo4jc_subjectbusiness;
    EXEC SQL OPEN CUR_READDATA;
    if (sqlca.sqlcode < 0)
    {
        SetErrorInfo(SYNC_ERR_QUERY_SRC_TABLE, "【%s】表同步，查询O3View【%s】数据失败【%s】", m_sDstTable, m_sSrcView, sqlca.sqlerrm.sqlerrmc);        
        return false;
    }
    LOGDETAIL("【" << m_sDstTable << "】表同步，查询O3View【" << m_sSrcView << "】完成，总行数【" << m_nTotalRows << "】条");
      
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    if (NULL == o4Ctx)
    {
        SetErrorInfo(DB_ERR_CONNECTION, "【%s】表同步，获取O4数据库连接句柄失败", m_sDstTable);        
        return false;
    }
    // 申请内存空间
    lpSubjectbusinessRecord = new SubjectbusinessRecord();
    if (NULL == lpSubjectbusinessRecord)
    {
        SetErrorInfo(SYNC_ERR_MALLOC_MEMORY, "【%s】表同步，申请结构体内存【SubjectdataRecord】失败", m_sDstTable);
        return false;
    }
    // 从游标批量导入到O4临时表
    for (int i = 0; i < m_nLoopTimes; ++i)
    {
        memset(lpSubjectbusinessRecord, 0, sizeof (SubjectbusinessRecord));
        // 从游标导入内存
        EXEC SQL CONTEXT USE :o3Ctx;
        EXEC SQL FETCH CUR_READDATA into :lpSubjectbusinessRecord;
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(SYNC_ERR_EXPORT_DATA_TEMP, "【%s】表同步，导入数据到中间转换表【%s】时FETCH数据失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpSubjectbusinessRecord;
            return false;
        }

        // 从内存导入临时表
        nFetchRows = (i == (m_nLoopTimes - 1)) ? m_nRemainRows : m_nBatchRows;

        EXEC SQL CONTEXT USE :o4Ctx;
        EXEC SQL for :nFetchRows
             insert into sync_subjectbusiness(
                    business_date,
                    busin_no,
                    company_id,
                    fund_id, 
                    asset_id, 
                    subject_no, 
                    currency_no,
                    busin_op_flag,
                    subject_occur_balance, 
                    operate_enable_date,
                    enable_point,
                    adjust_asset_flag,
                    operator_no,
                    occur_time)
             values(:lpSubjectbusinessRecord->business_date,
                    :lpSubjectbusinessRecord->busin_no,
                    :lpSubjectbusinessRecord->company_id,
                    :lpSubjectbusinessRecord->fund_id, 
                    :lpSubjectbusinessRecord->asset_id, 
                    :lpSubjectbusinessRecord->subject_no, 
                    rtrim(:lpSubjectbusinessRecord->currency_no),
                    rtrim(:lpSubjectbusinessRecord->busin_op_flag),
                    :lpSubjectbusinessRecord->subject_occur_balance, 
                    :lpSubjectbusinessRecord->operate_enable_date,
                    :lpSubjectbusinessRecord->enable_point,
                    rtrim(:lpSubjectbusinessRecord->adjust_asset_flag),
                    :lpSubjectbusinessRecord->operator_no,
                    :lpSubjectbusinessRecord->occur_time);
        if (sqlca.sqlcode < 0)
        {
            SetErrorInfo(DB_ERR_INSERT, "【%s】表同步，导入数据到中间转换表【%s】失败【%s】", m_sDstTable, m_sTmpTable, sqlca.sqlerrm.sqlerrmc);
            delete lpSubjectbusinessRecord;
            return false;
        }
        EXEC SQL COMMIT;
    }

    EXEC SQL CONTEXT USE :o3Ctx;
    EXEC SQL CLOSE CUR_READDATA;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到中间转换表【" << m_sTmpTable << "】完成");
    delete lpSubjectbusinessRecord;
    return true;
}

bool CSubjectBusiness::ExpTemp2Dst()
{
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】开始");
    
    struct sqlca sqlca;
    EXEC SQL ENABLE THREADS;
    EXEC SQL BEGIN DECLARE SECTION;
    char sExecSql[10240] = {0};
    EXEC SQL END DECLARE SECTION;
    
    sql_context o4Ctx = m_lpO4Conn->getSQLContext();
    if (NULL == o4Ctx)
    {
        SetErrorInfo(DB_ERR_CONNECTION, "从中间表导入数据库到【%s】表，获取O4数据库连接句柄失败", m_sDstTable);        
        return false;
    }
    
    if (!DropTableIndex())
        return false;

    EXEC SQL CONTEXT USE :o4Ctx;
    sprintf(sExecSql, "DECLARE"
            "  V_TABLE_NAME_O4   VARCHAR2(64);"
            "BEGIN"
            "  V_TABLE_NAME_O4  := '%s';"
            "  EXECUTE IMMEDIATE 'truncate table ' || V_TABLE_NAME_O4;"
            "  EXECUTE IMMEDIATE 'INSERT INTO '|| V_TABLE_NAME_O4 || '(' || "
            "	'   BUSINESS_DATE, BUSIN_NO, COMPANY_ID, FUND_ID, ASSET_ID, SUBJECT_NO, CURRENCY_NO, BUSIN_OP_FLAG, SUBJECT_OCCUR_BALANCE, OPERATE_ENABLE_DATE,	'||"
            "   '   ENABLE_POINT, ADJUST_ASSET_FLAG, OPERATOR_NO, OCCUR_TIME)' ||"            
            "	'   SELECT  T1.BUSINESS_DATE, T1.BUSIN_NO, T1.COMPANY_ID, T1.FUND_ID, T1.ASSET_ID, T1.SUBJECT_NO, NVL(T1.CURRENCY_NO,''CNY''), T1.BUSIN_OP_FLAG, '||"
            "   '           T1.SUBJECT_OCCUR_BALANCE, T1.OPERATOR_ENABLE_DATE, T1.ENABLE_POINT, T1.ADJUST_ASSET_FLAG, T1.OPERATOR_NO, T1.OCCUR_TIME' ||"
            "	'   FROM SYNC_SUBJECTDATA T1';"
            "  COMMIT;"
            "END;", m_sDstTable);

    EXEC SQL EXECUTE IMMEDIATE :sExecSql;
    if (sqlca.sqlcode < 0)
    {
        RecoverTableIndex();
        SetErrorInfo(SYNC_ERR_IMPORT_DATA_DST, "【%s】表同步，导入数据到O4表【%s】失败【%s】", m_sDstTable, m_sDstTable, sqlca.sqlerrm.sqlerrmc);
        return false;
    }
    if (!RecoverTableIndex())
        return false;
    LOGDETAIL("【" << m_sDstTable << "】表同步，导入数据到O4表【" << m_sDstTable << "】完成");
    return true;
}




